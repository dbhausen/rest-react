{"version":3,"sources":["Components/BoxBuilder/BoxBuilder.tsx","Components/Login/Env.tsx","Components/RandomNames/RandomNames.tsx","Components/Controls/SwitchTextField.tsx","Components/RestFormGrid/RestFormGrid.tsx","Components/RestCrud/RestCrud.tsx","Components/App/AboutUs.tsx","Components/App/App2.tsx","Themes/createMyTheme.tsx","index.tsx"],"names":["lorem","LoremIpsum","sentencesPerParagraph","max","min","wordsPerSentence","withWidth","props","sizeItems","width","useState","height","setHeight","boxWidth","setWidth","color","setColor","value","setValue","boxList","addBox","xs","setXs","sm","setSm","md","setMd","lg","setLg","xl","setXl","direction","setDirection","justify","setJustify","alignContent","setAlignContent","alignItems","setAlignItems","spacing","setSpacing","handleSizeChange","event","newSize","target","name","getSizePx","size","toString","concat","classes","makeStyles","theme","createStyles","root","padding","form","marginBottom","marginRight","minWidth","data","minHeight","palette","text","secondary","dataPaper","background","hint","formControl","margin","sizeControl","alignControl","primaryPaper","primary","main","mockCode","overflow","backgroundColor","info","contrastText","selectEmpty","marginTop","useStyles","AppBar","position","Tabs","onChange","newValue","aria-label","Tab","label","FormGroup","Grid","container","item","TextField","type","id","e","parseInt","variant","fullWidth","InputLabelProps","shrink","FormControl","className","InputLabel","Select","labelId","MenuItem","Button","onClick","newBox","prev","map","Paper","Typography","style","fontSize","textAlign","index","Box","m","bgcolor","p","generateWords","env","d","API_HOST","g","genderNames","_cols","field","hide","_rows","givenName","middleInitial","surName","gender","ss","age","hireDate","Date","RandomNames","firstNamelist","setFirstNamelist","lastNameList","setLastNameList","loading","setLoading","rows","setRows","rowCount","setRowCount","outputAs","setOutputAs","maxAge","setMaxAge","minAge","setMinAge","inclusiveGender","setInclusiveGender","typeMap","Map","set","cols","setCols","menubox","paddingTop","paddingLeft","maxWidth","display","justifyContent","marginLeft","box","hiddenbutton","csv","overflowY","showbutton","default","useEffect","a","getFirstnames","url","fnl","getLastnames","lnl","calculate","fetchNames","console","log","_rowCount","getRandomInt","Math","floor","random","randNormal","u","v","num","sqrt","cos","PI","_r","ssGenerator","minFirstRange","minLastRange","String","fromCharCode","dayjs","daysOnJob","subtract","firstName","find","element","maxRange","lastName","genderName","genderIndex","length","push","next","toDate","handleSwitchChange","c","col","currentTarget","checked","_newCols","getVisibleColNames","visableColNames","forEach","jsonToCsv","headers","result","row","values","header","JSON","stringify","join","elevation","FormControlLabel","control","Switch","Tooltip","title","placement","filter","get","component","endIcon","copy","density","pageSize","disableColumnSelector","autoHeight","columns","wordWrap","wordBreak","maxHeight","shortRows","shortRow","jsonToShortJson","whiteSpace","uniqueRandNumberArray","r","indexOf","i","SS","substr","fetch","method","then","response","json","catch","err","error","implementedInputTypes","NumberFormatCustomFixed2","inputRef","other","getInputRef","decimalScale","fixedDecimalScale","thousandSeparator","isNumericString","NumberFormatCustomFloat","SwitchTextField","inputComponent","includes","square","borderBottom","Checkbox","InputProps","baseUrl","meta","hook","metaFields","handleRowSelected","newFields","updataField","getRows","getColumns","getMetaFields","f","headerName","colType","metaData","actions","POST","fields","prop","detail","fieldDef","modelType","inputType","inputShrink","required","readOnly","read_only","this","RestViewGrid","emptyCols","setUrl","onRowSelected","RestForm","wordwrap","overflowWrap","emptyMeta","setMetaFields","newData","setNewData","ok","statusText","resp","setResp","setHook","handleChange","handleSubmit","preventDefault","primaryKeyFieldArray","pk","isUpdate","stripFormat","stripped","replaceAll","parseFloat","validate","reduce","acc","cur","requestOptions","body","onSubmit","Card","CardContent","gutterBottom","RestCrud","React","TabPanel","children","role","hidden","aria-labelledby","a11yProps","linkdesc","linkHeading","paddingBottom","linkLabel","fontStyle","fontWeight","AboutUs","paddingRight","align","Divider","typeHeading","link","description","Link","href","drawerWidth","brigtness","setBrightness","appliedTheme","lightThemeCfg","teal","dark","light","paper","options","createMuiTheme","createMyTheme","myStyles","drawer","breakpoints","up","flexShrink","appBar","appBar2","bottom","menuButton","brightness","right","toolbar","mixins","drawerPaper","content","flexGrow","mobileOpen","setMobileOpen","showing","setShowing","document","handleDrawerToggle","handleThemeToggle","List","ListItem","button","ListItemText","ThemeProvider","Toolbar","IconButton","edge","noWrap","Hidden","mdUp","implementation","Drawer","anchor","disableAutoFocus","open","onClose","ModalProps","keepMounted","smDown","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c02f3dce.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport {\r\n   AppBar,\r\n   Box,\r\n   Button,\r\n   createStyles,\r\n   FormControl,\r\n   FormGroup,\r\n   Grid,\r\n   GridContentAlignment,\r\n   GridDirection,\r\n   GridItemsAlignment,\r\n   GridJustification,\r\n   GridSize,\r\n   GridSpacing,\r\n   InputLabel,\r\n   makeStyles,\r\n   MenuItem,\r\n   Paper,\r\n   Select,\r\n   Tab,\r\n   Tabs,\r\n   TextField,\r\n   Theme,\r\n   Typography,\r\n   withWidth,\r\n   WithWidth,\r\n} from '@material-ui/core'\r\nimport { LoremIpsum } from 'lorem-ipsum'\r\nimport React, { useState } from 'react'\r\n\r\nconst lorem = new LoremIpsum({\r\n   sentencesPerParagraph: {\r\n      max: 8,\r\n      min: 4,\r\n   },\r\n   wordsPerSentence: {\r\n      max: 16,\r\n      min: 4,\r\n   },\r\n})\r\n\r\nconst BoxBuilder = (props: WithWidth) => {\r\n   type myBox = {\r\n      color: string\r\n      height: number\r\n      boxWidth: number\r\n   }\r\n\r\n   const sizeItems = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'auto', 'true']\r\n   const spacingItems = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n   const justifyItems = ['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']\r\n   const alignContentItems = ['stretch', 'flex-start', 'center', 'flex-end', 'space-around', 'space-between']\r\n   const alignItemsItems = ['stretch', 'flex-start', 'center', 'flex-end', 'baseline']\r\n\r\n   const { width } = props\r\n\r\n   const [height, setHeight] = useState(75)\r\n   const [boxWidth, setWidth] = useState(200)\r\n   const [color, setColor] = useState('red')\r\n   const [value, setValue] = useState(0)\r\n   const [boxList, addBox] = useState<myBox[]>()\r\n   const [xs, setXs] = useState<GridSize>(12)\r\n   const [sm, setSm] = useState<GridSize>(6)\r\n   const [md, setMd] = useState<GridSize>(4)\r\n   const [lg, setLg] = useState<GridSize>(3)\r\n   const [xl, setXl] = useState<GridSize>(2)\r\n   const [direction, setDirection] = useState<GridDirection>('row')\r\n   const [justify, setJustify] = useState<GridJustification>('flex-start')\r\n   const [alignContent, setAlignContent] = useState<GridContentAlignment>('stretch')\r\n   const [alignItems, setAlignItems] = useState<GridItemsAlignment>('stretch')\r\n   const [spacing, setSpacing] = useState<GridSpacing>(1)\r\n\r\n   const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n      setValue(newValue)\r\n   }\r\n\r\n   const handleAlignItemsChange = (event: any) => {\r\n      const newValue = event.target.value as GridItemsAlignment\r\n      setAlignItems(newValue)\r\n   }\r\n\r\n   const handleAlignContentChange = (event: any) => {\r\n      const newValue = event.target.value as GridContentAlignment\r\n      setAlignContent(newValue)\r\n   }\r\n\r\n   const handleJustifyChange = (event: any) => {\r\n      setJustify(event.target.value as GridJustification)\r\n   }\r\n\r\n   const handleDirectionChange = (event: any) => {\r\n      setDirection(event.target.value as GridDirection)\r\n   }\r\n\r\n   const handleSpacingChange = (event: any) => {\r\n      setSpacing(event.target.value as GridSpacing)\r\n   }\r\n\r\n   const handleSizeChange = (event: any) => {\r\n      const newSize: GridSize = event.target.value\r\n\r\n      switch (event.target.name) {\r\n         case 'xs':\r\n            setXs(newSize)\r\n            break\r\n         case 'sm':\r\n            setSm(newSize)\r\n            break\r\n         case 'md':\r\n            setMd(newSize)\r\n            break\r\n         case 'lg':\r\n            setLg(newSize)\r\n            break\r\n         case 'xl':\r\n            setXl(newSize)\r\n            break\r\n\r\n         default:\r\n            break\r\n      }\r\n   }\r\n\r\n   const getSizePx = (size: number) => {\r\n      return size.toString().concat('px')\r\n   }\r\n\r\n   const handleHeightChange = (e: any) => {\r\n      setHeight(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const handleWidthChange = (e: any) => {\r\n      setWidth(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const handleColorChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n      setColor(event.target.value as string)\r\n   }\r\n\r\n   const handleSubmit = () => {\r\n      const newBox: myBox = { color, height, boxWidth }\r\n      addBox((prev) => {\r\n         if (prev) {\r\n            return prev.concat(newBox)\r\n         }\r\n         return [newBox]\r\n      })\r\n   }\r\n\r\n   const handleClear = () => {\r\n      addBox([])\r\n   }\r\n\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         root: {\r\n            padding: '0px',\r\n         },\r\n         form: {\r\n            marginBottom: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: '215px',\r\n         },\r\n         data: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n\r\n            color: theme.palette.text.secondary,\r\n         },\r\n         dataPaper: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n            background: theme.palette.text.hint,\r\n         },\r\n         formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n         },\r\n         sizeControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: '60px',\r\n         },\r\n         alignControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: '110px',\r\n         },\r\n         primaryPaper: {\r\n            background: theme.palette.primary.main,\r\n         },\r\n         mockCode: {\r\n            overflow: 'auto',\r\n            backgroundColor: theme.palette.info.main,\r\n            color: theme.palette.info.contrastText,\r\n         },\r\n         selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n         },\r\n      })\r\n   )\r\n   const classes = useStyles()\r\n\r\n   return (\r\n      <div>\r\n         <AppBar position=\"static\">\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n               <Tab label=\"Demo\" />\r\n               <Tab label=\"Instalation\" />\r\n               <Tab label=\"Usage\" />\r\n            </Tabs>\r\n         </AppBar>\r\n         {value === 0 ? (\r\n            <div>\r\n               <FormGroup>\r\n                  <Grid container direction=\"column\">\r\n                     <Grid container direction=\"row\">\r\n                        <Grid item xs={2}>\r\n                           <TextField\r\n                              type=\"number\"\r\n                              id=\"height\"\r\n                              key=\"height\"\r\n                              label=\"Height\"\r\n                              value={height}\r\n                              onChange={handleHeightChange}\r\n                              variant=\"filled\"\r\n                              fullWidth={false}\r\n                              InputLabelProps={{ shrink: true }}\r\n                           />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                           <TextField\r\n                              type=\"number\"\r\n                              id=\"width\"\r\n                              key=\"width\"\r\n                              label=\"Width\"\r\n                              value={boxWidth}\r\n                              onChange={handleWidthChange}\r\n                              variant=\"filled\"\r\n                              fullWidth={false}\r\n                              InputLabelProps={{ shrink: true }}\r\n                           />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                           <FormControl className={classes.formControl}>\r\n                              <InputLabel id=\"demo-simple-select-label\">Color</InputLabel>\r\n                              <Select\r\n                                 labelId=\"demo-simple-select-label\"\r\n                                 id=\"demo-simple-select\"\r\n                                 value={color}\r\n                                 onChange={handleColorChange}>\r\n                                 <MenuItem value=\"red\">Red</MenuItem>\r\n                                 <MenuItem value=\"purple\">Purple</MenuItem>\r\n                                 <MenuItem value=\"green\">Green</MenuItem>\r\n                                 <MenuItem value=\"blue\">Blue</MenuItem>\r\n                              </Select>\r\n                           </FormControl>\r\n                        </Grid>\r\n                     </Grid>\r\n                     <Grid container direction=\"row\">\r\n                        <Button variant=\"contained\" size=\"small\" onClick={handleSubmit} color=\"primary\">\r\n                           Add Box\r\n                        </Button>\r\n                        <Button variant=\"contained\" size=\"small\" onClick={handleClear} color=\"secondary\">\r\n                           Clear\r\n                        </Button>\r\n                     </Grid>\r\n                  </Grid>\r\n               </FormGroup>\r\n               <Grid container justify=\"flex-start\" direction=\"row\">\r\n                  <Grid item xs={3}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel>Direction</InputLabel>\r\n                        <Select value={direction} onChange={handleDirectionChange}>\r\n                           <MenuItem value=\"row\">row</MenuItem>\r\n                           <MenuItem value=\"column\">column</MenuItem>\r\n                           <MenuItem value=\"row-reverse\">row-reverse</MenuItem>\r\n                           <MenuItem value=\"column-reverse\">column-reverse</MenuItem>\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>Spacing</InputLabel>\r\n                        <Select id=\"spacing\" name=\"spacing\" value={spacing} onChange={handleSpacingChange}>\r\n                           {spacingItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n               </Grid>\r\n               <Grid container justify=\"flex-start\" direction=\"row\">\r\n                  <Grid item xs={4}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel>justify</InputLabel>\r\n                        <Select value={justify} onChange={handleJustifyChange}>\r\n                           {justifyItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel>alignContent</InputLabel>\r\n                        <Select value={alignContent} onChange={handleAlignContentChange}>\r\n                           {alignContentItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel> AlignItems</InputLabel>\r\n                        <Select value={alignItems} onChange={handleAlignItemsChange}>\r\n                           {alignItemsItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n               </Grid>\r\n\r\n               <Grid container justify=\"flex-start\" direction=\"row\">\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>xs</InputLabel>\r\n                        <Select id=\"xs\" name=\"xs\" value={xs} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item sm={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>sm</InputLabel>\r\n                        <Select id=\"sm\" name=\"sm\" value={sm} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>md</InputLabel>\r\n                        <Select id=\"md\" name=\"md\" value={md} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>lg</InputLabel>\r\n                        <Select id=\"lg\" name=\"lg\" value={lg} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>xl</InputLabel>\r\n                        <Select id=\"xl\" name=\"xl\" value={xl} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n               </Grid>\r\n               <Paper className={classes.mockCode}>\r\n                  <Typography style={{ fontSize: 14 }} variant=\"subtitle1\">\r\n                     <pre>\r\n                        <code>\r\n                           {`<Grid container direction=\"${direction}\" justify=\"${justify}\" alignContent=\"${alignContent}\" alignItems=\"${alignItems}\" spacing={${spacing}}>`}\r\n                           <br />\r\n                           {`    <Grid item xs={${xs}} sm={${sm}} md={${md}} lg={${lg}} xl={${xl}}> ...</Grid>`}\r\n                           <br />\r\n                           {`    ...`}\r\n                           <br />\r\n                           {`</Grid>`}\r\n                        </code>\r\n                     </pre>\r\n                  </Typography>\r\n               </Paper>\r\n               <Paper className={classes.primaryPaper}>\r\n                  <Typography style={{ textAlign: 'center' }} variant=\"subtitle1\">\r\n                     Current width: {width}\r\n                  </Typography>\r\n               </Paper>\r\n\r\n               <Grid\r\n                  container\r\n                  direction={direction}\r\n                  justify={justify}\r\n                  alignContent={alignContent}\r\n                  spacing={spacing}\r\n                  alignItems={alignItems}>\r\n                  {boxList?.map((item, index) => (\r\n                     <Grid item xs={xs} sm={sm} md={md} lg={lg} key={index}>\r\n                        <Box\r\n                           style={{ minWidth: getSizePx(item.boxWidth) }}\r\n                           m={0}\r\n                           bgcolor={item.color}\r\n                           p={2}\r\n                           color=\"text.primary\">\r\n                           <Typography>\r\n                              Box ({index}) minWidth: {getSizePx(item.boxWidth)}{' '}\r\n                           </Typography>\r\n                           <Paper style={{ overflow: 'auto', height: getSizePx(item.height) }}>\r\n                              {lorem.generateWords(50)}\r\n                           </Paper>\r\n                        </Box>\r\n                     </Grid>\r\n                  ))}\r\n               </Grid>\r\n            </div>\r\n         ) : null}\r\n         {value === 1 ? <Typography>To Do: Instalation</Typography> : null}\r\n         {value === 2 ? <Typography>To Do: Usage</Typography> : null}\r\n      </div>\r\n   )\r\n}\r\nexport default withWidth()(BoxBuilder)\r\n","const env = () => {\r\n   const d = { API_HOST: 'http://www.restreact.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://www.restreact.com'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable no-console */\r\nimport {\r\n   Button,\r\n   createStyles,\r\n   FormControl,\r\n   FormControlLabel,\r\n   FormGroup,\r\n   Grid,\r\n   InputLabel,\r\n   makeStyles,\r\n   MenuItem,\r\n   Paper,\r\n   Select,\r\n   Switch,\r\n   TextField,\r\n   Theme,\r\n   Tooltip,\r\n   Typography,\r\n} from '@material-ui/core'\r\nimport { Columns, DataGrid } from '@material-ui/data-grid'\r\nimport CreateSharpIcon from '@material-ui/icons/CreateSharp'\r\nimport copy from 'clipboard-copy'\r\nimport dayjs from 'dayjs'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst genderNames: string[] = [\r\n   'Not disclosed',\r\n   'Man',\r\n   'Woman',\r\n   'Transgender',\r\n   'Genderqueer',\r\n   'Agender',\r\n   'Genderless',\r\n   'Non-binary',\r\n   'Cis Man',\r\n   'Cis Woman',\r\n   'Trans Man',\r\n   'Trans Woman',\r\n   'Third Gender',\r\n   'Two-Spirit',\r\n   'Bigender',\r\n   'Genderfluid',\r\n   'Undecided',\r\n]\r\n\r\nconst _cols: Columns = [\r\n   //  { field: 'id' },\r\n   { field: 'givenName', hide: false },\r\n   { field: 'middleInitial', hide: false },\r\n   { field: 'surName', hide: false },\r\n   { field: 'gender', width: 150, hide: false },\r\n   { field: 'ss', width: 150, hide: false },\r\n   { field: 'age', type: 'number', width: 90, hide: false },\r\n   { field: 'hireDate', type: 'date', width: 250, hide: false },\r\n]\r\nconst _rows: TRow[] = [\r\n   //  { field: 'id' },\r\n   { id: 0, givenName: '', middleInitial: '', surName: '', gender: '', ss: '', age: 0, hireDate: new Date() },\r\n]\r\n\r\ntype TFirstName = {\r\n   givenName: string\r\n   gender: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TLastName = {\r\n   surName: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TRow = {\r\n   id: number\r\n   givenName: string\r\n   middleInitial: string\r\n   surName: string\r\n   gender: string\r\n   ss: string\r\n   age: number\r\n   hireDate: Date\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nconst RandomNames = (props: IProps) => {\r\n   const [firstNamelist, setFirstNamelist] = useState<TFirstName[]>()\r\n   const [lastNameList, setLastNameList] = useState<TLastName[]>()\r\n   const [loading, setLoading] = useState(true)\r\n   const [rows, setRows] = useState<TRow[]>(_rows)\r\n   const [rowCount, setRowCount] = useState(100)\r\n   const [outputAs, setOutputAs] = useState('DataGrid')\r\n   const [maxAge, setMaxAge] = useState<number>(65)\r\n   const [minAge, setMinAge] = useState<number>(20)\r\n   const [inclusiveGender, setInclusiveGender] = useState(true)\r\n   const typeMap = new Map()\r\n\r\n   typeMap.set('id', { type: 'number' })\r\n   typeMap.set('givenName', { type: 'string' })\r\n   typeMap.set('middleInitial', { type: 'string' })\r\n   typeMap.set('surName', { type: 'string' })\r\n   typeMap.set('gender', { type: 'string' })\r\n   typeMap.set('ss', { type: 'string' })\r\n   typeMap.set('age', { type: 'number' })\r\n   typeMap.set('hireDate', { type: 'Date' })\r\n\r\n   // eslint-disable-next-line no-unused-vars\r\n   const [cols, setCols] = useState<Columns>(_cols)\r\n   //   const uniqueRandNumberArray: number[] = []\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         menubox: {\r\n            height: '50px',\r\n            paddingTop: theme.spacing(3),\r\n            paddingLeft: theme.spacing(3),\r\n            maxWidth: '800px',\r\n            display: 'flex',\r\n            justifyContent: 'flex-start',\r\n            alignItems: 'flex-end',\r\n            '& .MuiSelect-selectMenu': {\r\n               minWidth: '80px',\r\n               marginLeft: '10px',\r\n            },\r\n         },\r\n         box: {\r\n            height: '30px',\r\n            maxWidth: '700px',\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            alignItems: 'flex-end',\r\n         },\r\n         hiddenbutton: {\r\n            display: 'none',\r\n         },\r\n         csv: {\r\n            overflowY: 'scroll',\r\n         },\r\n         showbutton: {\r\n            display: 'flex',\r\n         },\r\n         dataPaper: {\r\n            background: theme.palette.background.default,\r\n         },\r\n      })\r\n   )\r\n\r\n   const classes = useStyles()\r\n\r\n   useEffect(() => {\r\n      const fetchNames = async () => {\r\n         const fnl = await getFirstnames(`${props.url}firstname/`)\r\n         setFirstNamelist(fnl)\r\n         const lnl = await getLastnames(`${props.url}lastname/`)\r\n         setLastNameList(lnl)\r\n         calculate(rowCount, fnl, lnl)\r\n      }\r\n\r\n      fetchNames()\r\n\r\n      return () => {\r\n         console.log('to do: cleanup useEffect if needed')\r\n      }\r\n   }, [])\r\n\r\n   const callCalculate = () => {\r\n      if (rowCount && firstNamelist && lastNameList) {\r\n         calculate(rowCount, firstNamelist, lastNameList)\r\n      }\r\n   }\r\n\r\n   const calculate = (_rowCount: number, fnl: TFirstName[], lnl: TLastName[]) => {\r\n      setRows([])\r\n      setLoading(true)\r\n\r\n      const getRandomInt = (max: number): number => {\r\n         return Math.floor(Math.random() * Math.floor(max))\r\n      }\r\n\r\n      const randNormal = (min: number, max: number): number => {\r\n         let u = 0\r\n         let v = 0\r\n         while (u === 0) u = Math.random()\r\n         while (v === 0) v = Math.random()\r\n         let num = Math.sqrt(-8.0 * Math.log(u)) * Math.cos(8.0 * Math.PI * v)\r\n         num = num / 10.0 + 0.5 // Translate to 0 -> 1\r\n         if (num > 1 || num < 0) return randNormal(min, max) // resample between 0 and 1\r\n         return num * (max - min) + min\r\n      }\r\n\r\n      const _r: TRow[] = []\r\n      const ssGenerator: IterableIterator<string> = g(_rowCount)\r\n      for (let index = 0; index < _rowCount; index += 1) {\r\n         const minFirstRange = getRandomInt(192908123)\r\n         const minLastRange = getRandomInt(154575750)\r\n         const middleInitial = String.fromCharCode(getRandomInt(22) + 65)\r\n         const age = Math.floor(randNormal(minAge, maxAge))\r\n         let hireDate = dayjs()\r\n         const daysOnJob = getRandomInt(age - minAge) * 0.65 * 365 + getRandomInt(365)\r\n         hireDate = hireDate.subtract(Math.floor(daysOnJob), 'days')\r\n         const firstName = fnl.find((element) => element.maxRange >= minFirstRange)\r\n         const lastName = lnl.find((element) => element.maxRange >= minLastRange)\r\n         let genderName = firstName?.gender === 'Male' ? 'Male' : 'Female'\r\n         if (inclusiveGender) {\r\n            genderName = genderName === 'Male' ? 'Man' : 'Woman'\r\n         }\r\n         const genderIndex = getRandomInt(1600)\r\n         if (genderIndex < genderNames.length && inclusiveGender) {\r\n            genderName = genderNames[genderIndex]\r\n         }\r\n\r\n         _r.push({\r\n            id: index,\r\n            givenName: firstName?.givenName || '',\r\n            middleInitial,\r\n            surName: lastName?.surName || '',\r\n            gender: genderName,\r\n            ss: ssGenerator.next().value,\r\n            age,\r\n            hireDate: hireDate.toDate(),\r\n         })\r\n      }\r\n\r\n      setRows(_r)\r\n      setLoading(false)\r\n   }\r\n\r\n   const copyToClip = () => {\r\n      if (outputAs === 'JSON') {\r\n         copy(JSON.stringify(rows))\r\n      } else {\r\n         copy(jsonToCsv())\r\n      }\r\n   }\r\n\r\n   // eslint-disable-next-line no-unused-vars\r\n   const handleSwitchChange = (e: React.ChangeEvent<{ checked: boolean; name: string }>) => {\r\n      setCols((prev) => {\r\n         const c = prev.find((col) => col.field === e.currentTarget.name)\r\n         if (c) {\r\n            c.hide = !e.target.checked\r\n         }\r\n         const _newCols: Columns = [\r\n            //  { field: 'id' },\r\n            { field: 'givenName', hide: false },\r\n            { field: 'middleInitial', hide: false },\r\n            { field: 'surName', hide: false },\r\n            { field: 'gender', width: 150, hide: false },\r\n            { field: 'ss', width: 150, hide: false },\r\n            { field: 'age', type: 'number', width: 90, hide: false },\r\n            { field: 'hireDate', type: 'date', width: 250, hide: false },\r\n         ]\r\n\r\n         for (let index = 0; index < _newCols.length; index += 1) {\r\n            _newCols[index].hide = prev[index].hide\r\n         }\r\n\r\n         return _newCols\r\n      })\r\n   }\r\n\r\n   const handleInclusiveGenderChange = (e: any) => {\r\n      setInclusiveGender(e.target.checked)\r\n   }\r\n\r\n   const handleRowCountChange = (e: React.ChangeEvent<{ value: number }>) => {\r\n      setRowCount(e.target.value)\r\n      if (firstNamelist && lastNameList) {\r\n         calculate(e.target.value, firstNamelist, lastNameList)\r\n      }\r\n   }\r\n\r\n   const handleOutputAsChange = (e: React.ChangeEvent<{ value: string }>) => {\r\n      setOutputAs(e.target.value)\r\n   }\r\n\r\n   const handleMinAgeChange = (e: any) => {\r\n      setMinAge(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const handleMaxAgeChange = (e: any) => {\r\n      setMaxAge(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const getVisibleColNames = (): string[] => {\r\n      const visableColNames: string[] = []\r\n      cols.forEach((col) => {\r\n         if (!col.hide) {\r\n            visableColNames.push(col.field)\r\n         }\r\n      })\r\n      return visableColNames\r\n   }\r\n\r\n   const jsonToCsv = (): string => {\r\n      if (!rows) {\r\n         return ''\r\n      }\r\n      const headers = getVisibleColNames()\r\n      const replacer = (value: any) => {\r\n         return value === null ? '' : value\r\n      }\r\n      let result = ''\r\n      rows.forEach((row: { [index: string]: any }) => {\r\n         const values: any = []\r\n         headers.forEach((header) => {\r\n            values.push(JSON.stringify(replacer(row[header])))\r\n         })\r\n         result = result.concat(values.join(',').concat('\\n'))\r\n      })\r\n\r\n      return result\r\n   }\r\n\r\n   const jsonToShortJson = (): string => {\r\n      const headers = getVisibleColNames()\r\n\r\n      const shortRows: any[] = []\r\n\r\n      rows.forEach((row) => {\r\n         const shortRow: any = {}\r\n\r\n         headers.forEach((header) => {\r\n            switch (header) {\r\n               case 'id':\r\n                  shortRow.id = row.id\r\n                  break\r\n               case 'givenName':\r\n                  shortRow.givenName = row.givenName\r\n                  break\r\n               case 'surName':\r\n                  shortRow.surName = row.surName\r\n                  break\r\n               case 'middleInitial':\r\n                  shortRow.middleInitial = row.middleInitial\r\n                  break\r\n               case 'gender':\r\n                  shortRow.gender = row.gender\r\n                  break\r\n               case 'ss':\r\n                  shortRow.ss = row.ss\r\n                  break\r\n               case 'hireDate':\r\n                  shortRow.hireDate = row.hireDate\r\n                  break\r\n               case 'age':\r\n                  shortRow.age = row.age\r\n                  break\r\n               default:\r\n                  break\r\n            }\r\n         })\r\n         shortRows.push(shortRow)\r\n      })\r\n\r\n      return JSON.stringify(shortRows)\r\n   }\r\n\r\n   return (\r\n      <Paper elevation={0} style={{ padding: '8px' }}>\r\n         <Grid container direction=\"row\" spacing={3}>\r\n            <Grid item>\r\n               <FormGroup>\r\n                  {cols.map((col) => (\r\n                     <FormControlLabel\r\n                        control={\r\n                           <Switch\r\n                              size=\"small\"\r\n                              checked={!col.hide}\r\n                              onChange={handleSwitchChange}\r\n                              name={col.field}\r\n                              color=\"primary\"\r\n                           />\r\n                        }\r\n                        label={col.field}\r\n                     />\r\n                  ))}\r\n               </FormGroup>\r\n            </Grid>\r\n            <Grid item>\r\n               <FormGroup>\r\n                  <FormControlLabel\r\n                     control={\r\n                        <Switch\r\n                           size=\"small\"\r\n                           onChange={handleInclusiveGenderChange}\r\n                           checked={inclusiveGender}\r\n                           value={inclusiveGender}\r\n                           color=\"primary\"\r\n                        />\r\n                     }\r\n                     label=\"Use inclusive gender roles\"\r\n                  />\r\n\r\n                  <TextField\r\n                     label=\"Maximum age\"\r\n                     onChange={handleMaxAgeChange}\r\n                     value={maxAge}\r\n                     type=\"number\"\r\n                     color=\"primary\"\r\n                  />\r\n\r\n                  <TextField\r\n                     label=\"Minimum age when hired\"\r\n                     onChange={handleMinAgeChange}\r\n                     value={minAge}\r\n                     type=\"number\"\r\n                     color=\"primary\"\r\n                  />\r\n\r\n                  <Tooltip title=\"Use preferences to generate a new set of employees\" placement=\"bottom-start\">\r\n                     <Button color=\"primary\" variant=\"contained\" onClick={() => callCalculate()}>\r\n                        Refresh\r\n                     </Button>\r\n                  </Tooltip>\r\n               </FormGroup>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n               <Paper className={classes.dataPaper} style={{ padding: '10px' }}>\r\n                  <Typography>\r\n                     <pre>\r\n                        {'type TEmployee = {'}\r\n                        {cols\r\n                           .filter((col) => !col.hide)\r\n                           .map((col) => (\r\n                              <div>{`   ${col.field}: ${typeMap.get(col.field).type}`}</div>\r\n                           ))}\r\n                        {'}'}\r\n                     </pre>\r\n                  </Typography>\r\n               </Paper>\r\n            </Grid>\r\n         </Grid>\r\n\r\n         <Paper className={classes.menubox} component=\"span\">\r\n            <FormControl>\r\n               <InputLabel id=\"demo-simple-select-label\">Count</InputLabel>\r\n               <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={rowCount}\r\n                  onChange={handleRowCountChange}>\r\n                  <MenuItem value={100}>100</MenuItem>\r\n                  <MenuItem value={1000}>1,000</MenuItem>\r\n                  <MenuItem value={10000}>10,000</MenuItem>\r\n                  <MenuItem value={50000}>50,000</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n               <InputLabel id=\"demo-simple-select-label\">Output as</InputLabel>\r\n               <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={outputAs}\r\n                  onChange={handleOutputAsChange}>\r\n                  <MenuItem value=\"DataGrid\">Data Grid</MenuItem>\r\n                  <MenuItem value=\"JSON\">JSON</MenuItem>\r\n                  <MenuItem value=\"csv\">Comma Separated</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n            <Button\r\n               endIcon={<CreateSharpIcon />}\r\n               size=\"small\"\r\n               classes={outputAs === 'DataGrid' ? { root: classes.hiddenbutton } : { root: classes.showbutton }}\r\n               onClick={copyToClip}>\r\n               Copy to clipboard\r\n            </Button>\r\n         </Paper>\r\n\r\n         {outputAs === 'DataGrid' ? (\r\n            <Paper elevation={0} style={{ marginBottom: '20px', paddingLeft: '20px' }}>\r\n               <Paper className={classes.dataPaper} elevation={9} style={{ height: '400px' }}>\r\n                  <DataGrid\r\n                     density=\"compact\"\r\n                     loading={loading}\r\n                     pageSize={100}\r\n                     disableColumnSelector={true}\r\n                     autoHeight={false}\r\n                     rows={rows}\r\n                     columns={cols}\r\n                  />\r\n               </Paper>\r\n            </Paper>\r\n         ) : outputAs === 'JSON' ? (\r\n            <Paper\r\n               className={classes.dataPaper}\r\n               id=\"json\"\r\n               elevation={9}\r\n               style={{\r\n                  wordWrap: 'break-word',\r\n                  wordBreak: 'break-all',\r\n                  overflow: 'auto',\r\n                  maxWidth: '700px',\r\n                  maxHeight: '400px',\r\n               }}>\r\n               {jsonToShortJson()}\r\n            </Paper>\r\n         ) : (\r\n            <Paper\r\n               className={classes.dataPaper}\r\n               id=\"json\"\r\n               elevation={9}\r\n               style={{ maxWidth: '700px', maxHeight: '400px', whiteSpace: 'break-spaces', overflow: 'auto' }}>\r\n               <pre>{jsonToCsv()}</pre>\r\n            </Paper>\r\n         )}\r\n      </Paper>\r\n   )\r\n}\r\nexport default RandomNames\r\n\r\nfunction* g(rowCount: number): IterableIterator<string> {\r\n   const uniqueRandNumberArray: number[] = []\r\n\r\n   while (uniqueRandNumberArray.length < rowCount) {\r\n      const r = Math.floor(Math.random() * Math.floor(899999999)) + 100000000\r\n      if (uniqueRandNumberArray.indexOf(r) === -1) {\r\n         uniqueRandNumberArray.push(r)\r\n      }\r\n   }\r\n   for (let i = 0; i < rowCount; i += 1) {\r\n      const SS: string = uniqueRandNumberArray[i].toString()\r\n      yield `${SS.substr(0, 3)}-${SS.substr(3, 2)}-${SS.substr(5, 4)}`\r\n   }\r\n}\r\n\r\nconst getFirstnames = async (url: string): Promise<TFirstName[]> => {\r\n   const r: TFirstName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TFirstName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n\r\nconst getLastnames = async (url: string): Promise<TLastName[]> => {\r\n   const r: TLastName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TLastName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n","import { Checkbox, FormControlLabel, Grid, Paper, TextField, TextFieldProps } from '@material-ui/core'\r\nimport React from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst varient = 'standard'\r\n\r\n// number input type is being used for integers only\r\n// checkbox is used for boolean datatype\r\nconst implementedInputTypes = ['decimal', 'float', 'number', 'dateTime-local', 'date', 'email', 'checkbox', 'text']\r\n\r\nfunction NumberFormatCustomFixed2(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return (\r\n      <NumberFormat\r\n         {...other}\r\n         getInputRef={inputRef}\r\n         onChange={onChange}\r\n         decimalScale={2}\r\n         fixedDecimalScale\r\n         thousandSeparator\r\n         isNumericString\r\n      />\r\n   )\r\n}\r\n\r\nfunction NumberFormatCustomFloat(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return <NumberFormat {...other} getInputRef={inputRef} onChange={onChange} isNumericString />\r\n}\r\n\r\n/*\r\ninterface IProps {\r\n   fullWidth: boolean\r\n   label: string\r\n   value: any\r\n   required: boolean\r\n   onChange: any\r\n   name: string\r\n   id: string\r\n   type: string\r\n   InputLabelProps: any\r\n}\r\n*/\r\n\r\ntype SwitchTextFieldProps = Omit<TextFieldProps, 'InputProps'> & { type: string; onChange: any; value: any }\r\n\r\nconst SwitchTextField = (props: SwitchTextFieldProps) => {\r\n   const { type, value, label } = props\r\n   if (!implementedInputTypes.includes(type)) {\r\n      return (\r\n         <Grid justify=\"center\">\r\n            <Paper variant=\"outlined\">type {type} is not implemented</Paper>\r\n         </Grid>\r\n      )\r\n   }\r\n\r\n   // inputComponent undefined is ok\r\n   let inputComponent\r\n   if (type === 'decimal') {\r\n      inputComponent = NumberFormatCustomFixed2\r\n   } else if (type === 'float') {\r\n      inputComponent = NumberFormatCustomFloat\r\n   }\r\n\r\n   if (type === 'checkbox') {\r\n      return (\r\n         <Paper elevation={3} square style={{ margin: 0, borderBottom: '1px solid' }}>\r\n            <FormControlLabel\r\n               control={<Checkbox id={props.id} onClick={props.onChange} color=\"primary\" checked={value} />}\r\n               label={label}\r\n            />\r\n         </Paper>\r\n      )\r\n   }\r\n   return (\r\n      <Paper elevation={3} variant=\"elevation\">\r\n         <TextField\r\n            variant={varient}\r\n            InputProps={{\r\n               inputComponent,\r\n            }}\r\n            {...props}\r\n         />\r\n      </Paper>\r\n   )\r\n}\r\nexport default SwitchTextField\r\n","/* eslint-disable react/require-default-props */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { Button, Card, CardContent, createStyles, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { ColDef, Columns, DataGrid, DataGridProps, RowsProp } from '@material-ui/data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SwitchTextField from '../Controls/SwitchTextField'\r\nimport env from '../Login/Env'\r\n\r\ntype TField = {\r\n   name: string\r\n   modelType: string\r\n   inputType: string\r\n   inputShrink: boolean\r\n   colType: string\r\n   required: boolean\r\n   readOnly: boolean\r\n   label: string\r\n   width: number\r\n   value: any\r\n}\r\n\r\nconst baseUrl = '/api/'\r\n\r\nclass RestMeta {\r\n   url: string\r\n\r\n   hook: any\r\n\r\n   metaFields: TField[]\r\n\r\n   setUrl(url: string) {\r\n      this.url = url\r\n   }\r\n\r\n   setHook(hook: any) {\r\n      this.hook = hook\r\n   }\r\n\r\n   handleRowSelected = (e: any) => {\r\n      const newFields: TField[] = this.metaFields.map((field) => {\r\n         const updataField: TField = field\r\n\r\n         updataField.value = e.data[field.name] ? e.data[field.name] : ''\r\n\r\n         return updataField\r\n      })\r\n      if (this.hook) {\r\n         this.hook(newFields)\r\n      }\r\n   }\r\n\r\n   getRows = async (): Promise<RowsProp> => {\r\n      const r: RowsProp = await fetch(this.url, { method: 'GET' })\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            const rows: RowsProp = data\r\n\r\n            return rows\r\n         })\r\n         .catch((err) => {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`no database >>> ${err}`)\r\n            throw err\r\n         })\r\n      return r\r\n   }\r\n\r\n   getColumns = async (): Promise<Columns> => {\r\n      const metaFields: TField[] = await this.getMetaFields()\r\n      const _cols: Columns = metaFields.map((f) => {\r\n         const col: ColDef = {\r\n            field: f.name,\r\n            headerName: f.label,\r\n            type: f.colType,\r\n         }\r\n         return col\r\n      })\r\n      return _cols\r\n   }\r\n\r\n   getMetaFields = async (): Promise<TField[]> => {\r\n      const f: TField[] = await fetch(this.url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            const meta = metaData.actions.POST\r\n            const fields: TField[] = []\r\n            for (const prop in meta) {\r\n               const detail = meta[prop]\r\n               const fieldDef: TField = {\r\n                  name: prop,\r\n                  modelType: detail.type,\r\n                  inputType: detail.type,\r\n                  inputShrink: true,\r\n                  colType: 'string',\r\n                  required: detail.required,\r\n                  readOnly: detail.read_only,\r\n                  label: detail.label,\r\n                  width: 350,\r\n                  value: '',\r\n               }\r\n               switch (detail.type) {\r\n                  case 'integer':\r\n                     fieldDef.inputType = 'number'\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'decimal':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'float':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'boolean':\r\n                     fieldDef.inputType = 'checkbox'\r\n                     fieldDef.value = false\r\n                     break\r\n                  case 'datetime':\r\n                     fieldDef.inputType = 'dateTime-local'\r\n                     fieldDef.colType = 'dateTime'\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'date':\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'string':\r\n                     fieldDef.inputType = 'text'\r\n                     break\r\n                  case 'email':\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  case 'file upload':\r\n                     fieldDef.width = 300\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  default:\r\n                     break\r\n               }\r\n\r\n               fields.push(fieldDef)\r\n            }\r\n            return fields\r\n         })\r\n      this.metaFields = f\r\n      return f\r\n   }\r\n}\r\nconst meta = new RestMeta()\r\n\r\ndeclare type RestViewGridProps = Omit<DataGridProps, 'columns' | 'rows'> & {\r\n   url: string\r\n   columns?: Columns\r\n   rows?: RowsProp\r\n}\r\n\r\n//  TO DO: set \"error\" parameter ie. <DataGrid> error </DataGrid> if error\r\n//  TO DO: note what's here does not work shows no row instead of error\r\nexport const RestViewGrid = (props: RestViewGridProps): any => {\r\n   const { url, columns, rows, ...other } = props\r\n   const emptyCols: Columns = []\r\n   const emptyRows: RowsProp = []\r\n   const [cols, setCols] = useState(emptyCols)\r\n   const [_rows, setRows] = useState(emptyRows)\r\n   meta.setUrl(url)\r\n\r\n   useEffect(() => {\r\n      if (cols === emptyCols) {\r\n         if (columns) {\r\n            setCols(columns)\r\n         } else {\r\n            meta.getColumns().then((c) => {\r\n               setCols(c)\r\n            })\r\n         }\r\n\r\n         if (rows) {\r\n            setRows(rows)\r\n         } else {\r\n            meta.getRows().then((r) => {\r\n               setRows(r)\r\n            })\r\n         }\r\n      }\r\n   }, [])\r\n\r\n   return <DataGrid onRowSelected={meta.handleRowSelected} rows={_rows} columns={cols} {...other} />\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nexport const RestForm = (props: IProps) => {\r\n   const useStyles = makeStyles(() =>\r\n      createStyles({\r\n         wordwrap: {\r\n            overflowWrap: 'anywhere',\r\n         },\r\n      })\r\n   )\r\n\r\n   const emptyMeta: TField[] = []\r\n   const emptyRep = { ok: false, statusText: '', url: '' }\r\n   const [metaFields, setMetaFields] = useState<TField[]>(emptyMeta)\r\n   const [newData, setNewData] = useState('')\r\n   const [resp, setResp] = useState(emptyRep)\r\n   const classes = useStyles()\r\n   meta.setUrl(props.url)\r\n   meta.setHook(setMetaFields)\r\n\r\n   useEffect(() => {\r\n      if (metaFields === emptyMeta) {\r\n         meta\r\n            .getMetaFields()\r\n            .then((c) => {\r\n               setMetaFields(c)\r\n            })\r\n            .catch(() => {})\r\n      }\r\n   })\r\n\r\n   const handleChange = (event: any) => {\r\n      // event.preventDefault()\r\n      // event.persist()\r\n      let { value } = event.target\r\n      const { type, id, checked } = event.target\r\n      const index = parseInt(id, 10)\r\n\r\n      setMetaFields((prev) => {\r\n         // return untouched all the items that don't match index\r\n         return prev.map((item, i) => {\r\n            if (i !== index) {\r\n               return item\r\n            }\r\n            // for the one item that does match the index\r\n            // do any special handling of event.target.value\r\n            if (type === 'checkbox') {\r\n               value = checked\r\n            }\r\n\r\n            // update the matching item and return result to setMetaFields\r\n            return {\r\n               ...item,\r\n               value,\r\n            }\r\n         })\r\n      })\r\n   }\r\n\r\n   const handleSubmit = async (event: any) => {\r\n      event.preventDefault()\r\n\r\n      // Make an array of read-only fields that have an assigne value\r\n      // If there is anyhting in this array then the read-only primary key field\r\n      // been assigned a value which only happens if this should be an update operation.\r\n      const primaryKeyFieldArray = metaFields\r\n         .filter((field) => field.value && field.readOnly)\r\n         .map((field) => {\r\n            return {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n         })\r\n\r\n      let pk: number = 0\r\n      const isUpdate = primaryKeyFieldArray.length > 0\r\n\r\n      if (isUpdate) {\r\n         pk = primaryKeyFieldArray[0].value\r\n      }\r\n\r\n      let stripFormat = metaFields\r\n         .filter((field) => !field.readOnly)\r\n         .map((field) => {\r\n            const stripped = {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n            if (field.inputType === 'decimal' && field.value) {\r\n               stripped.value = stripped.value.replaceAll(',', '')\r\n               stripped.value = stripped.value.replaceAll('$', '')\r\n               stripped.value = stripped.value.replaceAll(' ', '')\r\n               stripped.value = parseFloat(stripped.value)\r\n            }\r\n            if (field.inputType === 'number' && field.value) {\r\n               stripped.value = parseInt(stripped.value, 10)\r\n            }\r\n            if (stripped.value === '') {\r\n               stripped.value = null\r\n            }\r\n            return stripped\r\n         })\r\n\r\n      stripFormat = stripFormat.concat(primaryKeyFieldArray)\r\n\r\n      const isValid = validate()\r\n      if (isValid) {\r\n         const data = stripFormat.reduce((acc, cur) => ({ ...acc, [cur.name]: cur.value }), {})\r\n         setNewData(JSON.stringify(data))\r\n         let url = `${env().API_HOST + baseUrl}`\r\n         let method = 'POST'\r\n\r\n         if (isUpdate) {\r\n            url = `${env().API_HOST + baseUrl}update/${pk}`\r\n            method = 'PUT'\r\n         }\r\n         const requestOptions = {\r\n            method,\r\n            //    headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data),\r\n         }\r\n         try {\r\n            const response = await fetch(url, requestOptions)\r\n\r\n            setResp(response)\r\n         } catch (error) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(error)\r\n         }\r\n      }\r\n   }\r\n   //  TO DO: implement form level validation\r\n   const validate = () => {\r\n      return true\r\n   }\r\n\r\n   return (\r\n      <Paper elevation={0}>\r\n         <form onSubmit={handleSubmit}>\r\n            {metaFields.map((item, index) => (\r\n               <div key={item.name}>\r\n                  {item.readOnly ? (\r\n                     <Paper variant=\"outlined\">\r\n                        <span>{`${item.name} : ${item.value}`}</span>\r\n                     </Paper>\r\n                  ) : (\r\n                     <SwitchTextField\r\n                        label={item.label}\r\n                        type={item.inputType}\r\n                        fullWidth={true}\r\n                        value={item.value}\r\n                        required={item.required}\r\n                        onChange={handleChange}\r\n                        id={index.toString()}\r\n                        name={item.name}\r\n                        InputLabelProps={{\r\n                           shrink: item.inputShrink,\r\n                        }}\r\n                     />\r\n                  )}\r\n               </div>\r\n            ))}\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n               submit\r\n            </Button>\r\n\r\n            <Card>\r\n               <CardContent>\r\n                  <Typography color=\"textPrimary\" gutterBottom>\r\n                     Data sent:\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" component=\"p\" gutterBottom className={classes.wordwrap}>\r\n                     {newData}\r\n                  </Typography>\r\n                  <Typography color=\"textPrimary\" gutterBottom>\r\n                     Response:\r\n                  </Typography>\r\n                  <Typography>{`Status Text: ${resp.statusText}`}</Typography>\r\n                  <Typography>{`URL: ${resp.url}`}</Typography>\r\n               </CardContent>\r\n            </Card>\r\n         </form>\r\n      </Paper>\r\n   )\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport { AppBar, Box, createStyles, Grid, makeStyles, Paper, Tab, Tabs, Theme } from '@material-ui/core'\r\nimport { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport env from '../Login/Env'\r\nimport { RestForm, RestViewGrid } from '../RestFormGrid/RestFormGrid'\r\n\r\nconst cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\nconst RestCrud = () => {\r\n   const [value, setValue] = React.useState(0)\r\n\r\n   const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n      setValue(newValue)\r\n   }\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         root: {\r\n            padding: '2px',\r\n         },\r\n         form: {\r\n            marginBottom: theme.spacing(2),\r\n            marginRight: theme.spacing(1),\r\n            marginLeft: 5,\r\n            minWidth: '215px',\r\n         },\r\n         data: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n\r\n            color: theme.palette.text.secondary,\r\n         },\r\n         dataPaper: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n            background: theme.palette.background.default,\r\n         },\r\n      })\r\n   )\r\n   const classes = useStyles()\r\n\r\n   interface TabPanelProps {\r\n      children?: React.ReactNode\r\n      index: any\r\n      value: any\r\n   }\r\n\r\n   function TabPanel(props: TabPanelProps) {\r\n      const { children, index, ...other } = props\r\n\r\n      return (\r\n         <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}>\r\n            {value === index && <Box>{children}</Box>}\r\n         </div>\r\n      )\r\n   }\r\n\r\n   function a11yProps(index: any) {\r\n      return {\r\n         id: `simple-tab-${index}`,\r\n         'aria-controls': `simple-tabpanel-${index}`,\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className={classes.root}>\r\n         <AppBar position=\"static\">\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n               <Tab label=\"Demo\" {...a11yProps(0)} />\r\n               <Tab label=\"Instalation\" {...a11yProps(1)} />\r\n               <Tab label=\"Usage\" {...a11yProps(2)} />\r\n            </Tabs>\r\n         </AppBar>\r\n         <TabPanel value={value} index={0}>\r\n            <Grid container spacing={1}>\r\n               <Grid item xs={7} sm={5} md={4} lg={2} className={classes.form}>\r\n                  <RestForm url={`${env().API_HOST}/api/`} />\r\n               </Grid>\r\n               <Grid item xs={12} sm={6} md={7} lg={9} className={classes.data}>\r\n                  <Paper className={classes.dataPaper}>\r\n                     <RestViewGrid url={`${env().API_HOST}/api/`} density=\"compact\" autoHeight pageSize={10} />\r\n                  </Paper>\r\n               </Grid>\r\n            </Grid>\r\n         </TabPanel>\r\n         <TabPanel value={value} index={1}>\r\n            To Do: Instalations instructions\r\n         </TabPanel>\r\n         <TabPanel value={value} index={2}>\r\n            To Do: Usage notes\r\n         </TabPanel>\r\n      </div>\r\n   )\r\n}\r\nexport default RestCrud\r\n","import { createStyles, Divider, Grid, Link, makeStyles, Paper, Theme, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n   createStyles({\r\n      linkdesc: {\r\n         minWidth: 300,\r\n         maxWidth: 500,\r\n      },\r\n      linkHeading: {\r\n         maxWidth: 600,\r\n         paddingBottom: 3,\r\n      },\r\n      linkLabel: {\r\n         color: theme.palette.info.contrastText,\r\n         fontStyle: 'italic',\r\n         fontWeight: 'bolder',\r\n         width: 150,\r\n      },\r\n   })\r\n)\r\n\r\nconst AboutUs = () => {\r\n   const classes = useStyles()\r\n   type TlinkData = {\r\n      typeHeading: string\r\n      link: string\r\n      linkLabel: string\r\n      description: string\r\n   }\r\n\r\n   const linkData: TlinkData[] = [\r\n      {\r\n         typeHeading: 'Editor. Sart out with a great one. FREE',\r\n         link: 'https://code.visualstudio.com/',\r\n         linkLabel: 'VSCode',\r\n         description:\r\n            'Visual Studio Code is a powerful source code editor. It is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript, Node.js, GitHub...',\r\n      },\r\n      {\r\n         typeHeading: 'Remote Host.  Free to Cheap',\r\n         link: 'https://www.pythonanywhere.com/',\r\n         linkLabel: 'pythonanywhere',\r\n         description:\r\n            'Super easy and cheap hosting built for django. MySQL is included for free. Plans start at free and go up in a flexible way from there. Downgrade to free any time you want.  Postgres is available at extra cost.',\r\n      },\r\n      {\r\n         typeHeading: 'Domain Name Registration. about $12 per year',\r\n         link: 'https://www.namecheap.com/',\r\n         linkLabel: 'namecheap',\r\n         description: 'Absolutely not needed if you use pythonanywhere. This is kinda like buying vanity plates.',\r\n      },\r\n      {\r\n         typeHeading: 'Source control. Fundamental to software devlopment. FREE',\r\n         link: 'https://github.com/',\r\n         linkLabel: 'GitHub',\r\n         description:\r\n            'More than source control, GitHub is a social media destination and rich eco-system. It is easy and free to get started and well supported by VSCode.',\r\n      },\r\n      {\r\n         typeHeading: 'Django (shang-gow the \"D\" is silent)  Open Source, FREE',\r\n         link: 'https://www.djangoproject.com/',\r\n         linkLabel: 'Django',\r\n         description:\r\n            'A high-level backend (or server side) Python Web framework that does the heavy lifting required to access databases and other server resources.',\r\n      },\r\n      {\r\n         typeHeading: 'Django REST framework. Free',\r\n         link: 'https://www.django-rest-framework.org/',\r\n         linkLabel: 'Rest framework',\r\n         description: 'The Rest framework is build on top of django and adds some really good sugar.',\r\n      },\r\n\r\n      {\r\n         typeHeading: 'TypeScript a newer (and better) way to create JavaScript. Free',\r\n         link: 'https://www.typescriptlang.org/',\r\n         linkLabel: 'TypeScript',\r\n         description:\r\n            'This is what all the cool kids are using. At the end of the day you cannot do anyhting with TypeScript that you cannot do with JavaScript. The difference is that with TypeScript you can see all your syntactical mistakes in your editor (VSCode or other) as soon as you make them instead of much later when you bump into them at runtime.',\r\n      },\r\n      {\r\n         typeHeading: 'React. A JavaScript (or TypeScript) library for building user interfaces. Free',\r\n         link: 'https://reactjs.org/',\r\n         linkLabel: 'React',\r\n         description:\r\n            'Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. This is a serious upgrade to AngularJS.',\r\n      },\r\n\r\n      {\r\n         typeHeading: 'Material-ui  Free (until it is not)',\r\n         link: 'https://material-ui.com/',\r\n         linkLabel: 'material-ui',\r\n         description: 'Well documented React component library. Great support for TypeScript.',\r\n      },\r\n   ]\r\n\r\n   return (\r\n      <Paper\r\n         elevation={0}\r\n         style={{ maxWidth: 725, paddingLeft: 10, paddingRight: 10, paddingTop: 20, paddingBottom: 45 }}>\r\n         <Typography align=\"justify\" style={{ paddingBottom: 10, paddingLeft: 30, paddingRight: 10 }}>\r\n            This guide to REST and REACT is intended for the somewhat serious amature or career changer. Part of the fun\r\n            is devloping a great technology stack. Think of the following as a reasonable starting point on your quest\r\n            for Nirvana.\r\n         </Typography>\r\n         <Divider />\r\n         <Grid container direction=\"column\" spacing={2}>\r\n            {linkData.map((link) => (\r\n               <Grid item>\r\n                  <Paper elevation={0} className={classes.linkHeading}>\r\n                     <Typography>{link.typeHeading}</Typography>\r\n                  </Paper>\r\n                  <Grid container direction=\"row\" spacing={3}>\r\n                     <Grid item xs={4} sm={3} md={3} lg={3} xl={1}>\r\n                        <Typography className={classes.linkLabel}>\r\n                           <Link href={link.link} color=\"inherit\">\r\n                              {link.linkLabel}\r\n                           </Link>\r\n                        </Typography>\r\n                     </Grid>\r\n                     <Grid item xs={8} sm={9} md={9} lg={9} xl={11}>\r\n                        <Paper elevation={0} className={classes.linkdesc}>\r\n                           <Typography>{link.description}</Typography>\r\n                        </Paper>\r\n                        <Divider />\r\n                     </Grid>\r\n                  </Grid>\r\n               </Grid>\r\n            ))}\r\n         </Grid>\r\n      </Paper>\r\n   )\r\n}\r\nexport default AboutUs\r\n","import { Paper, withWidth, WithWidth } from '@material-ui/core'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport Hidden from '@material-ui/core/Hidden'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport { createStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4'\r\nimport BrightnessHighIcon from '@material-ui/icons/BrightnessHigh'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport React from 'react'\r\nimport { createMyTheme, makeMyStyles } from '../../Themes/createMyTheme'\r\nimport BoxBuilder from '../BoxBuilder/BoxBuilder'\r\nimport env from '../Login/Env'\r\nimport RandomValues from '../RandomNames/RandomNames'\r\nimport RestCrud from '../RestCrud/RestCrud'\r\nimport AboutUs from './AboutUs'\r\n\r\nconst drawerWidth = 150\r\n\r\nconst ResponsiveDrawer = (props: WithWidth) => {\r\n   const { width } = props\r\n\r\n   const [brigtness, setBrightness] = React.useState('dark')\r\n   const appliedTheme = createMyTheme(brigtness)\r\n   const myStyles = makeMyStyles(appliedTheme, drawerWidth)\r\n   const useStyles = makeStyles(() => createStyles(myStyles))\r\n   const classes = useStyles()\r\n   const [mobileOpen, setMobileOpen] = React.useState(false)\r\n   const [showing, setShowing] = React.useState('About Us')\r\n\r\n   document.body.style.backgroundColor = appliedTheme.palette.background.paper\r\n\r\n   const handleDrawerToggle = () => {\r\n      setMobileOpen(!mobileOpen)\r\n   }\r\n\r\n   const handleThemeToggle = (event: any, newValue: string) => {\r\n      setBrightness(newValue)\r\n   }\r\n\r\n   const handleListItemClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, index: string) => {\r\n      setShowing(index)\r\n      setMobileOpen(false)\r\n   }\r\n\r\n   const drawer = (\r\n      <div>\r\n         <Divider />\r\n         <List>\r\n            {['About Us', 'RestGrid', 'Random', 'BoxBuilder'].map((text) => (\r\n               <ListItem onClick={(event) => handleListItemClick(event, text)} button key={text}>\r\n                  <ListItemText primary={text} />\r\n               </ListItem>\r\n            ))}\r\n         </List>\r\n      </div>\r\n   )\r\n\r\n   return (\r\n      <ThemeProvider theme={appliedTheme}>\r\n         <Paper elevation={0} className={classes.root}>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n               <Toolbar>\r\n                  <IconButton\r\n                     color=\"inherit\"\r\n                     aria-label=\"open drawer\"\r\n                     edge=\"start\"\r\n                     onClick={handleDrawerToggle}\r\n                     className={classes.menuButton}>\r\n                     <MenuIcon />\r\n                  </IconButton>\r\n                  {brigtness === 'light' ? (\r\n                     <IconButton\r\n                        className={classes.brightness}\r\n                        color=\"inherit\"\r\n                        aria-label=\"Dark Theme\"\r\n                        edge=\"start\"\r\n                        onClick={(event) => handleThemeToggle(event, 'dark')}>\r\n                        <Brightness4Icon />\r\n                     </IconButton>\r\n                  ) : null}\r\n                  {brigtness === 'dark' ? (\r\n                     <IconButton\r\n                        className={classes.brightness}\r\n                        color=\"inherit\"\r\n                        aria-label=\"Light Theme\"\r\n                        edge=\"start\"\r\n                        onClick={(event) => handleThemeToggle(event, 'light')}>\r\n                        <BrightnessHighIcon />\r\n                     </IconButton>\r\n                  ) : null}\r\n                  <Typography variant=\"h6\" noWrap>\r\n                     Rest-React\r\n                  </Typography>\r\n               </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n               <Hidden mdUp implementation=\"css\">\r\n                  <Drawer\r\n                     variant=\"temporary\"\r\n                     anchor={appliedTheme.direction === 'rtl' ? 'right' : 'left'}\r\n                     disableAutoFocus\r\n                     open={mobileOpen}\r\n                     onClose={handleDrawerToggle}\r\n                     classes={{\r\n                        paper: classes.drawerPaper,\r\n                     }}\r\n                     ModalProps={{\r\n                        keepMounted: true, // Better open performance on mobile.\r\n                     }}>\r\n                     {drawer}\r\n                  </Drawer>\r\n               </Hidden>\r\n               <Hidden smDown implementation=\"css\">\r\n                  <Drawer\r\n                     classes={{\r\n                        paper: classes.drawerPaper,\r\n                     }}\r\n                     variant=\"permanent\"\r\n                     open>\r\n                     {drawer}\r\n                  </Drawer>\r\n               </Hidden>\r\n            </nav>\r\n         </Paper>\r\n         <div className={classes.appBar}>\r\n            <div className={classes.toolbar} />\r\n\r\n            {showing === 'About Us' ? <AboutUs /> : null}\r\n            {showing === 'RestGrid' ? <RestCrud /> : null}\r\n            {showing === 'Random' ? <RandomValues url={`${env().API_HOST}/api/`} /> : null}\r\n            {showing === 'BoxBuilder' ? <BoxBuilder /> : null}\r\n         </div>\r\n         <Divider />\r\n         <div className={classes.appBar2}>\r\n            <Typography align=\"justify\">{width}</Typography>\r\n         </div>\r\n      </ThemeProvider>\r\n   )\r\n}\r\nexport default withWidth()(ResponsiveDrawer)\r\n","/* eslint-disable no-shadow */\r\nimport { teal } from '@material-ui/core/colors'\r\nimport { createMuiTheme, createStyles, Theme, ThemeOptions } from '@material-ui/core/styles'\r\n// eslint-disable-next-line no-unused-vars\r\nimport createPalette from '@material-ui/core/styles/createPalette'\r\n// eslint-disable-next-line no-unused-vars\r\n// import * as createPalette from '@material-ui/core/styles/createPalette'\r\n\r\ndeclare module '@material-ui/core/styles/createPalette' {\r\n   interface Palette {\r\n      myBackgound?: Palette['primary']\r\n      myDataGrid?: Palette['secondary']\r\n   }\r\n   export interface PaletteOptions {\r\n      myBackgound?: PaletteOptions['primary']\r\n      myDataGrid?: PaletteOptions['secondary']\r\n   }\r\n}\r\n\r\nexport const createMyTheme = (brigtness: string) => {\r\n   const darkThemeCfg: ThemeOptions = {\r\n      palette: {\r\n         type: 'dark',\r\n         background: {\r\n            paper: '#424242',\r\n            default: '#212121',\r\n         },\r\n         info: {\r\n            dark: '#212121',\r\n            main: '#212121',\r\n            light: '#616161',\r\n            contrastText: '#FFF59D',\r\n         },\r\n      },\r\n   }\r\n\r\n   const lightThemeCfg: ThemeOptions = {\r\n      palette: {\r\n         type: 'light',\r\n         primary: teal,\r\n         info: {\r\n            dark: '#4DB6AC',\r\n            main: '#80CBC4',\r\n            light: '#B2DFDB',\r\n            contrastText: '#004D40',\r\n         },\r\n         background: {\r\n            default: '#b2dfdb',\r\n            paper: '#e0f2f1',\r\n         },\r\n      },\r\n   }\r\n\r\n   const options = brigtness === 'light' ? lightThemeCfg : darkThemeCfg\r\n   return createMuiTheme({\r\n      ...options,\r\n   })\r\n}\r\n\r\nexport const makeMyStyles = (theme: Theme, drawerWidth: number) => {\r\n   return createStyles({\r\n      root: {\r\n         display: 'flex',\r\n      },\r\n      drawer: {\r\n         [theme.breakpoints.up('md')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n         },\r\n      },\r\n      appBar: {\r\n         [theme.breakpoints.up('md')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n         },\r\n      },\r\n\r\n      appBar2: {\r\n         position: 'fixed',\r\n         bottom: '0',\r\n         height: '30px',\r\n         paddingLeft: theme.spacing(2),\r\n         background: '#36363a',\r\n         width: '100%',\r\n         [theme.breakpoints.up('md')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n         },\r\n      },\r\n      menuButton: {\r\n         marginRight: theme.spacing(2),\r\n         [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n         },\r\n      },\r\n      brightness: {\r\n         marginRight: theme.spacing(2),\r\n         position: 'absolute',\r\n         right: 0,\r\n      },\r\n      // necessary for content to be below app bar\r\n      toolbar: theme.mixins.toolbar,\r\n\r\n      drawerPaper: {\r\n         width: drawerWidth,\r\n         background: theme.palette.background.default,\r\n      },\r\n      main: {\r\n         background: '#424242',\r\n      },\r\n      content: {\r\n         flexGrow: 1,\r\n         padding: theme.spacing(3),\r\n      },\r\n   })\r\n}\r\n","import { Paper } from '@material-ui/core'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App2'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <Paper>\r\n         <App />\r\n      </Paper>\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}