{"version":3,"sources":["Components/Login/Env.tsx","Components/Login/getCsrfToken.tsx","Components/Login/Login.tsx","Components/Themes/defaultThemeProvider.tsx","Components/Controls/SwitchTextField.tsx","Components/App/RestFormGrid.tsx","Components/App/useToken.tsx","Components/App/App.tsx","index.tsx"],"names":["env","d","API_HOST","getCsrfToken","a","undefined","_csrfToken","sessionStorage","getItem","fetch","credentials","response","json","data","csrfToken","setItem","loginUser","method","userpass","JSON","stringify","headers","body","key","Login","setToken","useState","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","token","className","onSubmit","value","type","onChange","target","process","defaultValue","REACT_APP_NOT_SECRET_CODE","theme","createMuiTheme","palette","primary","main","secondary","DefaultThemeProvider","props","children","implementedInputTypes","NumberFormatCustomFixed2","inputRef","other","getInputRef","decimalScale","fixedDecimalScale","thousandSeparator","isNumericString","NumberFormatCustomFloat","SwitchTextField","inputComponent","label","includes","Paper","elevation","FormControlLabel","control","Checkbox","onClick","color","checked","variant","TextField","InputProps","Grid","justify","RestMeta","url","getRows","then","catch","err","console","error","r","getColumns","getMetaFields","metaFields","_cols","map","f","field","name","headerName","colType","metaData","meta","actions","POST","fields","prop","detail","fieldDef","modelType","inputType","inputShrink","required","readOnly","read_only","width","push","this","RestViewGrid","emptyCols","cols","setCols","rows","setRows","useEffect","c","style","height","columns","useStyles","makeStyles","createStyles","root","border","borderStyle","borderRadius","padding","background","margin","spacing","marginLeft","marginRight","marginBottom","paddingLeft","paddingRight","paddingTop","paddingBottom","wordwrap","overflowWrap","card","RestForm","emptyMeta","setMetaFields","newData","setNewData","ok","statusText","resp","setResp","classes","handleChange","event","id","index","parseInt","prev","item","i","stripFormat","filter","stripped","replaceAll","parseFloat","validate","reduce","acc","cur","requestOptions","direction","container","xs","fullWidth","toString","InputLabelProps","shrink","Button","Card","CardContent","Typography","gutterBottom","component","useToken","tokenString","parse","getToken","userToken","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1c98306.chunk.js","sourcesContent":["const env = () => {\r\n   const d = { API_HOST: 'http://dbhausen.pythonanywhere.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://dbhausen.pythonanywhere.com'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","import env from './Env'\r\n\r\nconst getCsrfToken = async () => {\r\n   let _csrfToken = sessionStorage.getItem('csrf_token')\r\n   if (_csrfToken === undefined || _csrfToken === null) {\r\n      const response = await fetch(`${env().API_HOST}/csrf/`, {\r\n         credentials: 'include',\r\n      })\r\n      const data = await response.json()\r\n      _csrfToken = data.csrfToken\r\n   }\r\n\r\n   if (_csrfToken === null) {\r\n      _csrfToken = 'NO_TOKEN'\r\n   } else {\r\n      sessionStorage.setItem('csrf_token', _csrfToken)\r\n   }\r\n\r\n   return _csrfToken\r\n}\r\nexport default getCsrfToken\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react'\r\nimport env from './Env'\r\nimport getCsrfToken from './getCsrfToken'\r\nimport './Login.css'\r\n\r\ninterface ICredentials {\r\n   email: string\r\n   password: string\r\n}\r\n\r\ntype ThttpMethod = 'POST' | 'GET' | 'OPTIONS'\r\n\r\nconst loginUser = async (method: ThttpMethod, userpass: ICredentials) => {\r\n   const response = await fetch(`${env().API_HOST}/api/v1/users/auth/login/`, {\r\n      method,\r\n      headers: method === 'POST' ? { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() } : {},\r\n      credentials: 'include',\r\n      body: JSON.stringify(userpass),\r\n   })\r\n   const data = await response.json()\r\n   // needed to do some validation here to see if login was success\r\n   // handle errors\r\n   return data.key\r\n}\r\n\r\nconst Login = ({ setToken }: any) => {\r\n   const [email, setEmail] = useState('d@dd.com')\r\n   const [password, setPassword] = useState('postman!!01')\r\n\r\n   const handleSubmit = async (e: { preventDefault: () => void }) => {\r\n      e.preventDefault()\r\n      const token = await loginUser('POST', { email, password })\r\n      setToken(token)\r\n   }\r\n\r\n   return (\r\n      <div className=\"login-wrapper\">\r\n         <h1>Please Log In</h1>\r\n         <form onSubmit={handleSubmit}>\r\n            <label>\r\n               <p>Username</p>\r\n               <input value={email} type=\"text\" onChange={(e) => setEmail(e.target.value)} />\r\n            </label>\r\n            <label>\r\n               <p>Password</p>\r\n               <input value={password} type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <div>\r\n               <button type=\"submit\">Submit</button>\r\n            </div>\r\n         </form>\r\n         <div>\r\n            <small>\r\n               You are running this application in <b>{process.env.NODE_ENV}</b> mode.\r\n            </small>\r\n            <form>\r\n               <input type=\"hidden\" defaultValue={process.env.REACT_APP_NOT_SECRET_CODE} />\r\n            </form>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\nexport default Login\r\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst theme = createMuiTheme({\r\n   palette: {\r\n      primary: {\r\n         main: '#304ffe',\r\n      },\r\n      secondary: {\r\n         main: '#009688',\r\n      },\r\n   },\r\n})\r\n\r\nconst DefaultThemeProvider = (props: any) => {\r\n   return <MuiThemeProvider theme={theme}>{props.children}</MuiThemeProvider>\r\n}\r\n\r\nexport default DefaultThemeProvider\r\n","import { Checkbox, FormControlLabel, Grid, Paper, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst varient = 'standard'\r\n\r\n// number input type is being used for integers only\r\n// checkbox is used for boolean datatype\r\nconst implementedInputTypes = ['decimal', 'float', 'number', 'dateTime-local', 'date', 'email', 'checkbox', 'text']\r\n\r\nfunction NumberFormatCustomFixed2(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return (\r\n      <NumberFormat\r\n         {...other}\r\n         getInputRef={inputRef}\r\n         onChange={onChange}\r\n         decimalScale={2}\r\n         fixedDecimalScale\r\n         thousandSeparator\r\n         isNumericString\r\n      />\r\n   )\r\n}\r\n\r\nfunction NumberFormatCustomFloat(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return <NumberFormat {...other} getInputRef={inputRef} onChange={onChange} isNumericString />\r\n}\r\n\r\ninterface IProps {\r\n   fullWidth: boolean\r\n   label: string\r\n   value: any\r\n   required: boolean\r\n   onChange: any\r\n   name: string\r\n   id: string\r\n   type: string\r\n   InputLabelProps: any\r\n}\r\n\r\nconst SwitchTextField = (props: IProps) => {\r\n   const { type, value, label } = props\r\n   if (!implementedInputTypes.includes(type)) {\r\n      return (\r\n         <Grid justify=\"center\">\r\n            <Paper variant=\"outlined\">type {type} is not implemented</Paper>\r\n         </Grid>\r\n      )\r\n   }\r\n\r\n   // inputComponent undefined is ok\r\n   let inputComponent\r\n   if (type === 'decimal') {\r\n      inputComponent = NumberFormatCustomFixed2\r\n   } else if (type === 'float') {\r\n      inputComponent = NumberFormatCustomFloat\r\n   }\r\n\r\n   if (type === 'checkbox') {\r\n      return (\r\n         <Paper elevation={3}>\r\n            <FormControlLabel\r\n               control={<Checkbox {...props} onClick={props.onChange} color=\"primary\" checked={value} />}\r\n               label={label}\r\n            />\r\n         </Paper>\r\n      )\r\n   }\r\n   return (\r\n      <Paper elevation={3} variant=\"elevation\">\r\n         <TextField\r\n            {...props}\r\n            variant={varient}\r\n            InputProps={{\r\n               inputComponent,\r\n            }}\r\n         />\r\n      </Paper>\r\n   )\r\n}\r\nexport default SwitchTextField\r\n","/* eslint-disable no-console */\r\n/* eslint-disable react/require-default-props */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { Button, Card, CardContent, createStyles, Grid, makeStyles, Paper, Theme, Typography } from '@material-ui/core'\r\nimport { ColDef, Columns, DataGrid, RowsProp } from '@material-ui/data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SwitchTextField from '../Controls/SwitchTextField'\r\nimport env from '../Login/Env'\r\nimport getCsrfToken from '../Login/getCsrfToken'\r\n\r\ntype TField = {\r\n   name: string\r\n   modelType: string\r\n   inputType: string\r\n   inputShrink: boolean\r\n   colType: string\r\n   required: boolean\r\n   readOnly: boolean\r\n   label: string\r\n   width: number\r\n   value: any\r\n}\r\n\r\nclass RestMeta {\r\n   url: string\r\n\r\n   constructor(url: string) {\r\n      this.url = url\r\n   }\r\n\r\n   getRows = async (): Promise<RowsProp> => {\r\n      const r: RowsProp = await fetch(this.url, { method: 'GET' })\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            const rows: RowsProp = data\r\n\r\n            return rows\r\n         })\r\n         .catch((err) => {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`no database >>> ${err}`)\r\n            throw err\r\n         })\r\n      return r\r\n   }\r\n\r\n   getColumns = async (): Promise<Columns> => {\r\n      const metaFields: TField[] = await this.getMetaFields()\r\n      const _cols: Columns = metaFields.map((f) => {\r\n         const col: ColDef = {\r\n            field: f.name,\r\n            headerName: f.label,\r\n            type: f.colType,\r\n         }\r\n         return col\r\n      })\r\n      return _cols\r\n   }\r\n\r\n   getMetaFields = async (): Promise<TField[]> => {\r\n      const f: TField[] = await fetch(this.url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            const meta = metaData.actions.POST\r\n            const fields: TField[] = []\r\n            for (const prop in meta) {\r\n               const detail = meta[prop]\r\n               const fieldDef: TField = {\r\n                  name: prop,\r\n                  modelType: detail.type,\r\n                  inputType: detail.type,\r\n                  inputShrink: true,\r\n                  colType: 'string',\r\n                  required: detail.required,\r\n                  readOnly: detail.read_only,\r\n                  label: detail.label,\r\n                  width: 150,\r\n                  value: '',\r\n               }\r\n               switch (detail.type) {\r\n                  case 'integer':\r\n                     fieldDef.inputType = 'number'\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'decimal':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'float':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'boolean':\r\n                     fieldDef.inputType = 'checkbox'\r\n                     fieldDef.value = false\r\n                     break\r\n                  case 'datetime':\r\n                     fieldDef.inputType = 'dateTime-local'\r\n                     fieldDef.colType = 'dateTime'\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'date':\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'string':\r\n                     fieldDef.inputType = 'text'\r\n                     break\r\n                  case 'email':\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  case 'file upload':\r\n                     fieldDef.width = 300\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  default:\r\n                     break\r\n               }\r\n\r\n               fields.push(fieldDef)\r\n            }\r\n            return fields\r\n         })\r\n      return f\r\n   }\r\n}\r\n\r\ninterface IRVProps {\r\n   url: string\r\n   cols?: Columns\r\n}\r\n//  TO DO: Add other optional parameters\r\n//  TO DO: set \"error\" parameter ie. <DataGrid> error </DataGrid> if error\r\n//  TO DO: note what's here does not work shows no row instead of error\r\nexport const RestViewGrid = (props: IRVProps): any => {\r\n   const emptyCols: Columns = []\r\n   const emptyRows: RowsProp = []\r\n   const [cols, setCols] = useState(emptyCols)\r\n   const [rows, setRows] = useState(emptyRows)\r\n   const meta = new RestMeta(props.url)\r\n\r\n   useEffect(() => {\r\n      if (cols === emptyCols) {\r\n         if (props.cols) {\r\n            setCols(props.cols)\r\n         } else {\r\n            meta\r\n               .getColumns()\r\n               .then((c) => {\r\n                  setCols(c)\r\n               })\r\n               .catch((err) => {\r\n                  console.error(err)\r\n               })\r\n         }\r\n         meta\r\n            .getRows()\r\n            .then((r) => {\r\n               setRows(r)\r\n            })\r\n            .catch((err) => {\r\n               console.error(err)\r\n            })\r\n      }\r\n   }, [])\r\n\r\n   return (\r\n      <div>\r\n         <div style={{ height: 400, width: '100%' }}>\r\n            <DataGrid rows={rows} columns={cols} />\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n   createStyles({\r\n      root: {\r\n         border: '1px',\r\n         borderStyle: 'solid',\r\n         borderRadius: '4px',\r\n         padding: '10px',\r\n         background: '#90A4AE',\r\n         '& .MuiOutlinedInput-root': {\r\n            margin: theme.spacing(0.8),\r\n         },\r\n         '& .MuiPaper-root': {\r\n            marginLeft: theme.spacing(0.8),\r\n            marginRight: theme.spacing(0.8),\r\n            marginBottom: theme.spacing(0.8),\r\n            paddingLeft: '12px',\r\n            paddingRight: '10px',\r\n            paddingTop: '4px',\r\n            paddingBottom: '4px',\r\n\r\n            // width: '100%',\r\n         },\r\n      },\r\n      wordwrap: {\r\n         overflowWrap: 'anywhere',\r\n         width: '100%',\r\n         color: 'red',\r\n      },\r\n      card: {\r\n         color: 'red',\r\n      },\r\n   })\r\n)\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nexport const RestForm = (props: IProps) => {\r\n   const emptyMeta: TField[] = []\r\n   const emptyRep = { ok: false, statusText: '', url: '' }\r\n   const [metaFields, setMetaFields] = useState<TField[]>(emptyMeta)\r\n   const [newData, setNewData] = useState('')\r\n   const [resp, setResp] = useState(emptyRep)\r\n   const meta = new RestMeta(props.url)\r\n   const classes = useStyles()\r\n\r\n   useEffect(() => {\r\n      if (metaFields === emptyMeta) {\r\n         meta\r\n            .getMetaFields()\r\n            .then((c) => {\r\n               setMetaFields(c)\r\n            })\r\n            .catch(() => {})\r\n      }\r\n   })\r\n\r\n   const handleChange = (event: any) => {\r\n      // event.preventDefault()\r\n      // event.persist()\r\n      let { value } = event.target\r\n      const { type, id, checked } = event.target\r\n      const index = parseInt(id, 10)\r\n      // eslint-disable-next-line no-console\r\n      // console.log(type)\r\n\r\n      setMetaFields((prev) => {\r\n         // return untouched all the items that don't match index\r\n         return prev.map((item, i) => {\r\n            if (i !== index) {\r\n               return item\r\n            }\r\n            // for the one item that does match the index\r\n            // do any special handling of event.target.value\r\n            if (type === 'checkbox') {\r\n               value = checked\r\n            }\r\n\r\n            // update the matching item and return result to setMetaFields\r\n            return {\r\n               ...item,\r\n               value,\r\n            }\r\n         })\r\n      })\r\n   }\r\n\r\n   const handleSubmit = async (event: any) => {\r\n      event.preventDefault()\r\n\r\n      const stripFormat = metaFields\r\n         .filter((field) => !field.readOnly)\r\n         .map((field) => {\r\n            const stripped = {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n            if (field.inputType === 'decimal') {\r\n               stripped.value = stripped.value.replaceAll(',', '')\r\n               stripped.value = stripped.value.replaceAll('$', '')\r\n               stripped.value = stripped.value.replaceAll(' ', '')\r\n               stripped.value = parseFloat(stripped.value)\r\n            }\r\n            if (field.inputType === 'number') {\r\n               stripped.value = parseInt(stripped.value, 10)\r\n            }\r\n            if (stripped.value === '') {\r\n               stripped.value = null\r\n            }\r\n\r\n            return stripped\r\n         })\r\n\r\n      const isValid = validate()\r\n      if (isValid) {\r\n         const data = stripFormat.reduce((acc, cur) => ({ ...acc, [cur.name]: cur.value }), {})\r\n         setNewData(JSON.stringify(data))\r\n\r\n         const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n            body: JSON.stringify(data),\r\n         }\r\n\r\n         const response = await fetch(`${env().API_HOST}/api/`, requestOptions)\r\n\r\n         setResp({\r\n            ok: response.ok,\r\n            statusText: response.statusText,\r\n            url: response.url,\r\n         })\r\n      }\r\n   }\r\n   //  TO DO: implement form level validation\r\n   const validate = () => {\r\n      return true\r\n   }\r\n\r\n   return (\r\n      <Grid direction=\"column\" container spacing={4} className={classes.root}>\r\n         <form onSubmit={handleSubmit}>\r\n            {metaFields.map((item, index) => (\r\n               <div key={item.name}>\r\n                  {item.readOnly ? (\r\n                     <Grid item xs={12}>\r\n                        <Paper variant=\"outlined\">\r\n                           <span>{`${item.name} : ${item.value}`}</span>\r\n                        </Paper>\r\n                     </Grid>\r\n                  ) : (\r\n                     <Grid item xs={12}>\r\n                        <SwitchTextField\r\n                           label={item.label}\r\n                           type={item.inputType}\r\n                           fullWidth={true}\r\n                           value={item.value}\r\n                           required={item.required}\r\n                           onChange={handleChange}\r\n                           id={index.toString()}\r\n                           name={item.name}\r\n                           InputLabelProps={{\r\n                              shrink: item.inputShrink,\r\n                           }}\r\n                        />\r\n                     </Grid>\r\n                  )}\r\n               </div>\r\n            ))}\r\n            <Grid item xs={12}>\r\n               <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                  submit\r\n               </Button>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n               <Card className={classes.card}>\r\n                  <CardContent>\r\n                     <Typography color=\"textPrimary\" gutterBottom>\r\n                        Data sent:\r\n                     </Typography>\r\n                     <Typography variant=\"body2\" component=\"p\" className={classes.wordwrap}>\r\n                        {newData}\r\n                     </Typography>\r\n                     <Typography color=\"textPrimary\" gutterBottom>\r\n                        Response:\r\n                     </Typography>\r\n                     <Typography variant=\"body2\" component=\"div\">\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Ok:\r\n                           </Grid>\r\n                           <Grid>{resp.ok.toString()}</Grid>\r\n                        </Grid>\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Status Text:\r\n                           </Grid>\r\n                           <Grid>{resp.statusText}</Grid>\r\n                        </Grid>\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Url:\r\n                           </Grid>\r\n                           <Grid>{resp.url}</Grid>\r\n                        </Grid>\r\n                     </Typography>\r\n                  </CardContent>\r\n               </Card>\r\n            </Grid>\r\n         </form>\r\n      </Grid>\r\n   )\r\n}\r\n","import { useState } from 'react'\r\n\r\n// use 'localStorage' to persist between sessions\r\nconst useToken = () => {\r\n   const getToken = () => {\r\n      const tokenString = sessionStorage.getItem('token')\r\n      if (tokenString === null) {\r\n         return undefined\r\n      }\r\n      return JSON.parse(tokenString)\r\n   }\r\n   const [token, setToken] = useState(getToken())\r\n\r\n   const saveToken = (userToken: { token: string }) => {\r\n      sessionStorage.setItem('token', JSON.stringify(userToken))\r\n      setToken(userToken)\r\n   }\r\n   return {\r\n      setToken: saveToken,\r\n      token,\r\n   }\r\n}\r\nexport default useToken\r\n","import { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport env from '../Login/Env'\r\nimport Login from '../Login/Login'\r\nimport DefaultThemeProvider from '../Themes/defaultThemeProvider'\r\nimport './App.css'\r\nimport { RestForm, RestViewGrid } from './RestFormGrid'\r\nimport useToken from './useToken'\r\n\r\nfunction App() {\r\n   const { token, setToken } = useToken()\r\n\r\n   if (!token) {\r\n      return <Login setToken={setToken} />\r\n   }\r\n   const cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\n   return (\r\n      <DefaultThemeProvider>\r\n         <div className=\"wrapper\">\r\n            <h1>Application</h1>\r\n            <BrowserRouter>\r\n               <Switch>\r\n                  <Route path=\"/rest_grid\">\r\n                     <div>\r\n                        <div>\r\n                           <RestViewGrid url={`${env().API_HOST}/api/`} cols={cols} />\r\n                        </div>\r\n                        <div>\r\n                           <RestViewGrid url={`${env().API_HOST}/api/`} />\r\n                        </div>\r\n                     </div>\r\n                  </Route>\r\n                  <Route path=\"/rest_form\">\r\n                     <RestForm url={`${env().API_HOST}/api/`} />\r\n                  </Route>\r\n               </Switch>\r\n            </BrowserRouter>\r\n         </div>\r\n      </DefaultThemeProvider>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}