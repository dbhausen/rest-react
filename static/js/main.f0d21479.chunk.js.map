{"version":3,"sources":["Components/Dashboard/Dashboard.tsx","Components/Login/Env.tsx","Components/Login/getCsrfToken.tsx","Components/Login/Login.tsx","Components/App/RestViewGrid.tsx","Components/App/useToken.tsx","Components/App/App.tsx","index.tsx"],"names":["Dashboard","env","d","API_HOST","getCsrfToken","a","undefined","_csrfToken","sessionStorage","getItem","fetch","credentials","response","json","data","csrfToken","setItem","loginUser","method","userpass","JSON","stringify","headers","body","key","Login","setToken","useState","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","token","className","onSubmit","value","type","onChange","target","process","defaultValue","REACT_APP_NOT_SECRET_CODE","RestViewGrid","props","emptyCols","hello","setHello","goodby","setGoodby","cols","setCols","rows","setRows","useEffect","getCols","url","then","c","getRows","r","getCrsfToken","style","height","width","columns","catch","err","console","error","metaData","log","name","prop","actions","POST","detail","colDef","field","label","headerName","push","useToken","tokenString","parse","getToken","userToken","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0d21479.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Dashboard() {\r\n   return <h2>Dashboard</h2>\r\n}\r\n","const env = () => {\r\n   const d = { API_HOST: 'http://dbhausen.pythonanywhere.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://dbhausen.pythonanywhere.com'\r\n      // d.API_HOST = 'http://localhost:8000'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","import env from './Env'\r\n\r\nconst getCsrfToken = async () => {\r\n   let _csrfToken = sessionStorage.getItem('csrf_token')\r\n   if (_csrfToken === undefined || _csrfToken === null) {\r\n      const response = await fetch(`${env().API_HOST}/csrf/`, {\r\n         credentials: 'include',\r\n      })\r\n      const data = await response.json()\r\n      _csrfToken = data.csrfToken\r\n   }\r\n\r\n   if (_csrfToken === null) {\r\n      _csrfToken = 'NO_TOKEN'\r\n   } else {\r\n      sessionStorage.setItem('csrf_token', _csrfToken)\r\n   }\r\n\r\n   return _csrfToken\r\n}\r\nexport default getCsrfToken\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react'\r\nimport env from './Env'\r\nimport getCsrfToken from './getCsrfToken'\r\nimport './Login.css'\r\n\r\ninterface ICredentials {\r\n   email: string\r\n   password: string\r\n}\r\n\r\ntype ThttpMethod = 'POST' | 'GET' | 'OPTIONS'\r\n\r\nconst loginUser = async (method: ThttpMethod, userpass: ICredentials) => {\r\n   const response = await fetch(`${env().API_HOST}/api/v1/users/auth/login/`, {\r\n      method,\r\n      headers: method === 'POST' ? { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() } : {},\r\n      credentials: 'include',\r\n      body: JSON.stringify(userpass),\r\n   })\r\n   const data = await response.json()\r\n   // needed to do some validation here to see if login was success\r\n   // handle errors\r\n   return data.key\r\n}\r\n\r\nconst Login = ({ setToken }: any) => {\r\n   const [email, setEmail] = useState('d@dd.com')\r\n   const [password, setPassword] = useState('postman!!01')\r\n\r\n   const handleSubmit = async (e: { preventDefault: () => void }) => {\r\n      e.preventDefault()\r\n      const token = await loginUser('POST', { email, password })\r\n      setToken(token)\r\n   }\r\n\r\n   return (\r\n      <div className=\"login-wrapper\">\r\n         <h1>Please Log In</h1>\r\n         <form onSubmit={handleSubmit}>\r\n            <label>\r\n               <p>Username</p>\r\n               <input value={email} type=\"text\" onChange={(e) => setEmail(e.target.value)} />\r\n            </label>\r\n            <label>\r\n               <p>Password</p>\r\n               <input value={password} type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <div>\r\n               <button type=\"submit\">Submit</button>\r\n            </div>\r\n         </form>\r\n         <div>\r\n            <small>\r\n               You are running this application in <b>{process.env.NODE_ENV}</b> mode.\r\n            </small>\r\n            <form>\r\n               <input type=\"hidden\" defaultValue={process.env.REACT_APP_NOT_SECRET_CODE} />\r\n            </form>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\nexport default Login\r\n","/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable no-console */\r\n/* eslint-disable no-unused-vars */\r\nimport { ColDef, Columns, DataGrid, RowsProp } from '@material-ui/data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport getCrsfToken from '../Login/getCsrfToken'\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nconst RestViewGrid = (props: IProps): any => {\r\n   const emptyCols: Columns = []\r\n   const emptyRows: RowsProp = []\r\n   const [hello, setHello] = useState('')\r\n   const [goodby, setGoodby] = useState('')\r\n   const [cols, setCols] = useState(emptyCols)\r\n   const [rows, setRows] = useState(emptyRows)\r\n\r\n   useEffect(() => {\r\n      if (cols === emptyCols) {\r\n         getCols(props.url).then((c) => setCols(c))\r\n         getRows(props.url).then((r) => setRows(r))\r\n      }\r\n   }, [])\r\n\r\n   getCrsfToken().then((token) => setHello(token))\r\n   getCrsfToken().then((token) => setGoodby(token))\r\n\r\n   return (\r\n      <div>\r\n         <p>{hello}</p>\r\n         <div>{goodby}</div>\r\n         <div style={{ height: 400, width: '100%' }}>\r\n            <DataGrid rows={rows} columns={cols} />\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\nexport default RestViewGrid\r\n\r\nconst getRows = async (url: string): Promise<RowsProp> => {\r\n   const r: RowsProp = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: RowsProp = data\r\n         return data\r\n      })\r\n      .catch((err) => {\r\n         console.error(`no database >>> ${err}`)\r\n         const rows: RowsProp = []\r\n         return rows\r\n      })\r\n   return r\r\n}\r\n\r\nconst getCols = async (url: string): Promise<Columns> => {\r\n   const c: Columns = await fetch(url, { method: 'OPTIONS' })\r\n      .then((response) => response.json())\r\n      .then((metaData) => {\r\n         console.log(metaData.name)\r\n         const cols: ColDef[] = []\r\n         // eslint-disable-next-line guard-for-in\r\n         for (const prop in metaData.actions.POST) {\r\n            const detail = metaData.actions.POST[prop]\r\n\r\n            const colDef: ColDef = {\r\n               field: prop /* , type: detail.type */,\r\n            }\r\n            if (detail.label) {\r\n               colDef.headerName = detail.label\r\n            }\r\n\r\n            switch (detail.type) {\r\n               case 'integer':\r\n                  colDef.type = 'number'\r\n                  break\r\n               case 'decimal':\r\n                  colDef.type = 'number'\r\n                  break\r\n               case 'float':\r\n                  colDef.type = 'number'\r\n                  break\r\n               case 'datetime':\r\n                  colDef.type = 'dateTime'\r\n                  colDef.width = 300\r\n                  break\r\n               case 'date':\r\n                  colDef.type = 'date'\r\n                  colDef.width = 125\r\n                  break\r\n               case 'email':\r\n                  colDef.type = 'email'\r\n                  colDef.width = 135\r\n                  break\r\n               default:\r\n                  colDef.type = 'string'\r\n                  break\r\n            }\r\n\r\n            cols.push(colDef)\r\n         }\r\n         return cols\r\n      })\r\n      .catch((err) => {\r\n         console.error(`no database >>> ${err}`)\r\n         const cols: ColDef[] = []\r\n         return cols\r\n      })\r\n   return c\r\n}\r\n","import { useState } from 'react'\r\n\r\n// use 'localStorage' to persist between sessions\r\nconst useToken = () => {\r\n   const getToken = () => {\r\n      const tokenString = sessionStorage.getItem('token')\r\n      if (tokenString === null) {\r\n         return undefined\r\n      }\r\n      return JSON.parse(tokenString)\r\n   }\r\n   const [token, setToken] = useState(getToken())\r\n\r\n   const saveToken = (userToken: { token: string }) => {\r\n      sessionStorage.setItem('token', JSON.stringify(userToken))\r\n      setToken(userToken)\r\n   }\r\n   return {\r\n      setToken: saveToken,\r\n      token,\r\n   }\r\n}\r\nexport default useToken\r\n","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport Dashboard from '../Dashboard/Dashboard'\r\nimport env from '../Login/Env'\r\nimport Login from '../Login/Login'\r\nimport './App.css'\r\nimport RestViewGrid from './RestViewGrid'\r\nimport useToken from './useToken'\r\n\r\nfunction App() {\r\n   const { token, setToken } = useToken()\r\n\r\n   if (!token) {\r\n      return <Login setToken={setToken} />\r\n   }\r\n   return (\r\n      <div className=\"wrapper\">\r\n         <h1>Application</h1>\r\n         <BrowserRouter>\r\n            <Switch>\r\n               <Route path=\"/t\">\r\n                  <RestViewGrid url={`${env().API_HOST}/api/`} />\r\n               </Route>\r\n               <Route path=\"/dashboard\">\r\n                  <Dashboard />\r\n               </Route>\r\n            </Switch>\r\n         </BrowserRouter>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}