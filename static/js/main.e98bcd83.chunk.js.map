{"version":3,"sources":["Components/Dashboard/Dashboard.tsx","Components/Login/Env.tsx","Components/Login/getCsrfToken.tsx","Components/Login/Login.tsx","Components/App/ListViewGrid.tsx","Components/Preferences/Preferences.tsx","Components/App/App.tsx","Components/App/useToken.tsx","index.tsx"],"names":["Dashboard","env","d","API_HOST","getCsrfToken","a","undefined","_csrfToken","sessionStorage","getItem","fetch","credentials","response","json","data","csrfToken","setItem","loginUser","method","userpass","JSON","stringify","headers","body","key","Login","setToken","useState","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","token","className","onSubmit","value","type","onChange","target","process","defaultValue","REACT_APP_NOT_SECRET_CODE","ListViewGrid","props","url","cols","refreshishidden","console","log","setCols","getCols","state","rows","handleRefresh","bind","then","setState","catch","err","error","id","name","metaData","actions","POST","postData","keys","Object","values","index","length","col","field","push","prop","detail","colDef","label","headerName","width","this","Button","hidden","onClick","style","height","columns","Component","Preferences","App","tokenString","parse","getToken","userToken","useToken","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e98bcd83.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Dashboard() {\r\n   return <h2>Dashboard</h2>\r\n}\r\n","const env = () => {\r\n   const d = { API_HOST: 'http://dbhausen.pythonanywhere.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://dbhausen.pythonanywhere.com'\r\n      // d.API_HOST = 'http://localhost:8000'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","import env from './Env'\r\n\r\nconst getCsrfToken = async () => {\r\n   let _csrfToken = sessionStorage.getItem('csrf_token')\r\n   if (_csrfToken === undefined || _csrfToken === null) {\r\n      const response = await fetch(`${env().API_HOST}/csrf/`, {\r\n         credentials: 'include',\r\n      })\r\n      const data = await response.json()\r\n      _csrfToken = data.csrfToken\r\n   }\r\n\r\n   if (_csrfToken === null) {\r\n      _csrfToken = 'NO_TOKEN'\r\n   } else {\r\n      sessionStorage.setItem('csrf_token', _csrfToken)\r\n   }\r\n\r\n   return _csrfToken\r\n}\r\nexport default getCsrfToken\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react'\r\nimport env from './Env'\r\nimport getCsrfToken from './getCsrfToken'\r\nimport './Login.css'\r\n\r\ninterface ICredentials {\r\n   email: string\r\n   password: string\r\n}\r\n\r\ntype ThttpMethod = 'POST' | 'GET' | 'OPTIONS'\r\n\r\nasync function loginUser(method: ThttpMethod, userpass: ICredentials) {\r\n   const response = await fetch(`${env().API_HOST}/api/v1/users/auth/login/`, {\r\n      method,\r\n      headers: method === 'POST' ? { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() } : {},\r\n      credentials: 'include',\r\n      body: JSON.stringify(userpass),\r\n   })\r\n   const data = await response.json()\r\n   // needed to do some validation here to see if login was success\r\n   // handle errors\r\n   return data.key\r\n}\r\n\r\nexport default function Login({ setToken }: any) {\r\n   const [email, setEmail] = useState<string>('d@dd.com')\r\n   const [password, setPassword] = useState<string>('postman!!01')\r\n\r\n   const handleSubmit = async (e: { preventDefault: () => void }) => {\r\n      e.preventDefault()\r\n      const token = await loginUser('POST', { email, password })\r\n      setToken(token)\r\n   }\r\n\r\n   return (\r\n      <div className=\"login-wrapper\">\r\n         <h1>Please Log In</h1>\r\n         <form onSubmit={handleSubmit}>\r\n            <label>\r\n               <p>Username</p>\r\n               <input value={email} type=\"text\" onChange={(e) => setEmail(e.target.value)} />\r\n            </label>\r\n            <label>\r\n               <p>Password</p>\r\n               <input value={password} type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <div>\r\n               <button type=\"submit\">Submit</button>\r\n            </div>\r\n         </form>\r\n         <div>\r\n            <small>\r\n               You are running this application in <b>{process.env.NODE_ENV}</b> mode.\r\n            </small>\r\n            <form>\r\n               <input type=\"hidden\" defaultValue={process.env.REACT_APP_NOT_SECRET_CODE} />\r\n            </form>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n","/* eslint-disable no-console */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { Button } from '@material-ui/core'\r\nimport { ColDef, Columns, DataGrid, RowsProp } from '@material-ui/data-grid'\r\nimport React, { Component } from 'react'\r\n\r\ninterface IProps {\r\n   url: string\r\n   cols?: Columns\r\n}\r\ninterface IState {\r\n   rows: RowsProp\r\n}\r\nexport default class ListViewGrid extends Component<IProps, IState> {\r\n   url: string\r\n\r\n   cols: Columns = []\r\n\r\n   refreshishidden = false\r\n\r\n   constructor(props: IProps) {\r\n      super(props)\r\n      console.log(props.url)\r\n\r\n      this.url = props.url\r\n\r\n      if (props.cols !== undefined) {\r\n         this.cols = props.cols\r\n      } else {\r\n         this.setCols(this.url)\r\n         // this.cols = this.getCols(this.url)\r\n      }\r\n\r\n      this.cols = this.getCols(this.url)\r\n\r\n      this.state = {\r\n         rows: [],\r\n      }\r\n      this.handleRefresh = this.handleRefresh.bind(this)\r\n      this.setCols = this.setCols.bind(this)\r\n   }\r\n\r\n   handleRefresh(url: string): void {\r\n      fetch(url, { method: 'GET' })\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            const rows: RowsProp = data\r\n            this.setState({\r\n               rows,\r\n            })\r\n         })\r\n         .catch((err) => {\r\n            const errRow = [{ id: 999, name: 'No Database' }]\r\n            console.error(`no database >>> ${err}`)\r\n            this.setState({\r\n               rows: errRow,\r\n            })\r\n         })\r\n   }\r\n\r\n   // eslint-disable-next-line class-methods-use-this\r\n   getCols(url: string) {\r\n      const cols: Columns = []\r\n      fetch(url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            console.log(metaData.name)\r\n            console.log(metaData.actions.POST)\r\n            const postData = metaData.actions.POST\r\n            const keys = Object.keys(postData)\r\n            const values = Object.values(postData)\r\n            for (let index = 0; index < keys.length; index += 1) {\r\n               console.log(keys[index])\r\n               console.log(values[index])\r\n               console.log(values[index])\r\n\r\n               const col: ColDef = {\r\n                  field: keys[index] /* , type: detail.type */,\r\n               }\r\n               cols.push(col)\r\n            }\r\n         })\r\n\r\n      return cols\r\n   }\r\n\r\n   setCols(url: string): void {\r\n      fetch(url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            console.log(metaData.name)\r\n            const cols: ColDef[] = []\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const prop in metaData.actions.POST) {\r\n               const detail = metaData.actions.POST[prop]\r\n\r\n               const colDef: ColDef = {\r\n                  field: prop /* , type: detail.type */,\r\n               }\r\n               if (detail.label) {\r\n                  colDef.headerName = detail.label\r\n               }\r\n\r\n               switch (detail.type) {\r\n                  case 'integer':\r\n                     colDef.type = 'number'\r\n                     break\r\n                  case 'decimal':\r\n                     colDef.type = 'number'\r\n                     break\r\n                  case 'float':\r\n                     colDef.type = 'number'\r\n                     break\r\n                  case 'datetime':\r\n                     colDef.type = 'dateTime'\r\n                     colDef.width = 300\r\n                     break\r\n                  case 'date':\r\n                     colDef.type = 'date'\r\n                     colDef.width = 125\r\n                     break\r\n                  case 'email':\r\n                     colDef.type = 'email'\r\n                     colDef.width = 135\r\n                     break\r\n                  default:\r\n                     colDef.type = 'string'\r\n                     break\r\n               }\r\n\r\n               cols.push(colDef)\r\n            }\r\n            this.cols = cols\r\n         })\r\n         .catch((err) => {\r\n            console.error(`no database >>> ${err}`)\r\n         })\r\n   }\r\n\r\n   render() {\r\n      console.log(this.state.rows)\r\n      console.log(this.cols)\r\n      return (\r\n         <div>\r\n            <div>\r\n               <Button hidden={this.refreshishidden} onClick={() => this.handleRefresh(this.url)}>\r\n                  Get Departments\r\n               </Button>\r\n            </div>\r\n            <div style={{ height: 400, width: '100%' }}>\r\n               <DataGrid rows={this.state.rows} columns={this.cols} />\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n","import React from 'react'\r\nimport ListViewGrid from '../App/ListViewGrid'\r\nimport env from '../Login/Env'\r\n\r\nexport default function Preferences() {\r\n   return (\r\n      <div>\r\n         <div>{`${env().API_HOST}/api/`}</div>\r\n         <ListViewGrid url={`${env().API_HOST}/api/`} />\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport Dashboard from '../Dashboard/Dashboard'\r\nimport Login from '../Login/Login'\r\nimport Preferences from '../Preferences/Preferences'\r\nimport './App.css'\r\nimport useToken from './useToken'\r\n\r\nfunction App() {\r\n   const { token, setToken } = useToken()\r\n\r\n   if (!token) {\r\n      return <Login setToken={setToken} />\r\n   }\r\n   return (\r\n      <div className=\"wrapper\">\r\n         <h1>Application</h1>\r\n         <BrowserRouter>\r\n            <Switch>\r\n               <Route path=\"/dashboard\">\r\n                  <Dashboard />\r\n               </Route>\r\n               <Route path=\"/preferences\">\r\n                  <Preferences />\r\n               </Route>\r\n            </Switch>\r\n         </BrowserRouter>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import { useState } from 'react'\r\n\r\n// use 'localStorage' to persist between sessions\r\nexport default function useToken() {\r\n   const getToken = () => {\r\n      const tokenString = sessionStorage.getItem('token')\r\n      if (tokenString === null) {\r\n         return undefined\r\n      }\r\n\r\n      // eslint-disable-next-line no-console\r\n      console.log(tokenString)\r\n      // eslint-disable-next-line no-console\r\n      console.log(JSON.parse(tokenString))\r\n      return JSON.parse(tokenString)\r\n   }\r\n   const [token, setToken] = useState(getToken())\r\n\r\n   const saveToken = (userToken: { token: string }) => {\r\n      sessionStorage.setItem('token', JSON.stringify(userToken))\r\n      setToken(userToken)\r\n   }\r\n   return {\r\n      setToken: saveToken,\r\n      token,\r\n   }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}