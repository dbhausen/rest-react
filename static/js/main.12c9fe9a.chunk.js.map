{"version":3,"sources":["Components/BoxBuilder/BoxBuilder.tsx","Components/Login/Env.tsx","Components/RandomNames/RandomNames.tsx","Components/Controls/SwitchTextField.tsx","Components/RestFormGrid/RestFormGrid.tsx","Components/RestCrud/RestCrud.tsx","Components/App/App2.tsx","Themes/createMyTheme.tsx","index.tsx"],"names":["lorem","LoremIpsum","sentencesPerParagraph","max","min","wordsPerSentence","withWidth","props","sizeItems","width","useState","height","setHeight","boxWidth","setWidth","color","setColor","value","setValue","boxList","addBox","xs","setXs","sm","setSm","md","setMd","lg","setLg","xl","setXl","direction","setDirection","justify","setJustify","alignContent","setAlignContent","alignItems","setAlignItems","spacing","setSpacing","handleSizeChange","event","newSize","target","name","getSizePx","size","toString","concat","classes","makeStyles","theme","createStyles","root","padding","form","marginBottom","marginRight","minWidth","data","minHeight","palette","text","secondary","dataPaper","background","hint","formControl","margin","sizeControl","alignControl","mockCode","overflow","backgroundColor","info","main","contrastText","selectEmpty","marginTop","useStyles","AppBar","position","Tabs","onChange","newValue","aria-label","Tab","label","FormGroup","Grid","container","item","TextField","type","id","e","parseInt","variant","fullWidth","InputLabelProps","shrink","FormControl","className","InputLabel","Select","labelId","MenuItem","Button","onClick","newBox","prev","map","Paper","Typography","Box","bgcolor","style","textAlign","index","m","p","generateWords","env","d","API_HOST","g","genderNames","_cols","field","hide","_rows","givenName","middleInitial","surName","gender","ss","age","hireDate","Date","RandomNames","firstNamelist","setFirstNamelist","lastNameList","setLastNameList","loading","setLoading","rows","setRows","rowCount","setRowCount","outputAs","setOutputAs","maxAge","setMaxAge","minAge","setMinAge","inclusiveGender","setInclusiveGender","typeMap","Map","set","cols","setCols","menubox","paddingTop","paddingLeft","maxWidth","display","justifyContent","marginLeft","box","hiddenbutton","csv","overflowY","showbutton","purple","useEffect","a","getFirstnames","url","fnl","getLastnames","lnl","calculate","fetchNames","console","log","_rowCount","getRandomInt","Math","floor","random","randNormal","u","v","num","sqrt","cos","PI","_r","ssGenerator","minFirstRange","minLastRange","String","fromCharCode","dayjs","daysOnJob","subtract","firstName","find","element","maxRange","lastName","genderName","genderIndex","length","push","next","toDate","handleSwitchChange","c","col","currentTarget","checked","_newCols","getVisibleColNames","visableColNames","forEach","jsonToCsv","headers","result","row","values","header","JSON","stringify","join","FormControlLabel","control","Switch","Tooltip","title","placement","filter","get","component","endIcon","copy","elevation","density","pageSize","disableColumnSelector","autoHeight","columns","wordWrap","wordBreak","maxHeight","shortRows","shortRow","jsonToShortJson","whiteSpace","uniqueRandNumberArray","r","indexOf","i","SS","substr","fetch","method","then","response","json","catch","err","error","implementedInputTypes","NumberFormatCustomFixed2","inputRef","other","getInputRef","decimalScale","fixedDecimalScale","thousandSeparator","isNumericString","NumberFormatCustomFloat","SwitchTextField","inputComponent","includes","Checkbox","InputProps","baseUrl","meta","hook","metaFields","handleRowSelected","newFields","updataField","getRows","getColumns","getMetaFields","f","headerName","colType","metaData","actions","POST","fields","prop","detail","fieldDef","modelType","inputType","inputShrink","required","readOnly","read_only","this","RestViewGrid","emptyCols","setUrl","onRowSelected","RestForm","wordwrap","overflowWrap","emptyMeta","setMetaFields","newData","setNewData","ok","statusText","resp","setResp","setHook","handleChange","handleSubmit","preventDefault","stripReadOnly","pk","isUpdate","stripFormat","stripped","replaceAll","parseFloat","validate","reduce","acc","cur","requestOptions","body","onSubmit","Card","CardContent","gutterBottom","RestCrud","React","TabPanel","children","role","hidden","aria-labelledby","a11yProps","ResponsiveDrawer","drawerWidth","brigtness","setBrightness","appliedTheme","lightThemeCfg","primary","teal","dark","light","default","paper","myBackgound","myDataGrid","options","createMuiTheme","createMyTheme","myStyles","drawer","breakpoints","up","flexShrink","appBar","appBar2","bottom","menuButton","brightness","right","toolbar","mixins","drawerPaper","content","flexGrow","mobileOpen","setMobileOpen","showing","setShowing","document","handleDrawerToggle","handleThemeToggle","Divider","List","ListItem","button","ListItemText","ThemeProvider","Toolbar","IconButton","edge","noWrap","Hidden","mdUp","implementation","Drawer","anchor","disableAutoFocus","open","onClose","ModalProps","keepMounted","smDown","align","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12c9fe9a.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport {\r\n   AppBar,\r\n   Box,\r\n   Button,\r\n   createStyles,\r\n   FormControl,\r\n   FormGroup,\r\n   Grid,\r\n   GridContentAlignment,\r\n   GridDirection,\r\n   GridItemsAlignment,\r\n   GridJustification,\r\n   GridSize,\r\n   GridSpacing,\r\n   InputLabel,\r\n   makeStyles,\r\n   MenuItem,\r\n   Paper,\r\n   Select,\r\n   Tab,\r\n   Tabs,\r\n   TextField,\r\n   Theme,\r\n   Typography,\r\n   withWidth,\r\n   WithWidth,\r\n} from '@material-ui/core'\r\nimport { LoremIpsum } from 'lorem-ipsum'\r\nimport React, { useState } from 'react'\r\n\r\nconst lorem = new LoremIpsum({\r\n   sentencesPerParagraph: {\r\n      max: 8,\r\n      min: 4,\r\n   },\r\n   wordsPerSentence: {\r\n      max: 16,\r\n      min: 4,\r\n   },\r\n})\r\n\r\nconst BoxBuilder = (props: WithWidth) => {\r\n   type myBox = {\r\n      color: string\r\n      height: number\r\n      boxWidth: number\r\n   }\r\n\r\n   const sizeItems = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'auto', 'true']\r\n   const spacingItems = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n   const justifyItems = ['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']\r\n   const alignContentItems = ['stretch', 'flex-start', 'center', 'flex-end', 'space-around', 'space-between']\r\n   const alignItemsItems = ['stretch', 'flex-start', 'center', 'flex-end', 'baseline']\r\n\r\n   const { width } = props\r\n\r\n   const [height, setHeight] = useState(75)\r\n   const [boxWidth, setWidth] = useState(200)\r\n   const [color, setColor] = useState('red')\r\n   const [value, setValue] = useState(0)\r\n   const [boxList, addBox] = useState<myBox[]>()\r\n   const [xs, setXs] = useState<GridSize>(12)\r\n   const [sm, setSm] = useState<GridSize>(6)\r\n   const [md, setMd] = useState<GridSize>(4)\r\n   const [lg, setLg] = useState<GridSize>(3)\r\n   const [xl, setXl] = useState<GridSize>(2)\r\n   const [direction, setDirection] = useState<GridDirection>('row')\r\n   const [justify, setJustify] = useState<GridJustification>('flex-start')\r\n   const [alignContent, setAlignContent] = useState<GridContentAlignment>('stretch')\r\n   const [alignItems, setAlignItems] = useState<GridItemsAlignment>('stretch')\r\n   const [spacing, setSpacing] = useState<GridSpacing>(1)\r\n\r\n   const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n      setValue(newValue)\r\n   }\r\n\r\n   const handleAlignItemsChange = (event: any) => {\r\n      const newValue = event.target.value as GridItemsAlignment\r\n      setAlignItems(newValue)\r\n   }\r\n\r\n   const handleAlignContentChange = (event: any) => {\r\n      const newValue = event.target.value as GridContentAlignment\r\n      setAlignContent(newValue)\r\n   }\r\n\r\n   const handleJustifyChange = (event: any) => {\r\n      setJustify(event.target.value as GridJustification)\r\n   }\r\n\r\n   const handleDirectionChange = (event: any) => {\r\n      setDirection(event.target.value as GridDirection)\r\n   }\r\n\r\n   const handleSpacingChange = (event: any) => {\r\n      setSpacing(event.target.value as GridSpacing)\r\n   }\r\n\r\n   const handleSizeChange = (event: any) => {\r\n      const newSize: GridSize = event.target.value\r\n\r\n      switch (event.target.name) {\r\n         case 'xs':\r\n            setXs(newSize)\r\n            break\r\n         case 'sm':\r\n            setSm(newSize)\r\n            break\r\n         case 'md':\r\n            setMd(newSize)\r\n            break\r\n         case 'lg':\r\n            setLg(newSize)\r\n            break\r\n         case 'xl':\r\n            setXl(newSize)\r\n            break\r\n\r\n         default:\r\n            break\r\n      }\r\n   }\r\n\r\n   const getSizePx = (size: number) => {\r\n      return size.toString().concat('px')\r\n   }\r\n\r\n   const handleHeightChange = (e: any) => {\r\n      setHeight(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const handleWidthChange = (e: any) => {\r\n      setWidth(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const handleColorChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n      setColor(event.target.value as string)\r\n   }\r\n\r\n   const handleSubmit = () => {\r\n      const newBox: myBox = { color, height, boxWidth }\r\n      addBox((prev) => {\r\n         if (prev) {\r\n            return prev.concat(newBox)\r\n         }\r\n         return [newBox]\r\n      })\r\n   }\r\n\r\n   const handleClear = () => {\r\n      addBox([])\r\n   }\r\n\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         root: {\r\n            padding: '0px',\r\n         },\r\n         form: {\r\n            marginBottom: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: '215px',\r\n         },\r\n         data: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n\r\n            color: theme.palette.text.secondary,\r\n         },\r\n         dataPaper: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n            background: theme.palette.text.hint,\r\n         },\r\n         formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n         },\r\n         sizeControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: '60px',\r\n         },\r\n         alignControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: '110px',\r\n         },\r\n         mockCode: {\r\n            overflow: 'auto',\r\n            backgroundColor: theme.palette.info.main,\r\n            color: theme.palette.info.contrastText,\r\n         },\r\n         selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n         },\r\n      })\r\n   )\r\n   const classes = useStyles()\r\n\r\n   return (\r\n      <div>\r\n         <AppBar position=\"static\">\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n               <Tab label=\"Demo\" />\r\n               <Tab label=\"Instalation\" />\r\n               <Tab label=\"Usage\" />\r\n            </Tabs>\r\n         </AppBar>\r\n         {value === 0 ? (\r\n            <div>\r\n               <FormGroup>\r\n                  <Grid container direction=\"column\">\r\n                     <Grid container direction=\"row\">\r\n                        <Grid item xs={2}>\r\n                           <TextField\r\n                              type=\"number\"\r\n                              id=\"height\"\r\n                              key=\"height\"\r\n                              label=\"Height\"\r\n                              value={height}\r\n                              onChange={handleHeightChange}\r\n                              variant=\"filled\"\r\n                              fullWidth={false}\r\n                              InputLabelProps={{ shrink: true }}\r\n                           />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                           <TextField\r\n                              type=\"number\"\r\n                              id=\"width\"\r\n                              key=\"width\"\r\n                              label=\"Width\"\r\n                              value={boxWidth}\r\n                              onChange={handleWidthChange}\r\n                              variant=\"filled\"\r\n                              fullWidth={false}\r\n                              InputLabelProps={{ shrink: true }}\r\n                           />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                           <FormControl className={classes.formControl}>\r\n                              <InputLabel id=\"demo-simple-select-label\">Color</InputLabel>\r\n                              <Select\r\n                                 labelId=\"demo-simple-select-label\"\r\n                                 id=\"demo-simple-select\"\r\n                                 value={color}\r\n                                 onChange={handleColorChange}>\r\n                                 <MenuItem value=\"red\">Red</MenuItem>\r\n                                 <MenuItem value=\"purple\">Purple</MenuItem>\r\n                                 <MenuItem value=\"green\">Green</MenuItem>\r\n                                 <MenuItem value=\"blue\">Blue</MenuItem>\r\n                              </Select>\r\n                           </FormControl>\r\n                        </Grid>\r\n                     </Grid>\r\n                     <Grid container direction=\"row\">\r\n                        <Button variant=\"contained\" size=\"small\" onClick={handleSubmit} color=\"primary\">\r\n                           Add Box\r\n                        </Button>\r\n                        <Button variant=\"contained\" size=\"small\" onClick={handleClear} color=\"secondary\">\r\n                           Clear\r\n                        </Button>\r\n                     </Grid>\r\n                  </Grid>\r\n               </FormGroup>\r\n               <Grid container justify=\"flex-start\" direction=\"row\">\r\n                  <Grid item xs={3}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel>Direction</InputLabel>\r\n                        <Select value={direction} onChange={handleDirectionChange}>\r\n                           <MenuItem value=\"row\">row</MenuItem>\r\n                           <MenuItem value=\"column\">column</MenuItem>\r\n                           <MenuItem value=\"row-reverse\">row-reverse</MenuItem>\r\n                           <MenuItem value=\"column-reverse\">column-reverse</MenuItem>\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>Spacing</InputLabel>\r\n                        <Select id=\"spacing\" name=\"spacing\" value={spacing} onChange={handleSpacingChange}>\r\n                           {spacingItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n               </Grid>\r\n               <Grid container justify=\"flex-start\" direction=\"row\">\r\n                  <Grid item xs={4}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel>justify</InputLabel>\r\n                        <Select value={justify} onChange={handleJustifyChange}>\r\n                           {justifyItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel>alignContent</InputLabel>\r\n                        <Select value={alignContent} onChange={handleAlignContentChange}>\r\n                           {alignContentItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                     <FormControl fullWidth className={classes.alignControl}>\r\n                        <InputLabel> AlignItems</InputLabel>\r\n                        <Select value={alignItems} onChange={handleAlignItemsChange}>\r\n                           {alignItemsItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n               </Grid>\r\n\r\n               <Grid container justify=\"flex-start\" direction=\"row\">\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>xs</InputLabel>\r\n                        <Select id=\"xs\" name=\"xs\" value={xs} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item sm={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>sm</InputLabel>\r\n                        <Select id=\"sm\" name=\"sm\" value={sm} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>md</InputLabel>\r\n                        <Select id=\"md\" name=\"md\" value={md} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>lg</InputLabel>\r\n                        <Select id=\"lg\" name=\"lg\" value={lg} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                     <FormControl className={classes.sizeControl}>\r\n                        <InputLabel>xl</InputLabel>\r\n                        <Select id=\"xl\" name=\"xl\" value={xl} onChange={handleSizeChange}>\r\n                           {sizeItems.map((item) => (\r\n                              <MenuItem value={item}>{item}</MenuItem>\r\n                           ))}\r\n                        </Select>\r\n                     </FormControl>\r\n                  </Grid>\r\n               </Grid>\r\n               <Paper className={classes.mockCode}>\r\n                  <Typography variant=\"subtitle1\">\r\n                     <pre>\r\n                        <code>\r\n                           <br />\r\n                           {`<Grid container direction=\"${direction}\" justify=\"${justify}\" alignContent=\"${alignContent}\" alignItems=\"${alignItems}\" spacing=\"${spacing}\">`}\r\n                           <br />\r\n                           {`    <Grid item xs={${xs}} sm={${sm}} md={${md}} lg={${lg}} xl={${xl}}> ...</Grid>`}\r\n                           <br />\r\n                           {`    ...`}\r\n                           <br />\r\n                           {`</Grid>`}\r\n                        </code>\r\n                     </pre>\r\n                  </Typography>\r\n               </Paper>\r\n               <Box bgcolor=\"blue\">\r\n                  <Typography style={{ textAlign: 'center' }} variant=\"subtitle1\">\r\n                     Current width: {width}\r\n                  </Typography>\r\n               </Box>\r\n\r\n               <Grid\r\n                  container\r\n                  direction={direction}\r\n                  justify={justify}\r\n                  alignContent={alignContent}\r\n                  spacing={spacing}\r\n                  alignItems={alignItems}>\r\n                  {boxList?.map((item, index) => (\r\n                     <Grid item xs={xs} sm={sm} md={md} lg={lg} key={index}>\r\n                        <Box\r\n                           style={{ minWidth: getSizePx(item.boxWidth) }}\r\n                           m={0}\r\n                           bgcolor={item.color}\r\n                           p={2}\r\n                           color=\"text.primary\">\r\n                           <Typography>\r\n                              Box ({index}) minWidth: {getSizePx(item.boxWidth)}{' '}\r\n                           </Typography>\r\n                           <Paper style={{ overflow: 'auto', height: getSizePx(item.height) }}>\r\n                              {lorem.generateWords(50)}\r\n                           </Paper>\r\n                        </Box>\r\n                     </Grid>\r\n                  ))}\r\n               </Grid>\r\n            </div>\r\n         ) : null}\r\n         {value === 1 ? <Typography>To Do: Instalation</Typography> : null}\r\n         {value === 2 ? <Typography>To Do: Usage</Typography> : null}\r\n      </div>\r\n   )\r\n}\r\nexport default withWidth()(BoxBuilder)\r\n","const env = () => {\r\n   const d = { API_HOST: 'http://dbhausen.pythonanywhere.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://dbhausen.pythonanywhere.com'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable no-console */\r\nimport {\r\n   Button,\r\n   createStyles,\r\n   FormControl,\r\n   FormControlLabel,\r\n   FormGroup,\r\n   Grid,\r\n   InputLabel,\r\n   makeStyles,\r\n   MenuItem,\r\n   Paper,\r\n   Select,\r\n   Switch,\r\n   TextField,\r\n   Theme,\r\n   Tooltip,\r\n   Typography,\r\n} from '@material-ui/core'\r\nimport { purple } from '@material-ui/core/colors'\r\nimport { Columns, DataGrid } from '@material-ui/data-grid'\r\nimport CreateSharpIcon from '@material-ui/icons/CreateSharp'\r\nimport copy from 'clipboard-copy'\r\nimport dayjs from 'dayjs'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst genderNames: string[] = [\r\n   'Not disclosed',\r\n   'Man',\r\n   'Woman',\r\n   'Transgender',\r\n   'Genderqueer',\r\n   'Agender',\r\n   'Genderless',\r\n   'Non-binary',\r\n   'Cis Man',\r\n   'Cis Woman',\r\n   'Trans Man',\r\n   'Trans Woman',\r\n   'Third Gender',\r\n   'Two-Spirit',\r\n   'Bigender',\r\n   'Genderfluid',\r\n   'Undecided',\r\n]\r\n\r\nconst _cols: Columns = [\r\n   //  { field: 'id' },\r\n   { field: 'givenName', hide: false },\r\n   { field: 'middleInitial', hide: false },\r\n   { field: 'surName', hide: false },\r\n   { field: 'gender', width: 150, hide: false },\r\n   { field: 'ss', width: 150, hide: false },\r\n   { field: 'age', type: 'number', width: 90, hide: false },\r\n   { field: 'hireDate', type: 'date', width: 250, hide: false },\r\n]\r\nconst _rows: TRow[] = [\r\n   //  { field: 'id' },\r\n   { id: 0, givenName: '', middleInitial: '', surName: '', gender: '', ss: '', age: 0, hireDate: new Date() },\r\n]\r\n\r\ntype TFirstName = {\r\n   givenName: string\r\n   gender: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TLastName = {\r\n   surName: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TRow = {\r\n   id: number\r\n   givenName: string\r\n   middleInitial: string\r\n   surName: string\r\n   gender: string\r\n   ss: string\r\n   age: number\r\n   hireDate: Date\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nconst RandomNames = (props: IProps) => {\r\n   const [firstNamelist, setFirstNamelist] = useState<TFirstName[]>()\r\n   const [lastNameList, setLastNameList] = useState<TLastName[]>()\r\n   const [loading, setLoading] = useState(true)\r\n   const [rows, setRows] = useState<TRow[]>(_rows)\r\n   const [rowCount, setRowCount] = useState(100)\r\n   const [outputAs, setOutputAs] = useState('DataGrid')\r\n   const [maxAge, setMaxAge] = useState<number>(65)\r\n   const [minAge, setMinAge] = useState<number>(20)\r\n   const [inclusiveGender, setInclusiveGender] = useState(true)\r\n   const typeMap = new Map()\r\n\r\n   typeMap.set('id', { type: 'number' })\r\n   typeMap.set('givenName', { type: 'string' })\r\n   typeMap.set('middleInitial', { type: 'string' })\r\n   typeMap.set('surName', { type: 'string' })\r\n   typeMap.set('gender', { type: 'string' })\r\n   typeMap.set('ss', { type: 'string' })\r\n   typeMap.set('age', { type: 'number' })\r\n   typeMap.set('hireDate', { type: 'Date' })\r\n\r\n   // eslint-disable-next-line no-unused-vars\r\n   const [cols, setCols] = useState<Columns>(_cols)\r\n   //   const uniqueRandNumberArray: number[] = []\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         menubox: {\r\n            height: '50px',\r\n            paddingTop: theme.spacing(3),\r\n            paddingLeft: theme.spacing(3),\r\n            maxWidth: '800px',\r\n            display: 'flex',\r\n            justifyContent: 'flex-start',\r\n            alignItems: 'flex-end',\r\n            '& .MuiSelect-selectMenu': {\r\n               minWidth: '80px',\r\n               marginLeft: '10px',\r\n            },\r\n         },\r\n         box: {\r\n            height: '30px',\r\n            maxWidth: '700px',\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            alignItems: 'flex-end',\r\n         },\r\n         hiddenbutton: {\r\n            display: 'none',\r\n         },\r\n         csv: {\r\n            overflowY: 'scroll',\r\n         },\r\n         showbutton: {\r\n            display: 'flex',\r\n         },\r\n         '.MuiDataGrid-root': {\r\n            color: purple[900],\r\n         },\r\n      })\r\n   )\r\n\r\n   const classes = useStyles()\r\n\r\n   useEffect(() => {\r\n      const fetchNames = async () => {\r\n         const fnl = await getFirstnames(`${props.url}firstname/`)\r\n         setFirstNamelist(fnl)\r\n         const lnl = await getLastnames(`${props.url}lastname/`)\r\n         setLastNameList(lnl)\r\n         calculate(rowCount, fnl, lnl)\r\n      }\r\n\r\n      fetchNames()\r\n\r\n      return () => {\r\n         console.log('to do: cleanup useEffect if needed')\r\n      }\r\n   }, [])\r\n\r\n   const callCalculate = () => {\r\n      if (rowCount && firstNamelist && lastNameList) {\r\n         calculate(rowCount, firstNamelist, lastNameList)\r\n      }\r\n   }\r\n\r\n   const calculate = (_rowCount: number, fnl: TFirstName[], lnl: TLastName[]) => {\r\n      setRows([])\r\n      setLoading(true)\r\n\r\n      const getRandomInt = (max: number): number => {\r\n         return Math.floor(Math.random() * Math.floor(max))\r\n      }\r\n\r\n      const randNormal = (min: number, max: number): number => {\r\n         let u = 0\r\n         let v = 0\r\n         while (u === 0) u = Math.random()\r\n         while (v === 0) v = Math.random()\r\n         let num = Math.sqrt(-8.0 * Math.log(u)) * Math.cos(8.0 * Math.PI * v)\r\n         num = num / 10.0 + 0.5 // Translate to 0 -> 1\r\n         if (num > 1 || num < 0) return randNormal(min, max) // resample between 0 and 1\r\n         return num * (max - min) + min\r\n      }\r\n\r\n      const _r: TRow[] = []\r\n      const ssGenerator: IterableIterator<string> = g(_rowCount)\r\n      for (let index = 0; index < _rowCount; index += 1) {\r\n         const minFirstRange = getRandomInt(192908123)\r\n         const minLastRange = getRandomInt(154575750)\r\n         const middleInitial = String.fromCharCode(getRandomInt(22) + 65)\r\n         const age = Math.floor(randNormal(minAge, maxAge))\r\n         let hireDate = dayjs()\r\n         const daysOnJob = getRandomInt(age - minAge) * 0.65 * 365 + getRandomInt(365)\r\n         hireDate = hireDate.subtract(Math.floor(daysOnJob), 'days')\r\n         const firstName = fnl.find((element) => element.maxRange >= minFirstRange)\r\n         const lastName = lnl.find((element) => element.maxRange >= minLastRange)\r\n         let genderName = firstName?.gender === 'Male' ? 'Male' : 'Female'\r\n         if (inclusiveGender) {\r\n            genderName = genderName === 'Male' ? 'Man' : 'Woman'\r\n         }\r\n         const genderIndex = getRandomInt(1600)\r\n         if (genderIndex < genderNames.length && inclusiveGender) {\r\n            genderName = genderNames[genderIndex]\r\n         }\r\n\r\n         _r.push({\r\n            id: index,\r\n            givenName: firstName?.givenName || '',\r\n            middleInitial,\r\n            surName: lastName?.surName || '',\r\n            gender: genderName,\r\n            ss: ssGenerator.next().value,\r\n            age,\r\n            hireDate: hireDate.toDate(),\r\n         })\r\n      }\r\n\r\n      setRows(_r)\r\n      setLoading(false)\r\n   }\r\n\r\n   const copyToClip = () => {\r\n      if (outputAs === 'JSON') {\r\n         copy(JSON.stringify(rows))\r\n      } else {\r\n         copy(jsonToCsv())\r\n      }\r\n   }\r\n\r\n   // eslint-disable-next-line no-unused-vars\r\n   const handleSwitchChange = (e: React.ChangeEvent<{ checked: boolean; name: string }>) => {\r\n      setCols((prev) => {\r\n         const c = prev.find((col) => col.field === e.currentTarget.name)\r\n         if (c) {\r\n            c.hide = !e.target.checked\r\n         }\r\n         const _newCols: Columns = [\r\n            //  { field: 'id' },\r\n            { field: 'givenName', hide: false },\r\n            { field: 'middleInitial', hide: false },\r\n            { field: 'surName', hide: false },\r\n            { field: 'gender', width: 150, hide: false },\r\n            { field: 'ss', width: 150, hide: false },\r\n            { field: 'age', type: 'number', width: 90, hide: false },\r\n            { field: 'hireDate', type: 'date', width: 250, hide: false },\r\n         ]\r\n\r\n         for (let index = 0; index < _newCols.length; index += 1) {\r\n            _newCols[index].hide = prev[index].hide\r\n         }\r\n\r\n         return _newCols\r\n      })\r\n   }\r\n\r\n   const handleInclusiveGenderChange = (e: any) => {\r\n      setInclusiveGender(e.target.checked)\r\n   }\r\n\r\n   const handleRowCountChange = (e: React.ChangeEvent<{ value: number }>) => {\r\n      setRowCount(e.target.value)\r\n      if (firstNamelist && lastNameList) {\r\n         calculate(e.target.value, firstNamelist, lastNameList)\r\n      }\r\n   }\r\n\r\n   const handleOutputAsChange = (e: React.ChangeEvent<{ value: string }>) => {\r\n      setOutputAs(e.target.value)\r\n   }\r\n\r\n   const handleMinAgeChange = (e: any) => {\r\n      setMinAge(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const handleMaxAgeChange = (e: any) => {\r\n      setMaxAge(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const getVisibleColNames = (): string[] => {\r\n      const visableColNames: string[] = []\r\n      cols.forEach((col) => {\r\n         if (!col.hide) {\r\n            visableColNames.push(col.field)\r\n         }\r\n      })\r\n      return visableColNames\r\n   }\r\n\r\n   const jsonToCsv = (): string => {\r\n      if (!rows) {\r\n         return ''\r\n      }\r\n      const headers = getVisibleColNames()\r\n      const replacer = (value: any) => {\r\n         return value === null ? '' : value\r\n      }\r\n      let result = ''\r\n      rows.forEach((row: { [index: string]: any }) => {\r\n         const values: any = []\r\n         headers.forEach((header) => {\r\n            values.push(JSON.stringify(replacer(row[header])))\r\n         })\r\n         result = result.concat(values.join(',').concat('\\n'))\r\n      })\r\n\r\n      return result\r\n   }\r\n\r\n   const jsonToShortJson = (): string => {\r\n      const headers = getVisibleColNames()\r\n\r\n      const shortRows: any[] = []\r\n\r\n      rows.forEach((row) => {\r\n         const shortRow: any = {}\r\n\r\n         headers.forEach((header) => {\r\n            switch (header) {\r\n               case 'id':\r\n                  shortRow.id = row.id\r\n                  break\r\n               case 'givenName':\r\n                  shortRow.givenName = row.givenName\r\n                  break\r\n               case 'surName':\r\n                  shortRow.surName = row.surName\r\n                  break\r\n               case 'middleInitial':\r\n                  shortRow.middleInitial = row.middleInitial\r\n                  break\r\n               case 'gender':\r\n                  shortRow.gender = row.gender\r\n                  break\r\n               case 'ss':\r\n                  shortRow.ss = row.ss\r\n                  break\r\n               case 'hireDate':\r\n                  shortRow.hireDate = row.hireDate\r\n                  break\r\n               case 'age':\r\n                  shortRow.age = row.age\r\n                  break\r\n               default:\r\n                  break\r\n            }\r\n         })\r\n         shortRows.push(shortRow)\r\n      })\r\n\r\n      return JSON.stringify(shortRows)\r\n   }\r\n\r\n   return (\r\n      <Paper style={{ padding: '8px' }}>\r\n         <Grid container direction=\"row\" spacing={3}>\r\n            <Grid item>\r\n               <FormGroup>\r\n                  {cols.map((col) => (\r\n                     <FormControlLabel\r\n                        control={\r\n                           <Switch\r\n                              size=\"small\"\r\n                              checked={!col.hide}\r\n                              onChange={handleSwitchChange}\r\n                              name={col.field}\r\n                              color=\"primary\"\r\n                           />\r\n                        }\r\n                        label={col.field}\r\n                     />\r\n                  ))}\r\n               </FormGroup>\r\n            </Grid>\r\n            <Grid item>\r\n               <Paper style={{ padding: '10px', margin: '10px' }}>\r\n                  <FormGroup>\r\n                     <FormControlLabel\r\n                        control={\r\n                           <Switch\r\n                              size=\"small\"\r\n                              onChange={handleInclusiveGenderChange}\r\n                              checked={inclusiveGender}\r\n                              value={inclusiveGender}\r\n                              color=\"primary\"\r\n                           />\r\n                        }\r\n                        label=\"Use inclusive gender roles\"\r\n                     />\r\n\r\n                     <TextField\r\n                        label=\"Maximum age\"\r\n                        onChange={handleMaxAgeChange}\r\n                        value={maxAge}\r\n                        type=\"number\"\r\n                        color=\"primary\"\r\n                     />\r\n\r\n                     <TextField\r\n                        label=\"Minimum age when hired\"\r\n                        onChange={handleMinAgeChange}\r\n                        value={minAge}\r\n                        type=\"number\"\r\n                        color=\"primary\"\r\n                     />\r\n\r\n                     <Tooltip title=\"Use preferences to generate a new set of employees\" placement=\"bottom-start\">\r\n                        <Button color=\"primary\" variant=\"contained\" onClick={() => callCalculate()}>\r\n                           Refresh\r\n                        </Button>\r\n                     </Tooltip>\r\n                  </FormGroup>\r\n               </Paper>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n               <Paper style={{ padding: '10px', margin: '10px' }}>\r\n                  <Typography>\r\n                     <pre>\r\n                        {'type TEmployee = {'}\r\n                        {cols\r\n                           .filter((col) => !col.hide)\r\n                           .map((col) => (\r\n                              <div>{`   ${col.field}: ${typeMap.get(col.field).type}`}</div>\r\n                           ))}\r\n                        {'}'}\r\n                     </pre>\r\n                  </Typography>\r\n               </Paper>\r\n            </Grid>\r\n         </Grid>\r\n\r\n         <Paper className={classes.menubox} component=\"span\">\r\n            <FormControl>\r\n               <InputLabel id=\"demo-simple-select-label\">Count</InputLabel>\r\n               <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={rowCount}\r\n                  onChange={handleRowCountChange}>\r\n                  <MenuItem value={100}>100</MenuItem>\r\n                  <MenuItem value={1000}>1,000</MenuItem>\r\n                  <MenuItem value={10000}>10,000</MenuItem>\r\n                  <MenuItem value={50000}>50,000</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n               <InputLabel id=\"demo-simple-select-label\">Output as</InputLabel>\r\n               <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={outputAs}\r\n                  onChange={handleOutputAsChange}>\r\n                  <MenuItem value=\"DataGrid\">Data Grid</MenuItem>\r\n                  <MenuItem value=\"JSON\">JSON</MenuItem>\r\n                  <MenuItem value=\"csv\">Comma Separated</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n            <Button\r\n               endIcon={<CreateSharpIcon />}\r\n               size=\"small\"\r\n               classes={outputAs === 'DataGrid' ? { root: classes.hiddenbutton } : { root: classes.showbutton }}\r\n               onClick={copyToClip}>\r\n               Copy to clipboard\r\n            </Button>\r\n         </Paper>\r\n\r\n         {outputAs === 'DataGrid' ? (\r\n            <Paper elevation={0} style={{ height: '400px', marginBottom: '20px', paddingLeft: '20px' }}>\r\n               <DataGrid\r\n                  density=\"compact\"\r\n                  loading={loading}\r\n                  pageSize={100}\r\n                  disableColumnSelector={true}\r\n                  autoHeight={false}\r\n                  rows={rows}\r\n                  columns={cols}\r\n               />\r\n            </Paper>\r\n         ) : outputAs === 'JSON' ? (\r\n            <Paper\r\n               id=\"json\"\r\n               elevation={9}\r\n               style={{\r\n                  wordWrap: 'break-word',\r\n                  wordBreak: 'break-all',\r\n                  overflow: 'auto',\r\n                  maxWidth: '700px',\r\n                  maxHeight: '400px',\r\n               }}>\r\n               {jsonToShortJson()}\r\n            </Paper>\r\n         ) : (\r\n            <Paper\r\n               id=\"json\"\r\n               elevation={9}\r\n               style={{ maxWidth: '700px', maxHeight: '400px', whiteSpace: 'break-spaces', overflow: 'auto' }}>\r\n               <pre>{jsonToCsv()}</pre>\r\n            </Paper>\r\n         )}\r\n      </Paper>\r\n   )\r\n}\r\nexport default RandomNames\r\n\r\nfunction* g(rowCount: number): IterableIterator<string> {\r\n   const uniqueRandNumberArray: number[] = []\r\n\r\n   while (uniqueRandNumberArray.length < rowCount) {\r\n      const r = Math.floor(Math.random() * Math.floor(899999999)) + 100000000\r\n      if (uniqueRandNumberArray.indexOf(r) === -1) {\r\n         uniqueRandNumberArray.push(r)\r\n      }\r\n   }\r\n   for (let i = 0; i < rowCount; i += 1) {\r\n      const SS: string = uniqueRandNumberArray[i].toString()\r\n      yield `${SS.substr(0, 3)}-${SS.substr(3, 2)}-${SS.substr(5, 4)}`\r\n   }\r\n}\r\n\r\nconst getFirstnames = async (url: string): Promise<TFirstName[]> => {\r\n   const r: TFirstName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TFirstName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n\r\nconst getLastnames = async (url: string): Promise<TLastName[]> => {\r\n   const r: TLastName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TLastName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n","import { Checkbox, FormControlLabel, Grid, Paper, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst varient = 'standard'\r\n\r\n// number input type is being used for integers only\r\n// checkbox is used for boolean datatype\r\nconst implementedInputTypes = ['decimal', 'float', 'number', 'dateTime-local', 'date', 'email', 'checkbox', 'text']\r\n\r\nfunction NumberFormatCustomFixed2(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return (\r\n      <NumberFormat\r\n         {...other}\r\n         getInputRef={inputRef}\r\n         onChange={onChange}\r\n         decimalScale={2}\r\n         fixedDecimalScale\r\n         thousandSeparator\r\n         isNumericString\r\n      />\r\n   )\r\n}\r\n\r\nfunction NumberFormatCustomFloat(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return <NumberFormat {...other} getInputRef={inputRef} onChange={onChange} isNumericString />\r\n}\r\n\r\ninterface IProps {\r\n   fullWidth: boolean\r\n   label: string\r\n   value: any\r\n   required: boolean\r\n   onChange: any\r\n   name: string\r\n   id: string\r\n   type: string\r\n   InputLabelProps: any\r\n}\r\n\r\nconst SwitchTextField = (props: IProps) => {\r\n   const { type, value, label } = props\r\n   if (!implementedInputTypes.includes(type)) {\r\n      return (\r\n         <Grid justify=\"center\">\r\n            <Paper variant=\"outlined\">type {type} is not implemented</Paper>\r\n         </Grid>\r\n      )\r\n   }\r\n\r\n   // inputComponent undefined is ok\r\n   let inputComponent\r\n   if (type === 'decimal') {\r\n      inputComponent = NumberFormatCustomFixed2\r\n   } else if (type === 'float') {\r\n      inputComponent = NumberFormatCustomFloat\r\n   }\r\n\r\n   if (type === 'checkbox') {\r\n      return (\r\n         <Paper elevation={3}>\r\n            <FormControlLabel\r\n               control={<Checkbox {...props} onClick={props.onChange} color=\"primary\" checked={value} />}\r\n               label={label}\r\n            />\r\n         </Paper>\r\n      )\r\n   }\r\n   return (\r\n      <Paper elevation={3} variant=\"elevation\">\r\n         <TextField\r\n            {...props}\r\n            variant={varient}\r\n            InputProps={{\r\n               inputComponent,\r\n            }}\r\n         />\r\n      </Paper>\r\n   )\r\n}\r\nexport default SwitchTextField\r\n","/* eslint-disable react/require-default-props */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { Button, Card, CardContent, createStyles, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { ColDef, Columns, DataGrid, RowsProp } from '@material-ui/data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SwitchTextField from '../Controls/SwitchTextField'\r\nimport env from '../Login/Env'\r\n\r\ntype TField = {\r\n   name: string\r\n   modelType: string\r\n   inputType: string\r\n   inputShrink: boolean\r\n   colType: string\r\n   required: boolean\r\n   readOnly: boolean\r\n   label: string\r\n   width: number\r\n   value: any\r\n}\r\n\r\nconst baseUrl = '/api/'\r\n\r\nclass RestMeta {\r\n   url: string\r\n\r\n   hook: any\r\n\r\n   metaFields: TField[]\r\n\r\n   setUrl(url: string) {\r\n      this.url = url\r\n   }\r\n\r\n   setHook(hook: any) {\r\n      this.hook = hook\r\n   }\r\n\r\n   handleRowSelected = (e: any) => {\r\n      const newFields: TField[] = this.metaFields.map((field) => {\r\n         const updataField: TField = field\r\n\r\n         updataField.value = e.data[field.name] ? e.data[field.name] : ''\r\n\r\n         return updataField\r\n      })\r\n      if (this.hook) {\r\n         this.hook(newFields)\r\n      }\r\n   }\r\n\r\n   getRows = async (): Promise<RowsProp> => {\r\n      const r: RowsProp = await fetch(this.url, { method: 'GET' })\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            const rows: RowsProp = data\r\n\r\n            return rows\r\n         })\r\n         .catch((err) => {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`no database >>> ${err}`)\r\n            throw err\r\n         })\r\n      return r\r\n   }\r\n\r\n   getColumns = async (): Promise<Columns> => {\r\n      const metaFields: TField[] = await this.getMetaFields()\r\n      const _cols: Columns = metaFields.map((f) => {\r\n         const col: ColDef = {\r\n            field: f.name,\r\n            headerName: f.label,\r\n            type: f.colType,\r\n         }\r\n         return col\r\n      })\r\n      return _cols\r\n   }\r\n\r\n   getMetaFields = async (): Promise<TField[]> => {\r\n      const f: TField[] = await fetch(this.url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            const meta = metaData.actions.POST\r\n            const fields: TField[] = []\r\n            for (const prop in meta) {\r\n               const detail = meta[prop]\r\n               const fieldDef: TField = {\r\n                  name: prop,\r\n                  modelType: detail.type,\r\n                  inputType: detail.type,\r\n                  inputShrink: true,\r\n                  colType: 'string',\r\n                  required: detail.required,\r\n                  readOnly: detail.read_only,\r\n                  label: detail.label,\r\n                  width: 350,\r\n                  value: '',\r\n               }\r\n               switch (detail.type) {\r\n                  case 'integer':\r\n                     fieldDef.inputType = 'number'\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'decimal':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'float':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'boolean':\r\n                     fieldDef.inputType = 'checkbox'\r\n                     fieldDef.value = false\r\n                     break\r\n                  case 'datetime':\r\n                     fieldDef.inputType = 'dateTime-local'\r\n                     fieldDef.colType = 'dateTime'\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'date':\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'string':\r\n                     fieldDef.inputType = 'text'\r\n                     break\r\n                  case 'email':\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  case 'file upload':\r\n                     fieldDef.width = 300\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  default:\r\n                     break\r\n               }\r\n\r\n               fields.push(fieldDef)\r\n            }\r\n            return fields\r\n         })\r\n      this.metaFields = f\r\n      return f\r\n   }\r\n}\r\nconst meta = new RestMeta()\r\n\r\ninterface IRVProps {\r\n   url: string\r\n   cols?: Columns\r\n}\r\n//  TO DO: Add other optional parameters\r\n//  TO DO: set \"error\" parameter ie. <DataGrid> error </DataGrid> if error\r\n//  TO DO: note what's here does not work shows no row instead of error\r\nexport const RestViewGrid = (props: IRVProps): any => {\r\n   const emptyCols: Columns = []\r\n   const emptyRows: RowsProp = []\r\n   const [cols, setCols] = useState(emptyCols)\r\n   const [rows, setRows] = useState(emptyRows)\r\n   meta.setUrl(props.url)\r\n\r\n   useEffect(() => {\r\n      if (cols === emptyCols) {\r\n         if (props.cols) {\r\n            setCols(props.cols)\r\n         } else {\r\n            meta.getColumns().then((c) => {\r\n               setCols(c)\r\n            })\r\n         }\r\n         meta.getRows().then((r) => {\r\n            setRows(r)\r\n         })\r\n      }\r\n   }, [])\r\n\r\n   return (\r\n      <DataGrid\r\n         density=\"compact\"\r\n         autoHeight\r\n         pageSize={10}\r\n         rows={rows}\r\n         columns={cols}\r\n         onRowSelected={meta.handleRowSelected}\r\n      />\r\n   )\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nexport const RestForm = (props: IProps) => {\r\n   const useStyles = makeStyles(() =>\r\n      createStyles({\r\n         wordwrap: {\r\n            overflowWrap: 'anywhere',\r\n         },\r\n      })\r\n   )\r\n\r\n   const emptyMeta: TField[] = []\r\n   const emptyRep = { ok: false, statusText: '', url: '' }\r\n   const [metaFields, setMetaFields] = useState<TField[]>(emptyMeta)\r\n   const [newData, setNewData] = useState('')\r\n   const [resp, setResp] = useState(emptyRep)\r\n   const classes = useStyles()\r\n   meta.setUrl(props.url)\r\n   meta.setHook(setMetaFields)\r\n\r\n   useEffect(() => {\r\n      if (metaFields === emptyMeta) {\r\n         meta\r\n            .getMetaFields()\r\n            .then((c) => {\r\n               setMetaFields(c)\r\n            })\r\n            .catch(() => {})\r\n      }\r\n   })\r\n\r\n   const handleChange = (event: any) => {\r\n      // event.preventDefault()\r\n      // event.persist()\r\n      let { value } = event.target\r\n      const { type, id, checked } = event.target\r\n      const index = parseInt(id, 10)\r\n\r\n      setMetaFields((prev) => {\r\n         // return untouched all the items that don't match index\r\n         return prev.map((item, i) => {\r\n            if (i !== index) {\r\n               return item\r\n            }\r\n            // for the one item that does match the index\r\n            // do any special handling of event.target.value\r\n            if (type === 'checkbox') {\r\n               value = checked\r\n            }\r\n\r\n            // update the matching item and return result to setMetaFields\r\n            return {\r\n               ...item,\r\n               value,\r\n            }\r\n         })\r\n      })\r\n   }\r\n\r\n   const handleSubmit = async (event: any) => {\r\n      event.preventDefault()\r\n\r\n      const stripReadOnly = metaFields\r\n         .filter((field) => field.value && field.readOnly)\r\n         .map((field) => {\r\n            return {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n         })\r\n\r\n      let pk: number = 0\r\n      const isUpdate = stripReadOnly.length > 0\r\n\r\n      if (isUpdate) {\r\n         pk = stripReadOnly[0].value\r\n      }\r\n\r\n      let stripFormat = metaFields\r\n         .filter((field) => !field.readOnly)\r\n         .map((field) => {\r\n            const stripped = {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n            if (field.inputType === 'decimal' && field.value) {\r\n               stripped.value = stripped.value.replaceAll(',', '')\r\n               stripped.value = stripped.value.replaceAll('$', '')\r\n               stripped.value = stripped.value.replaceAll(' ', '')\r\n               stripped.value = parseFloat(stripped.value)\r\n            }\r\n            if (field.inputType === 'number' && field.value) {\r\n               stripped.value = parseInt(stripped.value, 10)\r\n            }\r\n            if (stripped.value === '') {\r\n               stripped.value = null\r\n            }\r\n            return stripped\r\n         })\r\n\r\n      stripFormat = stripFormat.concat(stripReadOnly)\r\n\r\n      const isValid = validate()\r\n      if (isValid) {\r\n         const data = stripFormat.reduce((acc, cur) => ({ ...acc, [cur.name]: cur.value }), {})\r\n         setNewData(JSON.stringify(data))\r\n\r\n         let url = `${env().API_HOST + baseUrl}`\r\n         // url = `http://dbhausen.pythonanywhere.com${baseUrl}`\r\n         let method = 'POST'\r\n\r\n         if (isUpdate) {\r\n            url = `${env().API_HOST + baseUrl}update/${pk}`\r\n            // url = `http://dbhausen.pythonanywhere.com${baseUrl}update/${pk}`\r\n            method = 'PUT'\r\n         }\r\n\r\n         const requestOptions = {\r\n            method,\r\n            //    headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data),\r\n         }\r\n\r\n         try {\r\n            const response = await fetch(url, requestOptions)\r\n\r\n            setResp(response)\r\n         } catch (error) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(error)\r\n         }\r\n      }\r\n   }\r\n   //  TO DO: implement form level validation\r\n   const validate = () => {\r\n      return true\r\n   }\r\n\r\n   return (\r\n      <Paper>\r\n         <form onSubmit={handleSubmit}>\r\n            {metaFields.map((item, index) => (\r\n               <div key={item.name}>\r\n                  {item.readOnly ? (\r\n                     <Paper variant=\"outlined\">\r\n                        <span>{`${item.name} : ${item.value}`}</span>\r\n                     </Paper>\r\n                  ) : (\r\n                     <SwitchTextField\r\n                        label={item.label}\r\n                        type={item.inputType}\r\n                        fullWidth={true}\r\n                        value={item.value}\r\n                        required={item.required}\r\n                        onChange={handleChange}\r\n                        id={index.toString()}\r\n                        name={item.name}\r\n                        InputLabelProps={{\r\n                           shrink: item.inputShrink,\r\n                        }}\r\n                     />\r\n                  )}\r\n               </div>\r\n            ))}\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n               submit\r\n            </Button>\r\n\r\n            <Card>\r\n               <CardContent>\r\n                  <Typography color=\"textPrimary\" gutterBottom>\r\n                     Data sent:\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" component=\"p\" gutterBottom className={classes.wordwrap}>\r\n                     {newData}\r\n                  </Typography>\r\n                  <Typography color=\"textPrimary\" gutterBottom>\r\n                     Response:\r\n                  </Typography>\r\n                  <Typography>{`Status Text: ${resp.statusText}`}</Typography>\r\n                  <Typography>{`URL: ${resp.url}`}</Typography>\r\n               </CardContent>\r\n            </Card>\r\n         </form>\r\n      </Paper>\r\n   )\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport { AppBar, Box, createStyles, Grid, makeStyles, Paper, Tab, Tabs, Theme } from '@material-ui/core'\r\nimport { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport env from '../Login/Env'\r\nimport { RestForm, RestViewGrid } from '../RestFormGrid/RestFormGrid'\r\n\r\nconst cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\nconst RestCrud = () => {\r\n   const [value, setValue] = React.useState(0)\r\n\r\n   const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n      setValue(newValue)\r\n   }\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         root: {\r\n            padding: '2px',\r\n         },\r\n         form: {\r\n            marginBottom: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: '215px',\r\n         },\r\n         data: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n\r\n            color: theme.palette.text.secondary,\r\n         },\r\n         dataPaper: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n            background: theme.palette.text.hint,\r\n         },\r\n      })\r\n   )\r\n   const classes = useStyles()\r\n\r\n   interface TabPanelProps {\r\n      children?: React.ReactNode\r\n      index: any\r\n      value: any\r\n   }\r\n\r\n   function TabPanel(props: TabPanelProps) {\r\n      const { children, index, ...other } = props\r\n\r\n      return (\r\n         <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}>\r\n            {value === index && <Box>{children}</Box>}\r\n         </div>\r\n      )\r\n   }\r\n\r\n   function a11yProps(index: any) {\r\n      return {\r\n         id: `simple-tab-${index}`,\r\n         'aria-controls': `simple-tabpanel-${index}`,\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className={classes.root}>\r\n         <AppBar position=\"static\">\r\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n               <Tab label=\"Demo\" {...a11yProps(0)} />\r\n               <Tab label=\"Instalation\" {...a11yProps(1)} />\r\n               <Tab label=\"Usage\" {...a11yProps(2)} />\r\n            </Tabs>\r\n         </AppBar>\r\n         <TabPanel value={value} index={0}>\r\n            <Grid container spacing={3}>\r\n               <Grid item xs={11} sm={4} md={2} className={classes.form}>\r\n                  <RestForm url={`${env().API_HOST}/api/`} />\r\n               </Grid>\r\n               <Grid item xs={12} sm={6} md={8} lg={9} className={classes.data}>\r\n                  <Paper className={classes.dataPaper}>\r\n                     <RestViewGrid url={`${env().API_HOST}/api/`} />\r\n                  </Paper>\r\n               </Grid>\r\n            </Grid>\r\n         </TabPanel>\r\n         <TabPanel value={value} index={1}>\r\n            To Do: Instalations instructions\r\n         </TabPanel>\r\n         <TabPanel value={value} index={2}>\r\n            To Do: Usage notes\r\n         </TabPanel>\r\n      </div>\r\n   )\r\n}\r\nexport default RestCrud\r\n","import { Paper } from '@material-ui/core'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport Hidden from '@material-ui/core/Hidden'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport { createStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4'\r\nimport BrightnessHighIcon from '@material-ui/icons/BrightnessHigh'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport React from 'react'\r\nimport { createMyTheme, makeMyStyles } from '../../Themes/createMyTheme'\r\nimport BoxBuilder from '../BoxBuilder/BoxBuilder'\r\nimport env from '../Login/Env'\r\nimport RandomValues from '../RandomNames/RandomNames'\r\nimport RestCrud from '../RestCrud/RestCrud'\r\n\r\nconst drawerWidth = 150\r\n\r\nexport default function ResponsiveDrawer() {\r\n   const [brigtness, setBrightness] = React.useState('dark')\r\n   const appliedTheme = createMyTheme(brigtness)\r\n   const myStyles = makeMyStyles(appliedTheme, drawerWidth)\r\n   const useStyles = makeStyles(() => createStyles(myStyles))\r\n   const classes = useStyles()\r\n   const [mobileOpen, setMobileOpen] = React.useState(false)\r\n   const [showing, setShowing] = React.useState('About Us')\r\n\r\n   document.body.style.backgroundColor = appliedTheme.palette.background.paper\r\n\r\n   const handleDrawerToggle = () => {\r\n      setMobileOpen(!mobileOpen)\r\n   }\r\n\r\n   const handleThemeToggle = (event: any, newValue: string) => {\r\n      setBrightness(newValue)\r\n   }\r\n\r\n   const handleListItemClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, index: string) => {\r\n      setShowing(index)\r\n      setMobileOpen(false)\r\n   }\r\n\r\n   const drawer = (\r\n      <div>\r\n         <Divider />\r\n         <List>\r\n            {['About Us', 'RestGrid', 'Random', 'BoxBuilder'].map((text) => (\r\n               <ListItem onClick={(event) => handleListItemClick(event, text)} button key={text}>\r\n                  <ListItemText primary={text} />\r\n               </ListItem>\r\n            ))}\r\n         </List>\r\n      </div>\r\n   )\r\n\r\n   return (\r\n      <ThemeProvider theme={appliedTheme}>\r\n         <Paper className={classes.root}>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n               <Toolbar>\r\n                  <IconButton\r\n                     color=\"inherit\"\r\n                     aria-label=\"open drawer\"\r\n                     edge=\"start\"\r\n                     onClick={handleDrawerToggle}\r\n                     className={classes.menuButton}>\r\n                     <MenuIcon />\r\n                  </IconButton>\r\n                  {brigtness === 'light' ? (\r\n                     <IconButton\r\n                        className={classes.brightness}\r\n                        color=\"inherit\"\r\n                        aria-label=\"Dark Theme\"\r\n                        edge=\"start\"\r\n                        onClick={(event) => handleThemeToggle(event, 'dark')}>\r\n                        <Brightness4Icon />\r\n                     </IconButton>\r\n                  ) : null}\r\n                  {brigtness === 'dark' ? (\r\n                     <IconButton\r\n                        className={classes.brightness}\r\n                        color=\"inherit\"\r\n                        aria-label=\"Light Theme\"\r\n                        edge=\"start\"\r\n                        onClick={(event) => handleThemeToggle(event, 'light')}>\r\n                        <BrightnessHighIcon />\r\n                     </IconButton>\r\n                  ) : null}\r\n                  <Typography variant=\"h6\" noWrap>\r\n                     Rest-React\r\n                  </Typography>\r\n               </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n               {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n               <Hidden mdUp implementation=\"css\">\r\n                  <Drawer\r\n                     variant=\"temporary\"\r\n                     anchor={appliedTheme.direction === 'rtl' ? 'right' : 'left'}\r\n                     disableAutoFocus\r\n                     open={mobileOpen}\r\n                     onClose={handleDrawerToggle}\r\n                     classes={{\r\n                        paper: classes.drawerPaper,\r\n                     }}\r\n                     ModalProps={{\r\n                        keepMounted: true, // Better open performance on mobile.\r\n                     }}>\r\n                     {drawer}\r\n                  </Drawer>\r\n               </Hidden>\r\n               <Hidden smDown implementation=\"css\">\r\n                  <Drawer\r\n                     classes={{\r\n                        paper: classes.drawerPaper,\r\n                     }}\r\n                     variant=\"permanent\"\r\n                     open>\r\n                     {drawer}\r\n                  </Drawer>\r\n               </Hidden>\r\n            </nav>\r\n         </Paper>\r\n         <div className={classes.appBar}>\r\n            <div className={classes.toolbar} />\r\n\r\n            {showing === 'About Us' ? (\r\n               <Paper>\r\n                  <Typography component=\"h4\">About us</Typography>\r\n               </Paper>\r\n            ) : null}\r\n            {showing === 'RestGrid' ? <RestCrud /> : null}\r\n            {showing === 'Random' ? <RandomValues url={`${env().API_HOST}/api/`} /> : null}\r\n            {showing === 'BoxBuilder' ? <BoxBuilder /> : null}\r\n         </div>\r\n         <Divider />\r\n         <div className={classes.appBar2}>\r\n            <Typography align=\"center\">Stuff</Typography>\r\n         </div>\r\n      </ThemeProvider>\r\n   )\r\n}\r\n","/* eslint-disable no-shadow */\r\nimport { teal } from '@material-ui/core/colors'\r\nimport { createMuiTheme, createStyles, Theme, ThemeOptions } from '@material-ui/core/styles'\r\n// eslint-disable-next-line no-unused-vars\r\nimport createPalette from '@material-ui/core/styles/createPalette'\r\n// eslint-disable-next-line no-unused-vars\r\n// import * as createPalette from '@material-ui/core/styles/createPalette'\r\n\r\ndeclare module '@material-ui/core/styles/createPalette' {\r\n   interface Palette {\r\n      myBackgound?: Palette['primary']\r\n      myDataGrid?: Palette['secondary']\r\n   }\r\n   export interface PaletteOptions {\r\n      myBackgound?: PaletteOptions['primary']\r\n      myDataGrid?: PaletteOptions['secondary']\r\n   }\r\n}\r\n\r\nexport const createMyTheme = (brigtness: string) => {\r\n   const darkThemeCfg: ThemeOptions = {\r\n      palette: {\r\n         type: 'dark',\r\n         background: {\r\n            paper: '#424242',\r\n            default: '#212121',\r\n         },\r\n         info: {\r\n            dark: '#212121',\r\n            main: '#212121',\r\n            light: '#616161',\r\n            contrastText: '#FFF59D',\r\n         },\r\n         myBackgound: {\r\n            dark: '#424242',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n         myDataGrid: {\r\n            dark: '#616161',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n      },\r\n   }\r\n\r\n   const lightThemeCfg: ThemeOptions = {\r\n      palette: {\r\n         type: 'light',\r\n         primary: teal,\r\n         info: {\r\n            dark: '#4DB6AC',\r\n            main: '#80CBC4',\r\n            light: '#B2DFDB',\r\n            contrastText: '#212121',\r\n         },\r\n         background: {\r\n            default: '#b2dfdb',\r\n            paper: '#e0f2f1',\r\n         },\r\n         myBackgound: {\r\n            dark: '#424242',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n         myDataGrid: {\r\n            dark: '#616161',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n      },\r\n   }\r\n\r\n   const options = brigtness === 'light' ? lightThemeCfg : darkThemeCfg\r\n   return createMuiTheme({\r\n      ...options,\r\n   })\r\n}\r\n\r\nexport const makeMyStyles = (theme: Theme, drawerWidth: number) => {\r\n   return createStyles({\r\n      root: {\r\n         display: 'flex',\r\n      },\r\n      drawer: {\r\n         [theme.breakpoints.up('md')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n         },\r\n      },\r\n      appBar: {\r\n         [theme.breakpoints.up('md')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n         },\r\n      },\r\n\r\n      appBar2: {\r\n         position: 'fixed',\r\n         bottom: '0',\r\n         height: '30px',\r\n         paddingLeft: theme.spacing(2),\r\n         background: '#36363a',\r\n         width: '100%',\r\n         [theme.breakpoints.up('md')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n         },\r\n      },\r\n      menuButton: {\r\n         marginRight: theme.spacing(2),\r\n         [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n         },\r\n      },\r\n      brightness: {\r\n         marginRight: theme.spacing(2),\r\n         position: 'absolute',\r\n         right: 0,\r\n      },\r\n      // necessary for content to be below app bar\r\n      toolbar: theme.mixins.toolbar,\r\n\r\n      drawerPaper: {\r\n         width: drawerWidth,\r\n         background: theme.palette.background.default,\r\n      },\r\n      main: {\r\n         background: '#424242',\r\n      },\r\n      content: {\r\n         flexGrow: 1,\r\n         padding: theme.spacing(3),\r\n      },\r\n   })\r\n}\r\n","import { Paper } from '@material-ui/core'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App2'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <Paper>\r\n         <App />\r\n      </Paper>\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}