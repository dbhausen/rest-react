{"version":3,"sources":["Components/Dashboard/Dashboard.tsx","Components/Login/Login.tsx","Components/Preferences/Preferences.tsx","Components/App/App.tsx","Components/App/useToken.tsx","index.tsx"],"names":["Dashboard","API_HOST","getCsrfToken","a","undefined","_csrfToken","sessionStorage","getItem","fetch","credentials","response","json","data","csrfToken","loginUser","method","userpass","JSON","stringify","headers","body","result","Login","setToken","useState","username","setUserName","password","setPassword","handleSubmit","e","preventDefault","token","className","onSubmit","type","onChange","target","value","Preferences","App","tokenString","parse","getToken","userToken","setItem","useToken","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAEe,SAASA,IACrB,OAAO,2C,oCCMJC,G,MAAW,yB,SAIFC,I,2EAAf,gCAAAC,EAAA,8DAEsBC,KADfC,EAAaC,eAAeC,QAAQ,WACO,OAAfF,EAFnC,gCAG6BG,MAAM,GAAD,OAAIP,EAAJ,UAAsB,CAC/CQ,YAAa,YAJtB,cAGYC,EAHZ,gBAMyBA,EAASC,OANlC,OAMYC,EANZ,OAOMP,EAAaO,EAAKC,UAPxB,cASsB,OAAfR,IACDA,EAAa,YAVnB,kBAaUA,GAbV,6C,+BAgBeS,E,gFAAf,WAAyBC,EAAqBC,GAA9C,iBAAAb,EAAA,8DAC0BK,MAD1B,eACmCP,EADnC,eAEMc,EACoB,SAAXA,EAHf,iCAG0Db,IAH1D,yBAGqC,cAHrC,mCAG6E,GAH7E,8BAKYe,KAAKC,UAAUF,GAL3B,MAEMD,OAFN,KAGMI,QAHN,KAIMV,YAAa,UACbW,KALN,mDACSV,EADT,iBAQsBA,EAASC,OAR/B,eAQSC,EART,yBASUA,EAAKS,QATf,6C,sBAYe,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,SAAiB,EACdC,mBAAiB,IADH,mBACvCC,EADuC,KAC7BC,EAD6B,OAEdF,mBAAiB,IAFH,mBAEvCG,EAFuC,KAE7BC,EAF6B,KAIxCC,EAAY,uCAAG,WAAOC,GAAP,eAAA3B,EAAA,6DAClB2B,EAAEC,iBADgB,SAEEjB,EAAU,OAAQ,CAAEW,WAAUE,aAFhC,OAEZK,EAFY,OAGlBT,EAASS,GAHS,2CAAH,sDAMlB,OACG,sBAAKC,UAAU,gBAAf,UACG,+CACA,uBAAMC,SAAUL,EAAhB,UACG,kCACG,yCACA,uBAAOM,KAAK,OAAOC,SAAU,SAACN,GAAD,OAAOJ,EAAYI,EAAEO,OAAOC,aAE5D,kCACG,yCACA,uBAAOH,KAAK,WAAWC,SAAU,SAACN,GAAD,OAAOF,EAAYE,EAAEO,OAAOC,aAEhE,8BACG,wBAAQH,KAAK,SAAb,4BC9DA,SAASI,IACrB,OAAO,6C,MC4BKC,MAvBf,WAAgB,IAAD,ECLA,WACZ,IADgC,EAQNhB,mBAPT,WACd,IAAMiB,EAAcnC,eAAeC,QAAQ,SAC3C,OAAoB,OAAhBkC,EACM,WAEHxB,KAAKyB,MAAMD,GAAaT,MAECW,IARH,mBAQzBX,EARyB,KAQlBT,EARkB,KAchC,MAAO,CACJA,SALe,SAACqB,GAChBtC,eAAeuC,QAAQ,QAAS5B,KAAKC,UAAU0B,IAC/CrB,EAASqB,EAAUZ,QAInBA,SDVyBc,GAApBd,EADI,EACJA,MAAOT,EADH,EACGA,SAEf,MAAc,aAAVS,EACM,cAAC,EAAD,CAAOT,SAAUA,IAGxB,sBAAKU,UAAU,UAAf,UACG,6CACA,cAAC,IAAD,UACG,eAAC,IAAD,WACG,cAAC,IAAD,CAAOc,KAAK,aAAZ,SACG,cAAC/C,EAAD,MAEH,cAAC,IAAD,CAAO+C,KAAK,eAAZ,SACG,cAACR,EAAD,e,MElBlBS,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,W","file":"static/js/main.8eed3f00.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Dashboard() {\r\n   return <h2>Dashboard</h2>\r\n}\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react'\r\nimport './Login.css'\r\n\r\ninterface ICredentials {\r\n   username: string\r\n   password: string\r\n}\r\n\r\nconst API_HOST = 'http://localhost:8000'\r\n\r\ntype ThttpMethod = 'POST' | 'GET' | 'OPTIONS'\r\n\r\nasync function getCsrfToken() {\r\n   let _csrfToken = sessionStorage.getItem('token')\r\n   if (_csrfToken === undefined || _csrfToken === null) {\r\n      const response = await fetch(`${API_HOST}/csrf/`, {\r\n         credentials: 'include',\r\n      })\r\n      const data = await response.json()\r\n      _csrfToken = data.csrfToken\r\n   }\r\n   if (_csrfToken === null) {\r\n      _csrfToken = 'NO_TOKEN'\r\n   }\r\n\r\n   return _csrfToken\r\n}\r\n\r\nasync function loginUser(method: ThttpMethod, userpass: ICredentials) {\r\n   const response = await fetch(`${API_HOST}/ping/`, {\r\n      method,\r\n      headers: method === 'POST' ? { 'X-CSRFToken': await getCsrfToken() } : {},\r\n      credentials: 'include',\r\n      body: JSON.stringify(userpass),\r\n   })\r\n\r\n   const data = await response.json()\r\n   return data.result\r\n}\r\n\r\nexport default function Login({ setToken }: any) {\r\n   const [username, setUserName] = useState<string>('')\r\n   const [password, setPassword] = useState<string>('')\r\n\r\n   const handleSubmit = async (e: { preventDefault: () => void }) => {\r\n      e.preventDefault()\r\n      const token = await loginUser('POST', { username, password })\r\n      setToken(token)\r\n   }\r\n\r\n   return (\r\n      <div className=\"login-wrapper\">\r\n         <h1>Please Log In</h1>\r\n         <form onSubmit={handleSubmit}>\r\n            <label>\r\n               <p>Username</p>\r\n               <input type=\"text\" onChange={(e) => setUserName(e.target.value)} />\r\n            </label>\r\n            <label>\r\n               <p>Password</p>\r\n               <input type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <div>\r\n               <button type=\"submit\">Submit</button>\r\n            </div>\r\n         </form>\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Preferences() {\r\n   return <h2>Preferences</h2>\r\n}\r\n","import React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport Dashboard from '../Dashboard/Dashboard'\r\nimport Login from '../Login/Login'\r\nimport Preferences from '../Preferences/Preferences'\r\nimport './App.css'\r\nimport useToken from './useToken'\r\n\r\nfunction App() {\r\n   const { token, setToken } = useToken()\r\n\r\n   if (token === 'NO_TOKEN') {\r\n      return <Login setToken={setToken} />\r\n   }\r\n   return (\r\n      <div className=\"wrapper\">\r\n         <h1>Application</h1>\r\n         <BrowserRouter>\r\n            <Switch>\r\n               <Route path=\"/dashboard\">\r\n                  <Dashboard />\r\n               </Route>\r\n               <Route path=\"/preferences\">\r\n                  <Preferences />\r\n               </Route>\r\n            </Switch>\r\n         </BrowserRouter>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import { useState } from 'react'\r\n\r\n// use 'localStorage' to persist between sessions\r\nexport default function useToken() {\r\n   const getToken = () => {\r\n      const tokenString = sessionStorage.getItem('token')\r\n      if (tokenString === null) {\r\n         return 'NO_TOKEN'\r\n      }\r\n      return JSON.parse(tokenString).token\r\n   }\r\n   const [token, setToken] = useState(getToken())\r\n\r\n   const saveToken = (userToken: { token: string }) => {\r\n      sessionStorage.setItem('token', JSON.stringify(userToken))\r\n      setToken(userToken.token)\r\n   }\r\n   return {\r\n      setToken: saveToken,\r\n      token,\r\n   }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}