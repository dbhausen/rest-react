{"version":3,"sources":["Components/Login/Env.tsx","Components/Login/getCsrfToken.tsx","Components/Login/Login.tsx","Components/Controls/SwitchTextField.tsx","Components/App/RestFormGrid.tsx","Components/RestCrud.tsx","Components/Themes/defaultThemeProvider.tsx","Components/App/useToken.tsx","Components/App/Utilities/RandomValues.tsx","Components/App/App.tsx","index.tsx"],"names":["env","d","API_HOST","getCsrfToken","a","undefined","_csrfToken","sessionStorage","getItem","fetch","credentials","response","json","data","csrfToken","setItem","loginUser","method","userpass","JSON","stringify","headers","body","key","Login","setToken","useState","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","token","className","onSubmit","value","type","onChange","target","process","defaultValue","REACT_APP_NOT_SECRET_CODE","implementedInputTypes","NumberFormatCustomFixed2","props","inputRef","other","getInputRef","decimalScale","fixedDecimalScale","thousandSeparator","isNumericString","NumberFormatCustomFloat","SwitchTextField","inputComponent","label","includes","Paper","elevation","FormControlLabel","control","Checkbox","onClick","color","checked","variant","TextField","InputProps","Grid","justify","baseUrl","meta","url","hook","metaFields","handleRowSelected","newFields","map","field","updataField","name","console","log","getRows","then","catch","err","error","r","getColumns","getMetaFields","_cols","f","headerName","colType","metaData","actions","POST","fields","prop","detail","fieldDef","modelType","inputType","inputShrink","required","readOnly","read_only","width","push","this","RestViewGrid","emptyCols","cols","setCols","rows","setRows","setUrl","useEffect","c","autoHeight","columns","onRowSelected","RestForm","useStyles","makeStyles","createStyles","wordwrap","overflowWrap","emptyMeta","setMetaFields","newData","setNewData","ok","statusText","resp","setResp","classes","setHook","handleChange","event","id","index","parseInt","prev","item","i","stripReadOnly","filter","pk","isUpdate","length","stripFormat","stripped","replaceAll","parseFloat","concat","validate","reduce","acc","cur","requestOptions","direction","container","spacing","fullWidth","toString","InputLabelProps","shrink","Button","Card","CardContent","Typography","gutterBottom","component","xs","RestCrud","theme","header","border","borderStyle","borderTopLeftRadius","borderTopRightRadius","background","flexGrow","breakpoints","down","footer","borderBottomLeftRadius","borderBottomRightRadius","sm","style","minWidth","minHeight","createMuiTheme","palette","primary","main","secondary","DefaultThemeProvider","children","useToken","tokenString","parse","getToken","userToken","g","RandomValues","copy","state","outputAs","jsonToCsv","handleRowCountChange","setState","rowCount","calculate","handleOutputAsChange","Object","keys","result","forEach","row","values","join","startCalculate","dayjs","loading","getRandomInt","max","Math","floor","random","ssGenerator","minFirstRange","minLastRange","middleInitial","String","fromCharCode","age","hireDate","daysOnJob","subtract","firstName","firstnameList","find","element","minRange","lastName","lastnameList","givenName","surName","gender","ss","next","toDate","endCalculate","csv","startConstruct","startComponentDidMount","endComponentDidMount","getFirstnames","getLastnames","uniqueRandNumberArray","indexOf","maxHeight","Box","menubox","FormControl","InputLabel","Select","labelId","MenuItem","endIcon","size","root","hiddenbutton","showbutton","height","density","pageSize","rowsPerPageOptions","wordWrap","wordBreak","overflow","maxWidth","format","Component","withStyles","paddingTop","display","justifyContent","alignItems","marginLeft","box","SS","substr","App","reader","FileReader","parser","DOMParser","save","line","toInt","v","toProper","split","w","toUpperCase","toLowerCase","onload","pe","lines","doc","parseFromString","firstname","textContent","rank","recentCount","maxRange","readAsText","files","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d46845b0.chunk.js","sourcesContent":["const env = () => {\r\n   const d = { API_HOST: 'http://dbhausen.pythonanywhere.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://dbhausen.pythonanywhere.com'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","import env from './Env'\r\n\r\nconst getCsrfToken = async () => {\r\n   let _csrfToken = sessionStorage.getItem('csrf_token')\r\n   if (_csrfToken === undefined || _csrfToken === null) {\r\n      const response = await fetch(`${env().API_HOST}/csrf/`, {\r\n         credentials: 'include',\r\n      })\r\n      const data = await response.json()\r\n      _csrfToken = data.csrfToken\r\n   }\r\n\r\n   if (_csrfToken === null) {\r\n      _csrfToken = 'NO_TOKEN'\r\n   } else {\r\n      sessionStorage.setItem('csrf_token', _csrfToken)\r\n   }\r\n\r\n   return _csrfToken\r\n}\r\nexport default getCsrfToken\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react'\r\nimport env from './Env'\r\nimport getCsrfToken from './getCsrfToken'\r\nimport './Login.css'\r\n\r\ninterface ICredentials {\r\n   email: string\r\n   password: string\r\n}\r\n\r\ntype ThttpMethod = 'POST' | 'GET' | 'OPTIONS'\r\n\r\nconst loginUser = async (method: ThttpMethod, userpass: ICredentials) => {\r\n   const response = await fetch(`${env().API_HOST}/api/v1/users/auth/login/`, {\r\n      method,\r\n      headers: method === 'POST' ? { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() } : {},\r\n      credentials: 'include',\r\n      body: JSON.stringify(userpass),\r\n   })\r\n   const data = await response.json()\r\n   // needed to do some validation here to see if login was success\r\n   // handle errors\r\n   return data.key\r\n}\r\n\r\nconst Login = ({ setToken }: any) => {\r\n   const [email, setEmail] = useState('d@dd.com')\r\n   const [password, setPassword] = useState('postman!!01')\r\n\r\n   const handleSubmit = async (e: { preventDefault: () => void }) => {\r\n      e.preventDefault()\r\n      const token = await loginUser('POST', { email, password })\r\n      setToken(token)\r\n   }\r\n\r\n   return (\r\n      <div className=\"login-wrapper\">\r\n         <h1>Please Log In</h1>\r\n         <form onSubmit={handleSubmit}>\r\n            <label>\r\n               <p>Username</p>\r\n               <input value={email} type=\"text\" onChange={(e) => setEmail(e.target.value)} />\r\n            </label>\r\n            <label>\r\n               <p>Password</p>\r\n               <input value={password} type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <div>\r\n               <button type=\"submit\">Submit</button>\r\n            </div>\r\n         </form>\r\n         <div>\r\n            <small>\r\n               You are running this application in <b>{process.env.NODE_ENV}</b> mode.\r\n            </small>\r\n            <form>\r\n               <input type=\"hidden\" defaultValue={process.env.REACT_APP_NOT_SECRET_CODE} />\r\n            </form>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\nexport default Login\r\n","import { Checkbox, FormControlLabel, Grid, Paper, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst varient = 'standard'\r\n\r\n// number input type is being used for integers only\r\n// checkbox is used for boolean datatype\r\nconst implementedInputTypes = ['decimal', 'float', 'number', 'dateTime-local', 'date', 'email', 'checkbox', 'text']\r\n\r\nfunction NumberFormatCustomFixed2(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return (\r\n      <NumberFormat\r\n         {...other}\r\n         getInputRef={inputRef}\r\n         onChange={onChange}\r\n         decimalScale={2}\r\n         fixedDecimalScale\r\n         thousandSeparator\r\n         isNumericString\r\n      />\r\n   )\r\n}\r\n\r\nfunction NumberFormatCustomFloat(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return <NumberFormat {...other} getInputRef={inputRef} onChange={onChange} isNumericString />\r\n}\r\n\r\ninterface IProps {\r\n   fullWidth: boolean\r\n   label: string\r\n   value: any\r\n   required: boolean\r\n   onChange: any\r\n   name: string\r\n   id: string\r\n   type: string\r\n   InputLabelProps: any\r\n}\r\n\r\nconst SwitchTextField = (props: IProps) => {\r\n   const { type, value, label } = props\r\n   if (!implementedInputTypes.includes(type)) {\r\n      return (\r\n         <Grid justify=\"center\">\r\n            <Paper variant=\"outlined\">type {type} is not implemented</Paper>\r\n         </Grid>\r\n      )\r\n   }\r\n\r\n   // inputComponent undefined is ok\r\n   let inputComponent\r\n   if (type === 'decimal') {\r\n      inputComponent = NumberFormatCustomFixed2\r\n   } else if (type === 'float') {\r\n      inputComponent = NumberFormatCustomFloat\r\n   }\r\n\r\n   if (type === 'checkbox') {\r\n      return (\r\n         <Paper elevation={3}>\r\n            <FormControlLabel\r\n               control={<Checkbox {...props} onClick={props.onChange} color=\"primary\" checked={value} />}\r\n               label={label}\r\n            />\r\n         </Paper>\r\n      )\r\n   }\r\n   return (\r\n      <Paper elevation={3} variant=\"elevation\">\r\n         <TextField\r\n            {...props}\r\n            variant={varient}\r\n            InputProps={{\r\n               inputComponent,\r\n            }}\r\n         />\r\n      </Paper>\r\n   )\r\n}\r\nexport default SwitchTextField\r\n","/* eslint-disable no-console */\r\n/* eslint-disable react/require-default-props */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { Button, Card, CardContent, createStyles, Grid, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { ColDef, Columns, DataGrid, RowsProp } from '@material-ui/data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SwitchTextField from '../Controls/SwitchTextField'\r\nimport env from '../Login/Env'\r\nimport getCsrfToken from '../Login/getCsrfToken'\r\n\r\ntype TField = {\r\n   name: string\r\n   modelType: string\r\n   inputType: string\r\n   inputShrink: boolean\r\n   colType: string\r\n   required: boolean\r\n   readOnly: boolean\r\n   label: string\r\n   width: number\r\n   value: any\r\n}\r\n\r\nconst baseUrl = '/api/'\r\n\r\nclass RestMeta {\r\n   url: string\r\n\r\n   hook: any\r\n\r\n   metaFields: TField[]\r\n\r\n   setUrl(url: string) {\r\n      this.url = url\r\n   }\r\n\r\n   setHook(hook: any) {\r\n      this.hook = hook\r\n   }\r\n\r\n   handleRowSelected = (e: any) => {\r\n      const newFields: TField[] = this.metaFields.map((field) => {\r\n         const updataField: TField = field\r\n\r\n         updataField.value = e.data[field.name] ? e.data[field.name] : ''\r\n\r\n         return updataField\r\n      })\r\n      if (this.hook) {\r\n         this.hook(newFields)\r\n      }\r\n\r\n      console.log(e)\r\n   }\r\n\r\n   getRows = async (): Promise<RowsProp> => {\r\n      const r: RowsProp = await fetch(this.url, { method: 'GET' })\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            const rows: RowsProp = data\r\n\r\n            return rows\r\n         })\r\n         .catch((err) => {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`no database >>> ${err}`)\r\n            throw err\r\n         })\r\n      return r\r\n   }\r\n\r\n   getColumns = async (): Promise<Columns> => {\r\n      const metaFields: TField[] = await this.getMetaFields()\r\n      const _cols: Columns = metaFields.map((f) => {\r\n         const col: ColDef = {\r\n            field: f.name,\r\n            headerName: f.label,\r\n            type: f.colType,\r\n         }\r\n         return col\r\n      })\r\n      return _cols\r\n   }\r\n\r\n   getMetaFields = async (): Promise<TField[]> => {\r\n      const f: TField[] = await fetch(this.url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            const meta = metaData.actions.POST\r\n            const fields: TField[] = []\r\n            for (const prop in meta) {\r\n               const detail = meta[prop]\r\n               const fieldDef: TField = {\r\n                  name: prop,\r\n                  modelType: detail.type,\r\n                  inputType: detail.type,\r\n                  inputShrink: true,\r\n                  colType: 'string',\r\n                  required: detail.required,\r\n                  readOnly: detail.read_only,\r\n                  label: detail.label,\r\n                  width: 350,\r\n                  value: '',\r\n               }\r\n               switch (detail.type) {\r\n                  case 'integer':\r\n                     fieldDef.inputType = 'number'\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'decimal':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'float':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'boolean':\r\n                     fieldDef.inputType = 'checkbox'\r\n                     fieldDef.value = false\r\n                     break\r\n                  case 'datetime':\r\n                     fieldDef.inputType = 'dateTime-local'\r\n                     fieldDef.colType = 'dateTime'\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'date':\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'string':\r\n                     fieldDef.inputType = 'text'\r\n                     break\r\n                  case 'email':\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  case 'file upload':\r\n                     fieldDef.width = 300\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  default:\r\n                     break\r\n               }\r\n\r\n               fields.push(fieldDef)\r\n            }\r\n            return fields\r\n         })\r\n      this.metaFields = f\r\n      return f\r\n   }\r\n}\r\nconst meta = new RestMeta()\r\n\r\ninterface IRVProps {\r\n   url: string\r\n   cols?: Columns\r\n}\r\n//  TO DO: Add other optional parameters\r\n//  TO DO: set \"error\" parameter ie. <DataGrid> error </DataGrid> if error\r\n//  TO DO: note what's here does not work shows no row instead of error\r\nexport const RestViewGrid = (props: IRVProps): any => {\r\n   const emptyCols: Columns = []\r\n   const emptyRows: RowsProp = []\r\n   const [cols, setCols] = useState(emptyCols)\r\n   const [rows, setRows] = useState(emptyRows)\r\n   meta.setUrl(props.url)\r\n\r\n   useEffect(() => {\r\n      if (cols === emptyCols) {\r\n         if (props.cols) {\r\n            setCols(props.cols)\r\n         } else {\r\n            meta\r\n               .getColumns()\r\n               .then((c) => {\r\n                  setCols(c)\r\n               })\r\n               .catch((err) => {\r\n                  console.error(err)\r\n               })\r\n         }\r\n         meta\r\n            .getRows()\r\n            .then((r) => {\r\n               setRows(r)\r\n            })\r\n            .catch((err) => {\r\n               console.error(err)\r\n            })\r\n      }\r\n   }, [])\r\n\r\n   return <DataGrid autoHeight={false} rows={rows} columns={cols} onRowSelected={meta.handleRowSelected} />\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nexport const RestForm = (props: IProps) => {\r\n   const useStyles = makeStyles(() =>\r\n      createStyles({\r\n         wordwrap: {\r\n            overflowWrap: 'anywhere',\r\n         },\r\n      })\r\n   )\r\n\r\n   const emptyMeta: TField[] = []\r\n   const emptyRep = { ok: false, statusText: '', url: '' }\r\n   const [metaFields, setMetaFields] = useState<TField[]>(emptyMeta)\r\n   const [newData, setNewData] = useState('')\r\n   const [resp, setResp] = useState(emptyRep)\r\n   const classes = useStyles()\r\n   meta.setUrl(props.url)\r\n   meta.setHook(setMetaFields)\r\n\r\n   useEffect(() => {\r\n      if (metaFields === emptyMeta) {\r\n         meta\r\n            .getMetaFields()\r\n            .then((c) => {\r\n               setMetaFields(c)\r\n            })\r\n            .catch(() => {})\r\n      }\r\n   })\r\n\r\n   const handleChange = (event: any) => {\r\n      // event.preventDefault()\r\n      // event.persist()\r\n      let { value } = event.target\r\n      const { type, id, checked } = event.target\r\n      const index = parseInt(id, 10)\r\n      // eslint-disable-next-line no-console\r\n      // console.log(type)\r\n\r\n      setMetaFields((prev) => {\r\n         // return untouched all the items that don't match index\r\n         return prev.map((item, i) => {\r\n            if (i !== index) {\r\n               return item\r\n            }\r\n            // for the one item that does match the index\r\n            // do any special handling of event.target.value\r\n            if (type === 'checkbox') {\r\n               value = checked\r\n            }\r\n\r\n            // update the matching item and return result to setMetaFields\r\n            return {\r\n               ...item,\r\n               value,\r\n            }\r\n         })\r\n      })\r\n   }\r\n\r\n   const handleSubmit = async (event: any) => {\r\n      event.preventDefault()\r\n\r\n      const stripReadOnly = metaFields\r\n         .filter((field) => field.value && field.readOnly)\r\n         .map((field) => {\r\n            return {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n         })\r\n\r\n      let pk: number = 0\r\n      const isUpdate = stripReadOnly.length > 0\r\n\r\n      if (isUpdate) {\r\n         pk = stripReadOnly[0].value\r\n      }\r\n\r\n      let stripFormat = metaFields\r\n         .filter((field) => !field.readOnly)\r\n         .map((field) => {\r\n            const stripped = {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n            if (field.inputType === 'decimal' && field.value) {\r\n               stripped.value = stripped.value.replaceAll(',', '')\r\n               stripped.value = stripped.value.replaceAll('$', '')\r\n               stripped.value = stripped.value.replaceAll(' ', '')\r\n               stripped.value = parseFloat(stripped.value)\r\n            }\r\n            if (field.inputType === 'number' && field.value) {\r\n               stripped.value = parseInt(stripped.value, 10)\r\n            }\r\n            if (stripped.value === '') {\r\n               stripped.value = null\r\n            }\r\n            return stripped\r\n         })\r\n\r\n      stripFormat = stripFormat.concat(stripReadOnly)\r\n\r\n      const isValid = validate()\r\n      if (isValid) {\r\n         const data = stripFormat.reduce((acc, cur) => ({ ...acc, [cur.name]: cur.value }), {})\r\n         setNewData(JSON.stringify(data))\r\n\r\n         let url = `${env().API_HOST + baseUrl}`\r\n         let method = 'POST'\r\n\r\n         if (isUpdate) {\r\n            url = `${env().API_HOST + baseUrl}update/${pk}`\r\n            method = 'PUT'\r\n         }\r\n\r\n         const requestOptions = {\r\n            method,\r\n            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n            body: JSON.stringify(data),\r\n         }\r\n\r\n         const response = await fetch(url, requestOptions)\r\n\r\n         setResp(response)\r\n      }\r\n   }\r\n   //  TO DO: implement form level validation\r\n   const validate = () => {\r\n      return true\r\n   }\r\n\r\n   return (\r\n      <Grid item direction=\"column\" container spacing={0}>\r\n         <form onSubmit={handleSubmit}>\r\n            {metaFields.map((item, index) => (\r\n               <div key={item.name}>\r\n                  {item.readOnly ? (\r\n                     <Grid item>\r\n                        <Paper variant=\"outlined\">\r\n                           <span>{`${item.name} : ${item.value}`}</span>\r\n                        </Paper>\r\n                     </Grid>\r\n                  ) : (\r\n                     <Grid item>\r\n                        <SwitchTextField\r\n                           label={item.label}\r\n                           type={item.inputType}\r\n                           fullWidth={true}\r\n                           value={item.value}\r\n                           required={item.required}\r\n                           onChange={handleChange}\r\n                           id={index.toString()}\r\n                           name={item.name}\r\n                           InputLabelProps={{\r\n                              shrink: item.inputShrink,\r\n                           }}\r\n                        />\r\n                     </Grid>\r\n                  )}\r\n               </div>\r\n            ))}\r\n            <Grid item>\r\n               <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                  submit\r\n               </Button>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n               <Card>\r\n                  <CardContent>\r\n                     <Typography color=\"textPrimary\" gutterBottom>\r\n                        Data sent:\r\n                     </Typography>\r\n                     <Typography variant=\"body2\" component=\"p\" className={classes.wordwrap}>\r\n                        {newData}\r\n                     </Typography>\r\n                     <Typography color=\"textPrimary\" gutterBottom>\r\n                        Response:\r\n                     </Typography>\r\n                     <Typography variant=\"body2\" component=\"div\">\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Ok:\r\n                           </Grid>\r\n                           <Grid>{resp.ok.toString()}</Grid>\r\n                        </Grid>\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Status Text:\r\n                           </Grid>\r\n                           <Grid>{resp.statusText}</Grid>\r\n                        </Grid>\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Url:\r\n                           </Grid>\r\n                           <Grid>{resp.url}</Grid>\r\n                        </Grid>\r\n                     </Typography>\r\n                  </CardContent>\r\n               </Card>\r\n            </Grid>\r\n         </form>\r\n      </Grid>\r\n   )\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport { createStyles, Grid, makeStyles, Theme } from '@material-ui/core'\r\nimport { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport { RestForm, RestViewGrid } from './App/RestFormGrid'\r\nimport env from './Login/Env'\r\n\r\nconst cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\nconst RestCrud = () => {\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         header: {\r\n            border: '1px',\r\n            borderStyle: 'solid',\r\n            borderTopLeftRadius: '7px',\r\n            borderTopRightRadius: '7px',\r\n            background: '#90A4AE',\r\n         },\r\n         body: {\r\n            flexGrow: 1,\r\n            background: '#90A4AE',\r\n            [theme.breakpoints.down('xs')]: {\r\n               background: 'red',\r\n            },\r\n         },\r\n         footer: {\r\n            border: '1px',\r\n            borderStyle: 'solid',\r\n            borderBottomLeftRadius: '7px',\r\n            borderBottomRightRadius: '7px',\r\n            background: '#90A4AE',\r\n         },\r\n      })\r\n   )\r\n   const classes = useStyles()\r\n   return (\r\n      <Grid container direction=\"row\" spacing={0} className={classes.body}>\r\n         <Grid item xs={12} sm={3} style={{ minWidth: '250px' }}>\r\n            <RestForm url={`${env().API_HOST}/api/`} />\r\n         </Grid>\r\n         <Grid item xs={12} sm={7} style={{ flexGrow: 1, minHeight: '400px' }}>\r\n            <RestViewGrid url={`${env().API_HOST}/api/`} />\r\n         </Grid>\r\n      </Grid>\r\n   )\r\n}\r\nexport default RestCrud\r\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst theme = createMuiTheme({\r\n   palette: {\r\n      type: 'light',\r\n      primary: {\r\n         main: '#304ffe',\r\n      },\r\n      secondary: {\r\n         main: '#009688',\r\n      },\r\n   },\r\n})\r\n\r\nconst DefaultThemeProvider = (props: any) => {\r\n   return <MuiThemeProvider theme={theme}>{props.children}</MuiThemeProvider>\r\n}\r\n\r\nexport default DefaultThemeProvider\r\n","import { useState } from 'react'\r\n\r\n// use 'localStorage' to persist between sessions\r\nconst useToken = () => {\r\n   const getToken = () => {\r\n      const tokenString = sessionStorage.getItem('token')\r\n      if (tokenString === null) {\r\n         return undefined\r\n      }\r\n      return JSON.parse(tokenString)\r\n   }\r\n   const [token, setToken] = useState(getToken())\r\n\r\n   const saveToken = (userToken: { token: string }) => {\r\n      sessionStorage.setItem('token', JSON.stringify(userToken))\r\n      setToken(userToken)\r\n   }\r\n   return {\r\n      setToken: saveToken,\r\n      token,\r\n   }\r\n}\r\nexport default useToken\r\n","/* eslint-disable no-console */\r\n/* eslint-disable no-nested-ternary */\r\n/* eslint-disable react/no-unused-state */\r\n/* eslint-disable no-useless-constructor */\r\n/* eslint-disable react/prefer-stateless-function */\r\n/* eslint-disable no-unused-vars */\r\nimport { Box, Button, FormControl, InputLabel, MenuItem, Paper, Select, Theme, withStyles } from '@material-ui/core'\r\nimport { Columns, DataGrid } from '@material-ui/data-grid'\r\nimport CreateSharpIcon from '@material-ui/icons/CreateSharp'\r\nimport copy from 'clipboard-copy'\r\nimport dayjs, { Dayjs } from 'dayjs'\r\nimport React, { Component } from 'react'\r\n\r\n// const DayJS = require('react-dayjs')\r\n\r\nconst styles = (theme: Theme) => ({\r\n   menubox: {\r\n      height: '50px',\r\n      paddingTop: theme.spacing(3),\r\n      maxWidth: '700px',\r\n      display: 'flex',\r\n      justifyContent: 'flex-start',\r\n      alignItems: 'flex-end',\r\n      '& .MuiSelect-selectMenu': {\r\n         minWidth: '80px',\r\n         marginLeft: '10px',\r\n      },\r\n   },\r\n   box: {\r\n      height: '30px',\r\n      maxWidth: '700px',\r\n      display: 'flex',\r\n      justifyContent: 'flex-end',\r\n      alignItems: 'flex-end',\r\n   },\r\n   hiddenbutton: {\r\n      display: 'none',\r\n   },\r\n   showbutton: {\r\n      display: 'flex',\r\n   },\r\n})\r\n\r\ninterface IProps {\r\n   url: string\r\n   classes: any\r\n}\r\ninterface IState {\r\n   firstnameList: TFirstName[]\r\n   lastnameList: TLastName[]\r\n   loading: boolean\r\n   rows: TRow[]\r\n   rowCount: number\r\n   outputAs: string\r\n   csv: string\r\n   startConstruct: Dayjs\r\n   startComponentDidMount: Dayjs\r\n   endComponentDidMount: Dayjs\r\n   startCalculate: Dayjs\r\n   endCalculate: Dayjs\r\n}\r\n\r\ntype TFirstName = {\r\n   givenName: string\r\n   gender: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TLastName = {\r\n   surName: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TRow = {\r\n   id: number\r\n   givenName: string\r\n   middleInitial: string\r\n   surName: string\r\n   gender: string\r\n   ss: string\r\n   age: number\r\n   hireDate: Date\r\n}\r\n\r\nclass RandomValues extends Component<IProps, IState> {\r\n   constructor(props: IProps) {\r\n      super(props)\r\n      this.state = {\r\n         firstnameList: [],\r\n         lastnameList: [],\r\n         loading: true,\r\n         rows: [],\r\n         rowCount: 100,\r\n         outputAs: 'DataGrid',\r\n         csv: 'to do',\r\n         startConstruct: dayjs(),\r\n         startComponentDidMount: dayjs(),\r\n         endComponentDidMount: dayjs(),\r\n         startCalculate: dayjs(),\r\n         endCalculate: dayjs(),\r\n      }\r\n   }\r\n\r\n   async componentDidMount() {\r\n      this.setState({\r\n         startComponentDidMount: dayjs(),\r\n      })\r\n      const firstnameList = await getFirstnames(`${this.props.url}firstname/`)\r\n      //   const firstnameList = await getStaticFirstnames()\r\n      const lastnameList = await getLastnames(`${this.props.url}lastname/`)\r\n      //   const lastnameList = await getStaticLastnames()\r\n      const uniqueRandNumberArray: number[] = []\r\n\r\n      while (uniqueRandNumberArray.length < 100000) {\r\n         const r = Math.floor(Math.random() * Math.floor(89999999)) + 10000000\r\n         if (uniqueRandNumberArray.indexOf(r) === -1) {\r\n            uniqueRandNumberArray.push(r)\r\n         }\r\n      }\r\n\r\n      this.setState({\r\n         firstnameList,\r\n         lastnameList,\r\n         endComponentDidMount: dayjs(),\r\n      })\r\n      this.calculate(this.state.rowCount)\r\n   }\r\n\r\n   copy = () => {\r\n      // eslint-disable-next-line global-require\r\n      if (this.state.outputAs === 'JSON') {\r\n         copy(JSON.stringify(this.state.rows))\r\n      } else {\r\n         //  copy(JSON.stringify(this.state.lastnameList))\r\n         copy(this.jsonToCsv(this.state.rows))\r\n      }\r\n   }\r\n\r\n   handleRowCountChange = (e: React.ChangeEvent<{ value: number }>) => {\r\n      this.setState({\r\n         rowCount: e.target.value,\r\n      })\r\n      this.calculate(e.target.value)\r\n   }\r\n\r\n   handleOutputAsChange = (e: React.ChangeEvent<{ value: string }>) => {\r\n      this.setState({\r\n         outputAs: e.target.value,\r\n      })\r\n   }\r\n\r\n   jsonToCsv = (rows: TRow[]): string => {\r\n      const headers = Object.keys(rows[0])\r\n      const replacer = (value: any) => {\r\n         return value === null ? '' : value\r\n      }\r\n      let result = ''\r\n      rows.forEach((row: { [index: string]: any }) => {\r\n         const values: any = []\r\n         headers.forEach((header) => {\r\n            values.push(JSON.stringify(replacer(row[header])))\r\n         })\r\n         result = result.concat(values.join(',').concat('\\r'))\r\n      })\r\n\r\n      return result\r\n   }\r\n\r\n   calculate = (rowCount: number) => {\r\n      this.setState({\r\n         rows: [],\r\n         startCalculate: dayjs(),\r\n         loading: true,\r\n      })\r\n      const getRandomInt = (max: number): number => {\r\n         return Math.floor(Math.random() * Math.floor(max))\r\n      }\r\n\r\n      const rows: TRow[] = []\r\n      const ssGenerator: IterableIterator<string> = g(rowCount)\r\n      for (let index = 0; index < rowCount; index += 1) {\r\n         const minFirstRange = getRandomInt(43255164)\r\n         const minLastRange = getRandomInt(154575750)\r\n         const middleInitial = String.fromCharCode(getRandomInt(22) + 65)\r\n         const age = getRandomInt(45) + 20\r\n         // eslint-disable-next-line new-cap\r\n         let hireDate = dayjs()\r\n         const daysOnJob = getRandomInt(age - 20) * 0.65 * 365 + getRandomInt(365)\r\n         hireDate = hireDate.subtract(Math.floor(daysOnJob), 'days')\r\n         const firstName = this.state.firstnameList.find((element) => element.minRange >= minFirstRange)\r\n         const lastName = this.state.lastnameList.find((element) => element.minRange >= minLastRange)\r\n\r\n         // hireDate.setDate(1461110400000)\r\n\r\n         rows.push({\r\n            id: index,\r\n            givenName: firstName?.givenName || '',\r\n            middleInitial,\r\n            surName: lastName?.surName || '',\r\n            gender: firstName?.gender || '',\r\n            ss: ssGenerator.next().value,\r\n            age,\r\n            hireDate: hireDate.toDate(),\r\n         })\r\n      }\r\n\r\n      this.setState({\r\n         endCalculate: dayjs(),\r\n         loading: false,\r\n         rows,\r\n      })\r\n   }\r\n\r\n   render() {\r\n      const { classes } = this.props\r\n\r\n      const cols: Columns = [\r\n         //  { field: 'id' },\r\n         { field: 'givenName' },\r\n         { field: 'middleInitial' },\r\n         { field: 'surName' },\r\n         { field: 'gender' },\r\n         { field: 'ss', width: 150 },\r\n         { field: 'age', type: 'number', width: 90 },\r\n         { field: 'hireDate', type: 'date', width: 250 },\r\n      ]\r\n\r\n      return (\r\n         <div style={{ maxHeight: '400px' }}>\r\n            <Box className={classes.menubox} component=\"span\">\r\n               <Button color=\"primary\" variant=\"contained\" onClick={() => this.calculate(this.state.rowCount)}>\r\n                  Refresh\r\n               </Button>\r\n               <FormControl>\r\n                  <InputLabel id=\"demo-simple-select-label\">Count</InputLabel>\r\n                  <Select\r\n                     labelId=\"demo-simple-select-label\"\r\n                     id=\"demo-simple-select\"\r\n                     value={this.state.rowCount}\r\n                     onChange={this.handleRowCountChange}>\r\n                     <MenuItem value={100}>100</MenuItem>\r\n                     <MenuItem value={1000}>1,000</MenuItem>\r\n                     <MenuItem value={10000}>10,000</MenuItem>\r\n                     <MenuItem value={50000}>50,000</MenuItem>\r\n                  </Select>\r\n               </FormControl>\r\n               <FormControl>\r\n                  <InputLabel id=\"demo-simple-select-label\">Output as</InputLabel>\r\n                  <Select\r\n                     labelId=\"demo-simple-select-label\"\r\n                     id=\"demo-simple-select\"\r\n                     value={this.state.outputAs}\r\n                     onChange={this.handleOutputAsChange}>\r\n                     <MenuItem value=\"DataGrid\">Data Grid</MenuItem>\r\n                     <MenuItem value=\"JSON\">JSON</MenuItem>\r\n                     <MenuItem value=\"csv\">Comma Separated</MenuItem>\r\n                  </Select>\r\n               </FormControl>\r\n               <Button\r\n                  endIcon={<CreateSharpIcon />}\r\n                  size=\"small\"\r\n                  classes={\r\n                     this.state.outputAs === 'DataGrid' ? { root: classes.hiddenbutton } : { root: classes.showbutton }\r\n                  }\r\n                  onClick={this.copy}>\r\n                  Copy to clipboard\r\n               </Button>\r\n            </Box>\r\n\r\n            {this.state.outputAs === 'DataGrid' ? (\r\n               <div style={{ height: '400px' }}>\r\n                  <DataGrid\r\n                     density=\"compact\"\r\n                     loading={this.state.loading}\r\n                     pageSize={5}\r\n                     rowsPerPageOptions={[5, 25, 100]}\r\n                     autoHeight={true}\r\n                     rows={this.state.rows}\r\n                     columns={cols}\r\n                  />\r\n               </div>\r\n            ) : this.state.outputAs === 'JSON' ? (\r\n               <Paper\r\n                  id=\"json\"\r\n                  elevation={9}\r\n                  style={{\r\n                     wordWrap: 'break-word',\r\n                     wordBreak: 'break-all',\r\n                     overflow: 'auto',\r\n                     maxWidth: '700px',\r\n                     maxHeight: '400px',\r\n                  }}>\r\n                  {JSON.stringify(this.state.rows)}\r\n               </Paper>\r\n            ) : (\r\n               <Paper id=\"json\" elevation={9} style={{ maxWidth: '700px', maxHeight: '400px', overflow: 'auto' }}>\r\n                  {this.jsonToCsv(this.state.rows)}\r\n               </Paper>\r\n            )}\r\n\r\n            <div>{`${this.state.startConstruct.format()} Constructor : `}</div>\r\n            <div>{`${this.state.startComponentDidMount.format()} Start Didmount : `}</div>\r\n            <div>{`${this.state.endComponentDidMount.format()} End Didmount : `}</div>\r\n            <div>{`${this.state.startCalculate.format()} Start Calculate : `}</div>\r\n            <div>{`${this.state.endCalculate.format()} end calculte : `}</div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\nexport default withStyles(styles)(RandomValues)\r\n\r\nfunction* g(rowCount: number): IterableIterator<string> {\r\n   const uniqueRandNumberArray: number[] = []\r\n\r\n   while (uniqueRandNumberArray.length < rowCount) {\r\n      const r = Math.floor(Math.random() * Math.floor(899999999)) + 100000000\r\n      if (uniqueRandNumberArray.indexOf(r) === -1) {\r\n         uniqueRandNumberArray.push(r)\r\n      }\r\n   }\r\n   for (let i = 0; i < rowCount; i += 1) {\r\n      const SS: string = uniqueRandNumberArray[i].toString()\r\n      yield `${SS.substr(0, 3)}-${SS.substr(3, 2)}-${SS.substr(5, 4)}`\r\n   }\r\n}\r\n\r\nconst getFirstnames = async (url: string): Promise<TFirstName[]> => {\r\n   const r: TFirstName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TFirstName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n\r\nconst getLastnames = async (url: string): Promise<TLastName[]> => {\r\n   const r: TLastName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TLastName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n","/* eslint-disable no-console */\r\nimport { Grid } from '@material-ui/core'\r\nimport { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport env from '../Login/Env'\r\nimport getCsrfToken from '../Login/getCsrfToken'\r\nimport Login from '../Login/Login'\r\nimport RestCrud from '../RestCrud'\r\nimport DefaultThemeProvider from '../Themes/defaultThemeProvider'\r\nimport './App.css'\r\nimport { RestViewGrid } from './RestFormGrid'\r\nimport useToken from './useToken'\r\nimport RandomValues from './Utilities/RandomValues'\r\n\r\nfunction App() {\r\n   const { token, setToken } = useToken()\r\n\r\n   if (!token) {\r\n      return <Login setToken={setToken} />\r\n   }\r\n   const cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\n   const handleChange = async (e: any) => {\r\n      e.preventDefault()\r\n      const reader = new FileReader()\r\n      const parser = new DOMParser()\r\n      const baseUrl = '/api/lastname/'\r\n\r\n      const save = async (data: any, line: number) => {\r\n         const url = `${env().API_HOST + baseUrl}`\r\n         const method = 'POST'\r\n\r\n         const requestOptions = {\r\n            method,\r\n            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n            body: JSON.stringify(data),\r\n         }\r\n\r\n         try {\r\n            await fetch(url, requestOptions)\r\n         } catch (error) {\r\n            console.log(line)\r\n         }\r\n      }\r\n\r\n      const toInt = (v: any): number => {\r\n         const myInt: string = v || '0'\r\n\r\n         return parseInt(myInt.replaceAll(',', ''), 10)\r\n      }\r\n\r\n      const toProper = (v: any): string => {\r\n         const myString: string = v || ''\r\n\r\n         return myString\r\n            .split(' ')\r\n            .map((w) => w[0].toUpperCase() + w.substr(1).toLowerCase())\r\n            .join(' ')\r\n      }\r\n\r\n      reader.onload = async (pe: any) => {\r\n         if (pe.target.result) {\r\n            const lines = pe.target.result.split('\\n')\r\n            for (let line = 0; line < lines.length; line += 1) {\r\n               const doc = parser.parseFromString(lines[line], 'text/xml')\r\n               try {\r\n                  const firstname = {\r\n                     surName: toProper(doc.children[0].children[0].textContent),\r\n                     rank: toInt(doc.children[0].children[3].textContent),\r\n                     recentCount: toInt(doc.children[0].children[4].textContent),\r\n                     minRange: 0,\r\n                     maxRange: 0,\r\n                  }\r\n                  if (line >= 500) {\r\n                     save(firstname, line)\r\n                  }\r\n               } catch (error) {\r\n                  console.log('do nothing')\r\n               }\r\n            }\r\n         }\r\n      }\r\n      reader.readAsText(e.target.files[0])\r\n   }\r\n\r\n   return (\r\n      <DefaultThemeProvider>\r\n         <div className=\"wrapper\">\r\n            <h1>Application</h1>\r\n            <BrowserRouter>\r\n               <Switch>\r\n                  <Route path=\"/rest_grid\">\r\n                     <Grid container direction=\"row\" style={{ background: 'grey', flexGrow: 1 }}>\r\n                        <Grid sm={4} xs={12} item style={{ minWidth: '250px', minHeight: '400px' }}>\r\n                           <RestViewGrid url={`${env().API_HOST}/api/`} cols={cols} />\r\n                        </Grid>\r\n                        <Grid sm={8} xs={12} style={{ minHeight: '400px' }} item>\r\n                           <RestViewGrid url={`${env().API_HOST}/api/`} />\r\n                        </Grid>\r\n                     </Grid>\r\n                  </Route>\r\n                  <Route path=\"/rest_form\">\r\n                     <RestCrud />\r\n                  </Route>\r\n                  <Route path=\"/read_file\">\r\n                     <input type=\"file\" name=\"file\" id=\"file\" onChange={handleChange} />\r\n                     <RandomValues url={`${env().API_HOST}/api/`} />\r\n                  </Route>\r\n               </Switch>\r\n            </BrowserRouter>\r\n         </div>\r\n      </DefaultThemeProvider>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}