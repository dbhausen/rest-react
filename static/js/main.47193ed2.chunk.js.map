{"version":3,"sources":["Components/Login/Env.tsx","Components/RandomNames/RandomNames.tsx","Components/Controls/SwitchTextField.tsx","Components/Login/getCsrfToken.tsx","Components/RestFormGrid/RestFormGrid.tsx","Components/RestCrud/RestCrud.tsx","Components/App/App2.tsx","Themes/createMyTheme.tsx","index.tsx"],"names":["env","d","API_HOST","g","genderNames","_cols","field","hide","width","type","_rows","id","givenName","middleInitial","surName","gender","ss","age","hireDate","Date","RandomNames","props","useState","firstNamelist","setFirstNamelist","lastNameList","setLastNameList","loading","setLoading","rows","setRows","rowCount","setRowCount","outputAs","setOutputAs","maxAge","setMaxAge","minAge","setMinAge","inclusiveGender","setInclusiveGender","typeMap","Map","set","cols","setCols","classes","makeStyles","theme","createStyles","menubox","height","paddingTop","spacing","paddingLeft","maxWidth","display","justifyContent","alignItems","minWidth","marginLeft","box","hiddenbutton","csv","overflowY","showbutton","color","purple","useStyles","useEffect","a","getFirstnames","url","fnl","getLastnames","lnl","calculate","fetchNames","console","log","_rowCount","getRandomInt","max","Math","floor","random","randNormal","min","u","v","num","sqrt","cos","PI","_r","ssGenerator","index","minFirstRange","minLastRange","String","fromCharCode","dayjs","daysOnJob","subtract","firstName","find","element","maxRange","lastName","genderName","genderIndex","length","push","next","value","toDate","handleSwitchChange","e","prev","c","col","currentTarget","name","target","checked","_newCols","getVisibleColNames","visableColNames","forEach","jsonToCsv","headers","result","row","values","header","JSON","stringify","concat","join","Paper","style","padding","Grid","container","direction","item","FormGroup","map","FormControlLabel","control","Switch","size","onChange","label","margin","TextField","parseInt","Tooltip","title","placement","Button","variant","onClick","Typography","filter","get","className","component","FormControl","InputLabel","Select","labelId","MenuItem","endIcon","root","copy","elevation","marginBottom","density","pageSize","disableColumnSelector","autoHeight","columns","wordWrap","wordBreak","overflow","maxHeight","shortRows","shortRow","jsonToShortJson","whiteSpace","uniqueRandNumberArray","r","indexOf","i","SS","toString","substr","fetch","method","then","response","json","data","catch","err","error","implementedInputTypes","NumberFormatCustomFixed2","inputRef","other","getInputRef","decimalScale","fixedDecimalScale","thousandSeparator","isNumericString","NumberFormatCustomFloat","SwitchTextField","inputComponent","includes","Checkbox","InputProps","justify","getCsrfToken","undefined","_csrfToken","sessionStorage","getItem","credentials","csrfToken","setItem","baseUrl","meta","hook","metaFields","handleRowSelected","newFields","updataField","getRows","getColumns","getMetaFields","f","headerName","colType","metaData","actions","POST","fields","prop","detail","fieldDef","modelType","inputType","inputShrink","required","readOnly","read_only","this","RestViewGrid","emptyCols","setUrl","onRowSelected","RestForm","wordwrap","overflowWrap","emptyMeta","setMetaFields","newData","setNewData","ok","statusText","resp","setResp","setHook","handleChange","event","handleSubmit","preventDefault","stripReadOnly","pk","isUpdate","stripFormat","stripped","replaceAll","parseFloat","validate","reduce","acc","cur","requestOptions","body","onSubmit","fullWidth","InputLabelProps","shrink","Card","CardContent","gutterBottom","RestCrud","form","marginRight","minHeight","palette","text","secondary","dataPaper","background","hint","xs","sm","md","lg","ResponsiveDrawer","drawerWidth","React","brigtness","setBrightness","appliedTheme","lightThemeCfg","primary","teal","default","paper","myBackgound","dark","main","light","contrastText","myDataGrid","options","createMuiTheme","createMyTheme","myStyles","drawer","breakpoints","up","flexShrink","appBar","appBar2","position","bottom","menuButton","brightness","right","toolbar","mixins","drawerPaper","content","flexGrow","mobileOpen","setMobileOpen","showing","setShowing","document","backgroundColor","handleDrawerToggle","handleThemeToggle","newValue","Divider","List","ListItem","button","ListItemText","ThemeProvider","AppBar","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","mdUp","implementation","Drawer","anchor","open","onClose","ModalProps","keepMounted","smDown","align","ReactDOM","render","StrictMode","getElementById"],"mappings":"+XASeA,EATH,WACT,IAAMC,EAAI,CAAEC,SAAU,sCAMtB,OAFGD,EAAEC,SAAW,qCAETD,G,iNCofAE,IAheJC,GAAwB,CAC3B,gBACA,MACA,QACA,cACA,cACA,UACA,aACA,aACA,UACA,YACA,YACA,cACA,eACA,aACA,WACA,cACA,aAGGC,GAAiB,CAEpB,CAAEC,MAAO,YAAaC,MAAM,GAC5B,CAAED,MAAO,gBAAiBC,MAAM,GAChC,CAAED,MAAO,UAAWC,MAAM,GAC1B,CAAED,MAAO,SAAUE,MAAO,IAAKD,MAAM,GACrC,CAAED,MAAO,KAAME,MAAO,IAAKD,MAAM,GACjC,CAAED,MAAO,MAAOG,KAAM,SAAUD,MAAO,GAAID,MAAM,GACjD,CAAED,MAAO,WAAYG,KAAM,OAAQD,MAAO,IAAKD,MAAM,IAElDG,GAAgB,CAEnB,CAAEC,GAAI,EAAGC,UAAW,GAAIC,cAAe,GAAIC,QAAS,GAAIC,OAAQ,GAAIC,GAAI,GAAIC,IAAK,EAAGC,SAAU,IAAIC,OA8btFC,GAjaK,SAACC,GAAmB,IAAD,EACMC,qBADN,mBAC7BC,EAD6B,KACdC,EADc,OAEIF,qBAFJ,mBAE7BG,EAF6B,KAEfC,EAFe,OAGNJ,oBAAS,GAHH,mBAG7BK,EAH6B,KAGpBC,EAHoB,OAIZN,mBAAiBZ,IAJL,mBAI7BmB,EAJ6B,KAIvBC,EAJuB,OAKJR,mBAAS,KALL,mBAK7BS,EAL6B,KAKnBC,EALmB,OAMJV,mBAAS,YANL,mBAM7BW,EAN6B,KAMnBC,EANmB,OAORZ,mBAAiB,IAPT,mBAO7Ba,EAP6B,KAOrBC,EAPqB,OAQRd,mBAAiB,IART,mBAQ7Be,GAR6B,KAQrBC,GARqB,QASUhB,oBAAS,GATnB,qBAS7BiB,GAT6B,MASZC,GATY,MAU9BC,GAAU,IAAIC,IAEpBD,GAAQE,IAAI,KAAM,CAAElC,KAAM,WAC1BgC,GAAQE,IAAI,YAAa,CAAElC,KAAM,WACjCgC,GAAQE,IAAI,gBAAiB,CAAElC,KAAM,WACrCgC,GAAQE,IAAI,UAAW,CAAElC,KAAM,WAC/BgC,GAAQE,IAAI,SAAU,CAAElC,KAAM,WAC9BgC,GAAQE,IAAI,KAAM,CAAElC,KAAM,WAC1BgC,GAAQE,IAAI,MAAO,CAAElC,KAAM,WAC3BgC,GAAQE,IAAI,WAAY,CAAElC,KAAM,SAnBI,OAsBZa,mBAAkBjB,IAtBN,qBAsB7BuC,GAtB6B,MAsBvBC,GAtBuB,MA6D9BC,GArCYC,aAAW,SAACC,GAAD,OAC1BC,YAAa,CACVC,QAAS,CACNC,OAAQ,OACRC,WAAYJ,EAAMK,QAAQ,GAC1BC,YAAaN,EAAMK,QAAQ,GAC3BE,SAAU,QACVC,QAAS,OACTC,eAAgB,aAChBC,WAAY,WACZ,0BAA2B,CACxBC,SAAU,OACVC,WAAY,SAGlBC,IAAK,CACFV,OAAQ,OACRI,SAAU,QACVC,QAAS,OACTC,eAAgB,WAChBC,WAAY,YAEfI,aAAc,CACXN,QAAS,QAEZO,IAAK,CACFC,UAAW,UAEdC,WAAY,CACTT,QAAS,QAEZ,oBAAqB,CAClBU,MAAOC,IAAO,UAKPC,GAEhBC,qBAAU,WAWP,OAVgB,uCAAG,8BAAAC,EAAA,sEACEC,GAAc,GAAD,OAAIlD,EAAMmD,IAAV,eADf,cACVC,EADU,OAEhBjD,EAAiBiD,GAFD,SAGEC,GAAa,GAAD,OAAIrD,EAAMmD,IAAV,cAHd,OAGVG,EAHU,OAIhBjD,EAAgBiD,GAChBC,GAAU7C,EAAU0C,EAAKE,GALT,2CAAH,oDAQhBE,GAEO,WACJC,QAAQC,IAAI,yCAEf,IAEH,IAMMH,GAAY,SAACI,EAAmBP,EAAmBE,GACtD7C,EAAQ,IACRF,GAAW,GAmBX,IAjBA,IAAMqD,EAAe,SAACC,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAG1CI,EAAa,SAAbA,EAAcC,EAAaL,GAG9B,IAFA,IAAIM,EAAI,EACJC,EAAI,EACK,IAAND,GAASA,EAAIL,KAAKE,SACzB,KAAa,IAANI,GAASA,EAAIN,KAAKE,SACzB,IAAIK,EAAMP,KAAKQ,MAAM,EAAMR,KAAKJ,IAAIS,IAAML,KAAKS,IAAI,EAAMT,KAAKU,GAAKJ,GAEnE,OADAC,EAAMA,EAAM,GAAO,IACT,GAAKA,EAAM,EAAUJ,EAAWC,EAAKL,GACxCQ,GAAOR,EAAMK,GAAOA,GAGxBO,EAAa,GACbC,EAAwC5F,GAAE6E,GApB2B,WAqBlEgB,GACN,IAAMC,EAAgBhB,EAAa,WAC7BiB,EAAejB,EAAa,WAC5BpE,EAAgBsF,OAAOC,aAAanB,EAAa,IAAM,IACvDhE,EAAMkE,KAAKC,MAAME,EAAWjD,GAAQF,IACtCjB,EAAWmF,OACTC,EAAyC,IAA7BrB,EAAahE,EAAMoB,IAAiB,IAAM4C,EAAa,KACzE/D,EAAWA,EAASqF,SAASpB,KAAKC,MAAMkB,GAAY,QACpD,IAAME,EAAY/B,EAAIgC,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAAYV,KACtDW,EAAWjC,EAAI8B,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAAYT,KACvDW,EAAmC,UAAb,OAATL,QAAS,IAATA,OAAA,EAAAA,EAAWzF,QAAoB,OAAS,SACrDwB,KACDsE,EAA4B,SAAfA,EAAwB,MAAQ,SAEhD,IAAMC,EAAc7B,EAAa,MAC7B6B,EAAc1G,GAAY2G,QAAUxE,KACrCsE,EAAazG,GAAY0G,IAG5BhB,EAAGkB,KAAK,CACLrG,GAAIqF,EACJpF,WAAoB,OAAT4F,QAAS,IAATA,OAAA,EAAAA,EAAW5F,YAAa,GACnCC,gBACAC,SAAiB,OAAR8F,QAAQ,IAARA,OAAA,EAAAA,EAAU9F,UAAW,GAC9BC,OAAQ8F,EACR7F,GAAI+E,EAAYkB,OAAOC,MACvBjG,MACAC,SAAUA,EAASiG,YA3BhBnB,EAAQ,EAAGA,EAAQhB,EAAWgB,GAAS,EAAI,EAA3CA,GA+BTlE,EAAQgE,GACRlE,GAAW,IAYRwF,GAAqB,SAACC,GACzBxE,IAAQ,SAACyE,GACN,IAAMC,EAAID,EAAKb,MAAK,SAACe,GAAD,OAASA,EAAIlH,QAAU+G,EAAEI,cAAcC,QACvDH,IACDA,EAAEhH,MAAQ8G,EAAEM,OAAOC,SAatB,IAXA,IAAMC,EAAoB,CAEvB,CAAEvH,MAAO,YAAaC,MAAM,GAC5B,CAAED,MAAO,gBAAiBC,MAAM,GAChC,CAAED,MAAO,UAAWC,MAAM,GAC1B,CAAED,MAAO,SAAUE,MAAO,IAAKD,MAAM,GACrC,CAAED,MAAO,KAAME,MAAO,IAAKD,MAAM,GACjC,CAAED,MAAO,MAAOG,KAAM,SAAUD,MAAO,GAAID,MAAM,GACjD,CAAED,MAAO,WAAYG,KAAM,OAAQD,MAAO,IAAKD,MAAM,IAG/CyF,EAAQ,EAAGA,EAAQ6B,EAASd,OAAQf,GAAS,EACnD6B,EAAS7B,GAAOzF,KAAO+G,EAAKtB,GAAOzF,KAGtC,OAAOsH,MA2BPC,GAAqB,WACxB,IAAMC,EAA4B,GAMlC,OALAnF,GAAKoF,SAAQ,SAACR,GACNA,EAAIjH,MACNwH,EAAgBf,KAAKQ,EAAIlH,UAGxByH,GAGJE,GAAY,WACf,IAAKpG,EACF,MAAO,GAEV,IAAMqG,EAAUJ,KAIZK,EAAS,GASb,OARAtG,EAAKmG,SAAQ,SAACI,GACX,IAAMC,EAAc,GACpBH,EAAQF,SAAQ,SAACM,GANH,IAACpB,EAOZmB,EAAOrB,KAAKuB,KAAKC,UANH,QADFtB,EAOwBkB,EAAIE,IANnB,GAAKpB,OAQ7BiB,EAASA,EAAOM,OAAOJ,EAAOK,KAAK,KAAKD,OAAO,UAG3CN,GA+CV,OACG,gBAACQ,EAAA,EAAD,CAAOC,MAAO,CAAEC,QAAS,OAAzB,UACG,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAM3F,QAAS,EAAzC,UACG,eAACyF,EAAA,EAAD,CAAMG,MAAI,EAAV,SACG,eAACC,EAAA,EAAD,UACItG,GAAKuG,KAAI,SAAC3B,GAAD,OACP,eAAC4B,EAAA,EAAD,CACGC,QACG,eAACC,EAAA,EAAD,CACGC,KAAK,QACL3B,SAAUJ,EAAIjH,KACdiJ,SAAUpC,GACVM,KAAMF,EAAIlH,MACV4D,MAAM,YAGZuF,MAAOjC,EAAIlH,eAKvB,eAACwI,EAAA,EAAD,CAAMG,MAAI,EAAV,SACG,eAACN,EAAA,EAAD,CAAOC,MAAO,CAAEC,QAAS,OAAQa,OAAQ,QAAzC,SACG,gBAACR,EAAA,EAAD,WACG,eAACE,EAAA,EAAD,CACGC,QACG,eAACC,EAAA,EAAD,CACGC,KAAK,QACLC,SA7HS,SAACnC,GAClC7E,GAAmB6E,EAAEM,OAAOC,UA6HJA,QAASrF,GACT2E,MAAO3E,GACP2B,MAAM,YAGZuF,MAAM,+BAET,eAACL,EAAA,EAAD,CACGC,QACG,eAACM,EAAA,EAAD,CAAWH,SApHR,SAACnC,GACzBjF,EAAUwH,SAASvC,EAAEM,OAAOT,MAAO,MAmH2BA,MAAO/E,EAAQ1B,KAAK,SAASyD,MAAM,YAE/EuF,MAAM,gBAET,eAACL,EAAA,EAAD,CACGC,QACG,eAACM,EAAA,EAAD,CAAWH,SA9HR,SAACnC,GACzB/E,GAAUsH,SAASvC,EAAEM,OAAOT,MAAO,MA6H2BA,MAAO7E,GAAQ5B,KAAK,SAASyD,MAAM,YAE/EuF,MAAM,2BAET,eAACI,EAAA,EAAD,CAASC,MAAM,qDAAqDC,UAAU,eAA9E,SACG,eAACC,EAAA,EAAD,CAAQ9F,MAAM,UAAU+F,QAAQ,YAAYC,QAAS,WAjPnEnI,GAAYR,GAAiBE,GAC9BmD,GAAU7C,EAAUR,EAAeE,IAgPpB,8BAQZ,eAACqH,EAAA,EAAD,CAAMG,MAAI,EAAV,SACG,eAACN,EAAA,EAAD,CAAOC,MAAO,CAAEC,QAAS,OAAQa,OAAQ,QAAzC,SACG,eAACS,EAAA,EAAD,UACG,iCACI,qBACAvH,GACGwH,QAAO,SAAC5C,GAAD,OAAUA,EAAIjH,QACrB4I,KAAI,SAAC3B,GAAD,OACF,4CAAYA,EAAIlH,MAAhB,aAA0BmC,GAAQ4H,IAAI7C,EAAIlH,OAAOG,WAEtD,gBAOhB,gBAACkI,EAAA,EAAD,CAAO2B,UAAWxH,GAAQI,QAASqH,UAAU,OAA7C,UACG,gBAACC,EAAA,EAAD,WACG,eAACC,EAAA,EAAD,CAAY9J,GAAG,2BAAf,mBACA,gBAAC+J,EAAA,EAAD,CACGC,QAAQ,2BACRhK,GAAG,qBACHuG,MAAOnF,EACPyH,SA9Kc,SAACnC,GAC3BrF,EAAYqF,EAAEM,OAAOT,OACjB3F,GAAiBE,GAClBmD,GAAUyC,EAAEM,OAAOT,MAAO3F,EAAeE,IAuKnC,UAKG,eAACmJ,EAAA,EAAD,CAAU1D,MAAO,IAAjB,iBACA,eAAC0D,EAAA,EAAD,CAAU1D,MAAO,IAAjB,mBACA,eAAC0D,EAAA,EAAD,CAAU1D,MAAO,IAAjB,oBACA,eAAC0D,EAAA,EAAD,CAAU1D,MAAO,IAAjB,0BAGN,gBAACsD,EAAA,EAAD,WACG,eAACC,EAAA,EAAD,CAAY9J,GAAG,2BAAf,uBACA,gBAAC+J,EAAA,EAAD,CACGC,QAAQ,2BACRhK,GAAG,qBACHuG,MAAOjF,EACPuH,SApLc,SAACnC,GAC3BnF,EAAYmF,EAAEM,OAAOT,QA+KZ,UAKG,eAAC0D,EAAA,EAAD,CAAU1D,MAAM,WAAhB,uBACA,eAAC0D,EAAA,EAAD,CAAU1D,MAAM,OAAhB,kBACA,eAAC0D,EAAA,EAAD,CAAU1D,MAAM,MAAhB,mCAGN,eAAC8C,EAAA,EAAD,CACGa,QAAS,eAAC,IAAD,IACTtB,KAAK,QACLzG,QAAsB,aAAbb,EAA0B,CAAE6I,KAAMhI,GAAQgB,cAAiB,CAAEgH,KAAMhI,GAAQmB,YACpFiG,QA3OO,WACC,SAAbjI,EACD8I,IAAKxC,KAAKC,UAAU3G,IAEpBkJ,IAAK9C,OAmOF,kCASW,aAAbhG,EACE,eAAC0G,EAAA,EAAD,CAAOqC,UAAW,EAAGpC,MAAO,CAAEzF,OAAQ,QAAS8H,aAAc,OAAQ3H,YAAa,QAAlF,SACG,eAAC,IAAD,CACG4H,QAAQ,UACRvJ,QAASA,EACTwJ,SAAU,IACVC,uBAAuB,EACvBC,YAAY,EACZxJ,KAAMA,EACNyJ,QAAS1I,OAGD,SAAbX,EACD,eAAC0G,EAAA,EAAD,CACGhI,GAAG,OACHqK,UAAW,EACXpC,MAAO,CACJ2C,SAAU,aACVC,UAAW,YACXC,SAAU,OACVlI,SAAU,QACVmI,UAAW,SARjB,SAtKe,WACrB,IAAMxD,EAAUJ,KAEV6D,EAAmB,GAsCzB,OApCA9J,EAAKmG,SAAQ,SAACI,GACX,IAAMwD,EAAgB,GAEtB1D,EAAQF,SAAQ,SAACM,GACd,OAAQA,GACL,IAAK,KACFsD,EAASjL,GAAKyH,EAAIzH,GAClB,MACH,IAAK,YACFiL,EAAShL,UAAYwH,EAAIxH,UACzB,MACH,IAAK,UACFgL,EAAS9K,QAAUsH,EAAItH,QACvB,MACH,IAAK,gBACF8K,EAAS/K,cAAgBuH,EAAIvH,cAC7B,MACH,IAAK,SACF+K,EAAS7K,OAASqH,EAAIrH,OACtB,MACH,IAAK,KACF6K,EAAS5K,GAAKoH,EAAIpH,GAClB,MACH,IAAK,WACF4K,EAAS1K,SAAWkH,EAAIlH,SACxB,MACH,IAAK,MACF0K,EAAS3K,IAAMmH,EAAInH,QAM5B0K,EAAU3E,KAAK4E,MAGXrD,KAAKC,UAAUmD,GAuIZE,KAGJ,eAAClD,EAAA,EAAD,CACGhI,GAAG,OACHqK,UAAW,EACXpC,MAAO,CAAErF,SAAU,QAASmI,UAAW,QAASI,WAAY,eAAgBL,SAAU,QAHzF,SAIG,+BAAMxD,aAQrB,SAAU9H,GAAE4B,GAAZ,6EAGG,IAFMgK,EAAkC,GAEjCA,EAAsBhF,OAAShF,GAC7BiK,EAAI7G,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,YAAc,KACpB,IAAtC2G,EAAsBE,QAAQD,IAC/BD,EAAsB/E,KAAKgF,GAGxBE,EAAI,EAThB,YASmBA,EAAInK,GATvB,iBAWM,OADMoK,EAAaJ,EAAsBG,GAAGE,WAVlD,SAWM,UAASD,EAAGE,OAAO,EAAG,GAAtB,YAA4BF,EAAGE,OAAO,EAAG,GAAzC,YAA+CF,EAAGE,OAAO,EAAG,IAXlE,OASiCH,GAAK,EATtC,wDAeA,IAAM3H,GAAa,uCAAG,WAAOC,GAAP,eAAAF,EAAA,sEACWgI,MAAM9H,EAAK,CAAE+H,OAAQ,QAC/CC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAGJ,OAF2BA,KAI7BC,OAAM,SAACC,GAGL,MADA/H,QAAQgI,MAAR,0BAAiCD,IAC3BA,KAXO,cACbb,EADa,yBAaZA,GAbY,2CAAH,sDAgBbtH,GAAY,uCAAG,WAAOF,GAAP,eAAAF,EAAA,sEACWgI,MAAM9H,EAAK,CAAE+H,OAAQ,QAC9CC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAGJ,OAF0BA,KAI5BC,OAAM,SAACC,GAGL,MADA/H,QAAQgI,MAAR,0BAAiCD,IAC3BA,KAXM,cACZb,EADY,yBAaXA,GAbW,2CAAH,sD,iEClhBZe,GAAwB,CAAC,UAAW,QAAS,SAAU,iBAAkB,OAAQ,QAAS,WAAY,QAE5G,SAASC,GAAyB3L,GAAa,IACpC4L,EAAiC5L,EAAjC4L,SAAUzD,EAAuBnI,EAAvBmI,SAAa0D,EADY,aACF7L,EADE,yBAG3C,OACG,eAAC,KAAD,2BACO6L,GADP,IAEGC,YAAaF,EACbzD,SAAUA,EACV4D,aAAc,EACdC,mBAAiB,EACjBC,mBAAiB,EACjBC,iBAAe,KAKxB,SAASC,GAAwBnM,GAAa,IACnC4L,EAAiC5L,EAAjC4L,SAAUzD,EAAuBnI,EAAvBmI,SAAa0D,EADW,aACD7L,EADC,yBAG1C,OAAO,eAAC,KAAD,2BAAkB6L,GAAlB,IAAyBC,YAAaF,EAAUzD,SAAUA,EAAU+D,iBAAe,KAe7F,IAwCeE,GAxCS,SAACpM,GAAmB,IAWrCqM,EAVIjN,EAAuBY,EAAvBZ,KAAMyG,EAAiB7F,EAAjB6F,MAAOuC,EAAUpI,EAAVoI,MACrB,OAAKsD,GAAsBY,SAASlN,IAUvB,YAATA,EACDiN,EAAiBV,GACA,UAATvM,IACRiN,EAAiBF,IAGP,aAAT/M,EAEE,eAACkI,EAAA,EAAD,CAAOqC,UAAW,EAAlB,SACG,eAAC5B,EAAA,EAAD,CACGC,QAAS,eAACuE,GAAA,EAAD,2BAAcvM,GAAd,IAAqB6I,QAAS7I,EAAMmI,SAAUtF,MAAM,UAAU0D,QAASV,KAChFuC,MAAOA,MAMhB,eAACd,EAAA,EAAD,CAAOqC,UAAW,EAAGf,QAAQ,YAA7B,SACG,eAACN,EAAA,EAAD,2BACOtI,GADP,IAEG4I,QAxEI,WAyEJ4D,WAAY,CACTH,wBA9BN,eAAC5E,EAAA,EAAD,CAAMgF,QAAQ,SAAd,SACG,gBAACnF,EAAA,EAAD,CAAOsB,QAAQ,WAAf,kBAAgCxJ,EAAhC,4BC7BGsN,GAlBG,uCAAG,gCAAAzJ,EAAA,8DAEC0J,KADfC,EAAaC,eAAeC,QAAQ,gBACO,OAAfF,EAFd,gCAGQ3B,MAAM,GAAD,OAAItM,IAAME,SAAV,UAA4B,CACrDkO,YAAa,YAJD,cAGT3B,EAHS,gBAMIA,EAASC,OANb,OAMTC,EANS,OAOfsB,EAAatB,EAAK0B,UAPH,cAUC,OAAfJ,EACDA,EAAa,WAEbC,eAAeI,QAAQ,aAAcL,GAbtB,kBAgBXA,GAhBW,4CAAH,qDCqBZM,GAAU,QA4HVC,GAAO,I,6DAzHVhK,S,OAEAiK,U,OAEAC,gB,OAUAC,kBAAoB,SAACtH,GAClB,IAAMuH,EAAsB,EAAKF,WAAWvF,KAAI,SAAC7I,GAC9C,IAAMuO,EAAsBvO,EAI5B,OAFAuO,EAAY3H,MAAQG,EAAEsF,KAAKrM,EAAMoH,MAAQL,EAAEsF,KAAKrM,EAAMoH,MAAQ,GAEvDmH,KAEN,EAAKJ,MACN,EAAKA,KAAKG,I,KAIhBE,Q,sBAAU,4BAAAxK,EAAA,sEACmBgI,MAAM,EAAK9H,IAAK,CAAE+H,OAAQ,QAChDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAGJ,OAFuBA,KAIzBC,OAAM,SAACC,GAGL,MADA/H,QAAQgI,MAAR,0BAAiCD,IAC3BA,KAXL,cACDb,EADC,yBAaAA,GAbA,2C,KAgBV+C,W,sBAAa,8BAAAzK,EAAA,sEACyB,EAAK0K,gBAD9B,cACJN,EADI,OAEJrO,EAAiBqO,EAAWvF,KAAI,SAAC8F,GAMpC,MALoB,CACjB3O,MAAO2O,EAAEvH,KACTwH,WAAYD,EAAExF,MACdhJ,KAAMwO,EAAEE,YANJ,kBAUH9O,GAVG,2C,KAab2O,c,sBAAgB,4BAAA1K,EAAA,sEACagI,MAAM,EAAK9H,IAAK,CAAE+H,OAAQ,YAChDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC4C,GACJ,IAAMZ,EAAOY,EAASC,QAAQC,KACxBC,EAAmB,GACzB,IAAK,IAAMC,KAAQhB,EAAM,CACtB,IAAMiB,EAASjB,EAAKgB,GACdE,EAAmB,CACtBhI,KAAM8H,EACNG,UAAWF,EAAOhP,KAClBmP,UAAWH,EAAOhP,KAClBoP,aAAa,EACbV,QAAS,SACTW,SAAUL,EAAOK,SACjBC,SAAUN,EAAOO,UACjBvG,MAAOgG,EAAOhG,MACdjJ,MAAO,IACP0G,MAAO,IAEV,OAAQuI,EAAOhP,MACZ,IAAK,UACFiP,EAASE,UAAY,SACrBF,EAASP,QAAU,SACnB,MACH,IAAK,UAGL,IAAK,QACFO,EAASP,QAAU,SACnB,MACH,IAAK,UACFO,EAASE,UAAY,WACrBF,EAASxI,OAAQ,EACjB,MACH,IAAK,WACFwI,EAASE,UAAY,iBACrBF,EAASP,QAAU,WACnBO,EAASlP,MAAQ,IACjB,MACH,IAAK,OACFkP,EAASlP,MAAQ,IACjB,MACH,IAAK,SACFkP,EAASE,UAAY,OACrB,MACH,IAAK,QACFF,EAASP,QAAU,SACnB,MACH,IAAK,cACFO,EAASlP,MAAQ,IACjBkP,EAASP,QAAU,SAMzBI,EAAOvI,KAAK0I,GAEf,OAAOH,KA3DA,cACPN,EADO,OA6Db,EAAKP,WAAaO,EA7DL,kBA8DNA,GA9DM,2C,2CAlDhB,SAAOzK,GACJyL,KAAKzL,IAAMA,I,qBAGd,SAAQiK,GACLwB,KAAKxB,KAAOA,M,MAuHLyB,GAAe,SAAC7O,GAC1B,IAAM8O,EAAqB,GADwB,EAG3B7O,mBAAS6O,GAHkB,mBAG5CvN,EAH4C,KAGtCC,EAHsC,OAI3BvB,mBAFI,IAFuB,mBAI5CO,EAJ4C,KAItCC,EAJsC,KAsBnD,OAjBA0M,GAAK4B,OAAO/O,EAAMmD,KAElBH,qBAAU,WACHzB,IAASuN,IACN9O,EAAMuB,KACPC,EAAQxB,EAAMuB,MAEd4L,GAAKO,aAAavC,MAAK,SAACjF,GACrB1E,EAAQ0E,MAGdiH,GAAKM,UAAUtC,MAAK,SAACR,GAClBlK,EAAQkK,SAGd,IAGA,eAAC,IAAD,CACGd,QAAQ,UACRG,YAAU,EACVF,SAAU,GACVtJ,KAAMA,EACNyJ,QAAS1I,EACTyN,cAAe7B,GAAKG,qBAShB2B,GAAW,SAACjP,GACtB,IAAM+C,EAAYrB,aAAW,kBAC1BE,YAAa,CACVsN,SAAU,CACPC,aAAc,iBAKjBC,EAAsB,GATY,EAWJnP,mBAAmBmP,GAXf,mBAWjC/B,EAXiC,KAWrBgC,EAXqB,OAYVpP,mBAAS,IAZC,mBAYjCqP,EAZiC,KAYxBC,EAZwB,OAahBtP,mBAHP,CAAEuP,IAAI,EAAOC,WAAY,GAAItM,IAAK,KAVX,mBAajCuM,EAbiC,KAa3BC,EAb2B,KAclClO,EAAUsB,IAChBoK,GAAK4B,OAAO/O,EAAMmD,KAClBgK,GAAKyC,QAAQP,GAEbrM,qBAAU,WACHqK,IAAe+B,GAChBjC,GACIQ,gBACAxC,MAAK,SAACjF,GACJmJ,EAAcnJ,MAEhBqF,OAAM,kBAIhB,IAAMsE,EAAe,SAACC,GAAe,IAG5BjK,EAAUiK,EAAMxJ,OAAhBT,MAH4B,EAIJiK,EAAMxJ,OAA5BlH,EAJ0B,EAI1BA,KAAME,EAJoB,EAIpBA,GAAIiH,EAJgB,EAIhBA,QACZ5B,EAAQ4D,SAASjJ,EAAI,IAE3B+P,GAAc,SAACpJ,GAEZ,OAAOA,EAAK6B,KAAI,SAACF,EAAMiD,GACpB,OAAIA,IAAMlG,EACAiD,GAIG,aAATxI,IACDyG,EAAQU,GAIJ,2BACDqB,GADN,IAEG/B,kBAMNkK,EAAY,uCAAG,WAAOD,GAAP,+BAAA7M,EAAA,yDAClB6M,EAAME,iBAEAC,EAAgB5C,EAClBtE,QAAO,SAAC9J,GAAD,OAAWA,EAAM4G,OAAS5G,EAAMyP,YACvC5G,KAAI,SAAC7I,GACH,MAAO,CACJoH,KAAMpH,EAAMoH,KACZR,MAAO5G,EAAM4G,UAIlBqK,EAAa,GACXC,EAAWF,EAAcvK,OAAS,KAGrCwK,EAAKD,EAAc,GAAGpK,OAyBzBuK,GAtBIA,EAAc/C,EACdtE,QAAO,SAAC9J,GAAD,OAAYA,EAAMyP,YACzB5G,KAAI,SAAC7I,GACH,IAAMoR,EAAW,CACdhK,KAAMpH,EAAMoH,KACZR,MAAO5G,EAAM4G,OAchB,MAZwB,YAApB5G,EAAMsP,WAA2BtP,EAAM4G,QACxCwK,EAASxK,MAAQwK,EAASxK,MAAMyK,WAAW,IAAK,IAChDD,EAASxK,MAAQwK,EAASxK,MAAMyK,WAAW,IAAK,IAChDD,EAASxK,MAAQwK,EAASxK,MAAMyK,WAAW,IAAK,IAChDD,EAASxK,MAAQ0K,WAAWF,EAASxK,QAEhB,WAApB5G,EAAMsP,WAA0BtP,EAAM4G,QACvCwK,EAASxK,MAAQ0C,SAAS8H,EAASxK,MAAO,KAEtB,KAAnBwK,EAASxK,QACVwK,EAASxK,MAAQ,MAEbwK,MAGajJ,OAAO6I,IAEjBO,IA3CE,wBA6CTlF,EAAO8E,EAAYK,QAAO,SAACC,EAAKC,GAAN,mBAAC,eAAmBD,GAApB,kBAA0BC,EAAItK,KAAOsK,EAAI9K,UAAU,IACnF0J,EAAWrI,KAAKC,UAAUmE,IAEtBnI,EAhDW,UAgDFxE,IAAME,SAAWqO,IAC1BhC,EAAS,OAETiF,IACDhN,EAAG,UAAMxE,IAAME,SAAWqO,GAAvB,kBAAwCgD,GAC3ChF,EAAS,OArDG,KAyDZA,EAzDY,UA0DwDwB,KA1DxD,iCA0DD,eAAgB,mBAAoB,cA1DnC,WA2DNxF,KAAKC,UAAUmE,GAHlBsF,EAxDS,CAyDZ1F,OAzDY,KA0DZrE,QA1DY,KA2DZgK,KA3DY,gBA8DQ5F,MAAM9H,EAAKyN,GA9DnB,QA8DTxF,EA9DS,OAgEfuE,EAAQvE,GAhEO,4CAAH,sDAoEZoF,EAAW,WACd,OAAO,GAGV,OACG,eAAClJ,EAAA,EAAD,UACG,wBAAMwJ,SAAUf,EAAhB,UACI1C,EAAWvF,KAAI,SAACF,EAAMjD,GAAP,OACb,+BACIiD,EAAK8G,SACH,eAACpH,EAAA,EAAD,CAAOsB,QAAQ,WAAf,SACG,0CAAUhB,EAAKvB,KAAf,cAAyBuB,EAAK/B,WAGjC,eAAC,GAAD,CACGuC,MAAOR,EAAKQ,MACZhJ,KAAMwI,EAAK2G,UACXwC,WAAW,EACXlL,MAAO+B,EAAK/B,MACZ4I,SAAU7G,EAAK6G,SACftG,SAAU0H,EACVvQ,GAAIqF,EAAMoG,WACV1E,KAAMuB,EAAKvB,KACX2K,gBAAiB,CACdC,OAAQrJ,EAAK4G,gBAhBf5G,EAAKvB,SAuBlB,eAACsC,EAAA,EAAD,CAAQC,QAAQ,YAAY/F,MAAM,UAAUzD,KAAK,SAAjD,oBAIA,eAAC8R,GAAA,EAAD,UACG,gBAACC,GAAA,EAAD,WACG,eAACrI,EAAA,EAAD,CAAYjG,MAAM,cAAcuO,cAAY,EAA5C,wBAGA,eAACtI,EAAA,EAAD,CAAYF,QAAQ,QAAQM,UAAU,IAAIkI,cAAY,EAACnI,UAAWxH,EAAQyN,SAA1E,SACII,IAEJ,eAACxG,EAAA,EAAD,CAAYjG,MAAM,cAAcuO,cAAY,EAA5C,uBAGA,eAACtI,EAAA,EAAD,iCAA6B4G,EAAKD,cAClC,eAAC3G,EAAA,EAAD,yBAAqB4G,EAAKvM,kBC7T7BkO,GAxCE,WACd,IAuBM5P,EAvBYC,aAAW,SAACC,GAAD,OAC1BC,YAAa,CACV6H,KAAM,CACHjC,QAAS,QAEZ8J,KAAM,CACH1H,aAAcjI,EAAMK,QAAQ,GAC5BuP,YAAa5P,EAAMK,QAAQ,GAC3BM,SAAU,SAEbgJ,KAAM,CACH1B,aAAcjI,EAAMK,QAAQ,GAC5BwP,UAAW,QAEX3O,MAAOlB,EAAM8P,QAAQC,KAAKC,WAE7BC,UAAW,CACRhI,aAAcjI,EAAMK,QAAQ,GAC5BwP,UAAW,QACXK,WAAYlQ,EAAM8P,QAAQC,KAAKI,UAIxB/O,GAChB,OACG,sBAAKkG,UAAWxH,EAAQgI,KAAxB,SACG,gBAAChC,EAAA,EAAD,CAAMC,WAAS,EAAC1F,QAAS,EAAzB,UACG,eAACyF,EAAA,EAAD,CAAMsK,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGhJ,UAAWxH,EAAQ6P,KAA/C,SACG,eAAC,GAAD,CAAUnO,IAAG,UAAKxE,IAAME,SAAX,aAEhB,eAAC4I,EAAA,EAAD,CAAMsK,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGjJ,UAAWxH,EAAQ6J,KAAtD,SACG,eAAChE,EAAA,EAAD,CAAO2B,UAAWxH,EAAQmQ,UAA1B,SACG,eAAC,GAAD,CAAczO,IAAG,UAAKxE,IAAME,SAAX,qBCnBpB,SAASsT,KAAoB,ICgDfxQ,EAAcyQ,EDhDA,EACLC,IAAMpS,SAAS,QADV,mBACjCqS,EADiC,KACtBC,EADsB,KAElCC,ECNoB,SAACF,GAC3B,IAsBMG,EAA8B,CACjChB,QAAS,CACNrS,KAAM,QACNsT,QAASC,IACTd,WAAY,CACTe,QAAS,UACTC,MAAO,WAEVC,YAAa,CACVC,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,aAAc,QAEjBC,WAAY,CACTJ,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,aAAc,UAKjBE,EAAwB,UAAdd,EAAwBG,EA7CL,CAChChB,QAAS,CACNrS,KAAM,OACNyS,WAAY,CACTgB,MAAO,UACPD,QAAS,WAEZE,YAAa,CACVC,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,aAAc,QAEjBC,WAAY,CACTJ,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,aAAc,UA6BvB,OAAOG,YAAe,eAChBD,ID1CeE,CAAchB,GAC7BiB,GC6CoB5R,ED7CI6Q,EC6CUJ,EDlDvB,ICmDVxQ,YAAa,CACjB6H,KAAM,CACHtH,QAAS,QAEZqR,OAAO,eACH7R,EAAM8R,YAAYC,GAAG,MAAQ,CAC3BvU,MAAOiT,EACPuB,WAAY,IAGlBC,OAAO,eACHjS,EAAM8R,YAAYC,GAAG,MAAQ,CAC3BvU,MAAM,eAAD,OAAiBiT,EAAjB,OACL7P,WAAY6P,IAIlByB,QAAQ,aACLC,SAAU,QACVC,OAAQ,IACRjS,OAAQ,OACRG,YAAaN,EAAMK,QAAQ,GAC3B6P,WAAY,UACZ1S,MAAO,QACNwC,EAAM8R,YAAYC,GAAG,MAAQ,CAC3BvU,MAAM,eAAD,OAAiBiT,EAAjB,OACL7P,WAAY6P,IAGlB4B,WAAW,aACRzC,YAAa5P,EAAMK,QAAQ,IAC1BL,EAAM8R,YAAYC,GAAG,MAAQ,CAC3BvR,QAAS,SAGf8R,WAAY,CACT1C,YAAa5P,EAAMK,QAAQ,GAC3B8R,SAAU,WACVI,MAAO,GAGVC,QAASxS,EAAMyS,OAAOD,QAEtBE,YAAa,CACVlV,MAAOiT,EACPP,WAAYlQ,EAAM8P,QAAQI,WAAWe,SAExCI,KAAM,CACHnB,WAAY,WAEfyC,QAAS,CACNC,SAAU,EACV/M,QAAS7F,EAAMK,QAAQ,ODhGvBP,EADYC,aAAW,kBAAME,YAAa2R,KAChCxQ,GALwB,EAMJsP,IAAMpS,UAAS,GANX,mBAMjCuU,EANiC,KAMrBC,EANqB,OAOVpC,IAAMpS,SAAS,YAPL,mBAOjCyU,EAPiC,KAOxBC,EAPwB,KASxCC,SAAS/D,KAAKtJ,MAAMsN,gBAAkBrC,EAAaf,QAAQI,WAAWgB,MAEtE,IAAMiC,EAAqB,WACxBL,GAAeD,IAGZO,EAAoB,SAACjF,EAAYkF,GACpCzC,EAAcyC,IAQXxB,EACH,iCACG,eAACyB,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,UACI,CAAC,WAAY,WAAY,UAAUpN,KAAI,SAAC4J,GAAD,OACrC,eAACyD,EAAA,EAAD,CAAUtM,QAAS,SAACiH,GAAD,OAT5B6E,EASkEjD,QARlE+C,GAAc,IAQ2DW,QAAM,EAAtE,SACG,eAACC,EAAA,EAAD,CAAc3C,QAAShB,KADkDA,WAQxF,OACG,gBAAC4D,EAAA,EAAD,CAAe3T,MAAO6Q,EAAtB,UACG,gBAAClL,EAAA,EAAD,CAAO2B,UAAWxH,EAAQgI,KAA1B,UACG,eAAC8L,EAAA,EAAD,CAAQzB,SAAS,QAAQ7K,UAAWxH,EAAQmS,OAA5C,SACG,gBAAC4B,EAAA,EAAD,WACG,eAACC,EAAA,EAAD,CACG5S,MAAM,UACN6S,aAAW,cACXC,KAAK,QACL9M,QAASiM,EACT7L,UAAWxH,EAAQuS,WALtB,SAMG,eAAC,IAAD,MAEY,UAAd1B,EACE,eAACmD,EAAA,EAAD,CACGxM,UAAWxH,EAAQwS,WACnBpR,MAAM,UACN6S,aAAW,aACXC,KAAK,QACL9M,QAAS,SAACiH,GAAD,OAAWiF,EAAkBjF,EAAO,SALhD,SAMG,eAAC,IAAD,MAEF,KACW,SAAdwC,EACE,eAACmD,EAAA,EAAD,CACGxM,UAAWxH,EAAQwS,WACnBpR,MAAM,UACN6S,aAAW,cACXC,KAAK,QACL9M,QAAS,SAACiH,GAAD,OAAWiF,EAAkBjF,EAAO,UALhD,SAMG,eAAC,IAAD,MAEF,KACJ,eAAChH,EAAA,EAAD,CAAYF,QAAQ,KAAKgN,QAAM,EAA/B,6BAKN,uBAAK3M,UAAWxH,EAAQ+R,OAAQkC,aAAW,kBAA3C,UAEG,eAACG,EAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,MAA5B,SACG,eAACC,EAAA,EAAD,CACGpN,QAAQ,YACRqN,OAAmC,QAA3BzD,EAAa7K,UAAsB,QAAU,OACrDuO,KAAM1B,EACN2B,QAASrB,EACTrT,QAAS,CACNoR,MAAOpR,EAAQ4S,aAElB+B,WAAY,CACTC,aAAa,GATnB,SAWI7C,MAGP,eAACqC,EAAA,EAAD,CAAQS,QAAM,EAACP,eAAe,MAA9B,SACG,eAACC,EAAA,EAAD,CACGvU,QAAS,CACNoR,MAAOpR,EAAQ4S,aAElBzL,QAAQ,YACRsN,MAAI,EALP,SAMI1C,YAKb,uBAAKvK,UAAWxH,EAAQmS,OAAxB,UACG,sBAAK3K,UAAWxH,EAAQ0S,UAEX,aAAZO,EACE,eAACpN,EAAA,EAAD,UACG,eAACwB,EAAA,EAAD,CAAYI,UAAU,KAAtB,wBAEF,KACS,aAAZwL,EAAyB,eAAC,GAAD,IAAe,KAC5B,WAAZA,EAAuB,eAAC,GAAD,CAAcvR,IAAG,UAAKxE,IAAME,SAAX,WAAiC,QAE7E,eAACoW,EAAA,EAAD,IACA,sBAAKhM,UAAWxH,EAAQoS,QAAxB,SACG,eAAC/K,EAAA,EAAD,CAAYyN,MAAM,SAAlB,wB,OEtIZC,IAASC,OACN,eAAC,IAAMC,WAAP,UACG,eAACpP,EAAA,EAAD,UACG,eAAC,GAAD,QAGNsN,SAAS+B,eAAe,W","file":"static/js/main.47193ed2.chunk.js","sourcesContent":["const env = () => {\r\n   const d = { API_HOST: 'http://dbhausen.pythonanywhere.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://dbhausen.pythonanywhere.com'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","/* eslint-disable no-nested-ternary */\r\n/* eslint-disable no-console */\r\nimport {\r\n   Button,\r\n   createStyles,\r\n   FormControl,\r\n   FormControlLabel,\r\n   FormGroup,\r\n   Grid,\r\n   InputLabel,\r\n   makeStyles,\r\n   MenuItem,\r\n   Paper,\r\n   Select,\r\n   Switch,\r\n   TextField,\r\n   Theme,\r\n   Tooltip,\r\n   Typography,\r\n} from '@material-ui/core'\r\nimport { purple } from '@material-ui/core/colors'\r\nimport { Columns, DataGrid } from '@material-ui/data-grid'\r\nimport CreateSharpIcon from '@material-ui/icons/CreateSharp'\r\nimport copy from 'clipboard-copy'\r\nimport dayjs from 'dayjs'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst genderNames: string[] = [\r\n   'Not disclosed',\r\n   'Man',\r\n   'Woman',\r\n   'Transgender',\r\n   'Genderqueer',\r\n   'Agender',\r\n   'Genderless',\r\n   'Non-binary',\r\n   'Cis Man',\r\n   'Cis Woman',\r\n   'Trans Man',\r\n   'Trans Woman',\r\n   'Third Gender',\r\n   'Two-Spirit',\r\n   'Bigender',\r\n   'Genderfluid',\r\n   'Undecided',\r\n]\r\n\r\nconst _cols: Columns = [\r\n   //  { field: 'id' },\r\n   { field: 'givenName', hide: false },\r\n   { field: 'middleInitial', hide: false },\r\n   { field: 'surName', hide: false },\r\n   { field: 'gender', width: 150, hide: false },\r\n   { field: 'ss', width: 150, hide: false },\r\n   { field: 'age', type: 'number', width: 90, hide: false },\r\n   { field: 'hireDate', type: 'date', width: 250, hide: false },\r\n]\r\nconst _rows: TRow[] = [\r\n   //  { field: 'id' },\r\n   { id: 0, givenName: '', middleInitial: '', surName: '', gender: '', ss: '', age: 0, hireDate: new Date() },\r\n]\r\n\r\ntype TFirstName = {\r\n   givenName: string\r\n   gender: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TLastName = {\r\n   surName: string\r\n   minRange: number\r\n   maxRange: number\r\n}\r\ntype TRow = {\r\n   id: number\r\n   givenName: string\r\n   middleInitial: string\r\n   surName: string\r\n   gender: string\r\n   ss: string\r\n   age: number\r\n   hireDate: Date\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nconst RandomNames = (props: IProps) => {\r\n   const [firstNamelist, setFirstNamelist] = useState<TFirstName[]>()\r\n   const [lastNameList, setLastNameList] = useState<TLastName[]>()\r\n   const [loading, setLoading] = useState(true)\r\n   const [rows, setRows] = useState<TRow[]>(_rows)\r\n   const [rowCount, setRowCount] = useState(100)\r\n   const [outputAs, setOutputAs] = useState('DataGrid')\r\n   const [maxAge, setMaxAge] = useState<number>(65)\r\n   const [minAge, setMinAge] = useState<number>(20)\r\n   const [inclusiveGender, setInclusiveGender] = useState(true)\r\n   const typeMap = new Map()\r\n\r\n   typeMap.set('id', { type: 'number' })\r\n   typeMap.set('givenName', { type: 'string' })\r\n   typeMap.set('middleInitial', { type: 'string' })\r\n   typeMap.set('surName', { type: 'string' })\r\n   typeMap.set('gender', { type: 'string' })\r\n   typeMap.set('ss', { type: 'string' })\r\n   typeMap.set('age', { type: 'number' })\r\n   typeMap.set('hireDate', { type: 'Date' })\r\n\r\n   // eslint-disable-next-line no-unused-vars\r\n   const [cols, setCols] = useState<Columns>(_cols)\r\n   //   const uniqueRandNumberArray: number[] = []\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         menubox: {\r\n            height: '50px',\r\n            paddingTop: theme.spacing(3),\r\n            paddingLeft: theme.spacing(3),\r\n            maxWidth: '800px',\r\n            display: 'flex',\r\n            justifyContent: 'flex-start',\r\n            alignItems: 'flex-end',\r\n            '& .MuiSelect-selectMenu': {\r\n               minWidth: '80px',\r\n               marginLeft: '10px',\r\n            },\r\n         },\r\n         box: {\r\n            height: '30px',\r\n            maxWidth: '700px',\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            alignItems: 'flex-end',\r\n         },\r\n         hiddenbutton: {\r\n            display: 'none',\r\n         },\r\n         csv: {\r\n            overflowY: 'scroll',\r\n         },\r\n         showbutton: {\r\n            display: 'flex',\r\n         },\r\n         '.MuiDataGrid-root': {\r\n            color: purple[900],\r\n         },\r\n      })\r\n   )\r\n\r\n   const classes = useStyles()\r\n\r\n   useEffect(() => {\r\n      const fetchNames = async () => {\r\n         const fnl = await getFirstnames(`${props.url}firstname/`)\r\n         setFirstNamelist(fnl)\r\n         const lnl = await getLastnames(`${props.url}lastname/`)\r\n         setLastNameList(lnl)\r\n         calculate(rowCount, fnl, lnl)\r\n      }\r\n\r\n      fetchNames()\r\n\r\n      return () => {\r\n         console.log('to do: cleanup useEffect if needed')\r\n      }\r\n   }, [])\r\n\r\n   const callCalculate = () => {\r\n      if (rowCount && firstNamelist && lastNameList) {\r\n         calculate(rowCount, firstNamelist, lastNameList)\r\n      }\r\n   }\r\n\r\n   const calculate = (_rowCount: number, fnl: TFirstName[], lnl: TLastName[]) => {\r\n      setRows([])\r\n      setLoading(true)\r\n\r\n      const getRandomInt = (max: number): number => {\r\n         return Math.floor(Math.random() * Math.floor(max))\r\n      }\r\n\r\n      const randNormal = (min: number, max: number): number => {\r\n         let u = 0\r\n         let v = 0\r\n         while (u === 0) u = Math.random()\r\n         while (v === 0) v = Math.random()\r\n         let num = Math.sqrt(-8.0 * Math.log(u)) * Math.cos(8.0 * Math.PI * v)\r\n         num = num / 10.0 + 0.5 // Translate to 0 -> 1\r\n         if (num > 1 || num < 0) return randNormal(min, max) // resample between 0 and 1\r\n         return num * (max - min) + min\r\n      }\r\n\r\n      const _r: TRow[] = []\r\n      const ssGenerator: IterableIterator<string> = g(_rowCount)\r\n      for (let index = 0; index < _rowCount; index += 1) {\r\n         const minFirstRange = getRandomInt(192908123)\r\n         const minLastRange = getRandomInt(154575750)\r\n         const middleInitial = String.fromCharCode(getRandomInt(22) + 65)\r\n         const age = Math.floor(randNormal(minAge, maxAge))\r\n         let hireDate = dayjs()\r\n         const daysOnJob = getRandomInt(age - minAge) * 0.65 * 365 + getRandomInt(365)\r\n         hireDate = hireDate.subtract(Math.floor(daysOnJob), 'days')\r\n         const firstName = fnl.find((element) => element.maxRange >= minFirstRange)\r\n         const lastName = lnl.find((element) => element.maxRange >= minLastRange)\r\n         let genderName = firstName?.gender === 'Male' ? 'Male' : 'Female'\r\n         if (inclusiveGender) {\r\n            genderName = genderName === 'Male' ? 'Man' : 'Woman'\r\n         }\r\n         const genderIndex = getRandomInt(1600)\r\n         if (genderIndex < genderNames.length && inclusiveGender) {\r\n            genderName = genderNames[genderIndex]\r\n         }\r\n\r\n         _r.push({\r\n            id: index,\r\n            givenName: firstName?.givenName || '',\r\n            middleInitial,\r\n            surName: lastName?.surName || '',\r\n            gender: genderName,\r\n            ss: ssGenerator.next().value,\r\n            age,\r\n            hireDate: hireDate.toDate(),\r\n         })\r\n      }\r\n\r\n      setRows(_r)\r\n      setLoading(false)\r\n   }\r\n\r\n   const copyToClip = () => {\r\n      if (outputAs === 'JSON') {\r\n         copy(JSON.stringify(rows))\r\n      } else {\r\n         copy(jsonToCsv())\r\n      }\r\n   }\r\n\r\n   // eslint-disable-next-line no-unused-vars\r\n   const handleSwitchChange = (e: React.ChangeEvent<{ checked: boolean; name: string }>) => {\r\n      setCols((prev) => {\r\n         const c = prev.find((col) => col.field === e.currentTarget.name)\r\n         if (c) {\r\n            c.hide = !e.target.checked\r\n         }\r\n         const _newCols: Columns = [\r\n            //  { field: 'id' },\r\n            { field: 'givenName', hide: false },\r\n            { field: 'middleInitial', hide: false },\r\n            { field: 'surName', hide: false },\r\n            { field: 'gender', width: 150, hide: false },\r\n            { field: 'ss', width: 150, hide: false },\r\n            { field: 'age', type: 'number', width: 90, hide: false },\r\n            { field: 'hireDate', type: 'date', width: 250, hide: false },\r\n         ]\r\n\r\n         for (let index = 0; index < _newCols.length; index += 1) {\r\n            _newCols[index].hide = prev[index].hide\r\n         }\r\n\r\n         return _newCols\r\n      })\r\n   }\r\n\r\n   const handleInclusiveGenderChange = (e: any) => {\r\n      setInclusiveGender(e.target.checked)\r\n   }\r\n\r\n   const handleRowCountChange = (e: React.ChangeEvent<{ value: number }>) => {\r\n      setRowCount(e.target.value)\r\n      if (firstNamelist && lastNameList) {\r\n         calculate(e.target.value, firstNamelist, lastNameList)\r\n      }\r\n   }\r\n\r\n   const handleOutputAsChange = (e: React.ChangeEvent<{ value: string }>) => {\r\n      setOutputAs(e.target.value)\r\n   }\r\n\r\n   const handleMinAgeChange = (e: any) => {\r\n      setMinAge(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const handleMaxAgeChange = (e: any) => {\r\n      setMaxAge(parseInt(e.target.value, 10))\r\n   }\r\n\r\n   const getVisibleColNames = (): string[] => {\r\n      const visableColNames: string[] = []\r\n      cols.forEach((col) => {\r\n         if (!col.hide) {\r\n            visableColNames.push(col.field)\r\n         }\r\n      })\r\n      return visableColNames\r\n   }\r\n\r\n   const jsonToCsv = (): string => {\r\n      if (!rows) {\r\n         return ''\r\n      }\r\n      const headers = getVisibleColNames()\r\n      const replacer = (value: any) => {\r\n         return value === null ? '' : value\r\n      }\r\n      let result = ''\r\n      rows.forEach((row: { [index: string]: any }) => {\r\n         const values: any = []\r\n         headers.forEach((header) => {\r\n            values.push(JSON.stringify(replacer(row[header])))\r\n         })\r\n         result = result.concat(values.join(',').concat('\\n'))\r\n      })\r\n\r\n      return result\r\n   }\r\n\r\n   const jsonToShortJson = (): string => {\r\n      const headers = getVisibleColNames()\r\n\r\n      const shortRows: any[] = []\r\n\r\n      rows.forEach((row) => {\r\n         const shortRow: any = {}\r\n\r\n         headers.forEach((header) => {\r\n            switch (header) {\r\n               case 'id':\r\n                  shortRow.id = row.id\r\n                  break\r\n               case 'givenName':\r\n                  shortRow.givenName = row.givenName\r\n                  break\r\n               case 'surName':\r\n                  shortRow.surName = row.surName\r\n                  break\r\n               case 'middleInitial':\r\n                  shortRow.middleInitial = row.middleInitial\r\n                  break\r\n               case 'gender':\r\n                  shortRow.gender = row.gender\r\n                  break\r\n               case 'ss':\r\n                  shortRow.ss = row.ss\r\n                  break\r\n               case 'hireDate':\r\n                  shortRow.hireDate = row.hireDate\r\n                  break\r\n               case 'age':\r\n                  shortRow.age = row.age\r\n                  break\r\n               default:\r\n                  break\r\n            }\r\n         })\r\n         shortRows.push(shortRow)\r\n      })\r\n\r\n      return JSON.stringify(shortRows)\r\n   }\r\n\r\n   return (\r\n      <Paper style={{ padding: '8px' }}>\r\n         <Grid container direction=\"row\" spacing={3}>\r\n            <Grid item>\r\n               <FormGroup>\r\n                  {cols.map((col) => (\r\n                     <FormControlLabel\r\n                        control={\r\n                           <Switch\r\n                              size=\"small\"\r\n                              checked={!col.hide}\r\n                              onChange={handleSwitchChange}\r\n                              name={col.field}\r\n                              color=\"primary\"\r\n                           />\r\n                        }\r\n                        label={col.field}\r\n                     />\r\n                  ))}\r\n               </FormGroup>\r\n            </Grid>\r\n            <Grid item>\r\n               <Paper style={{ padding: '10px', margin: '10px' }}>\r\n                  <FormGroup>\r\n                     <FormControlLabel\r\n                        control={\r\n                           <Switch\r\n                              size=\"small\"\r\n                              onChange={handleInclusiveGenderChange}\r\n                              checked={inclusiveGender}\r\n                              value={inclusiveGender}\r\n                              color=\"primary\"\r\n                           />\r\n                        }\r\n                        label=\"Use inclusive gender roles\"\r\n                     />\r\n                     <FormControlLabel\r\n                        control={\r\n                           <TextField onChange={handleMaxAgeChange} value={maxAge} type=\"number\" color=\"primary\" />\r\n                        }\r\n                        label=\"Maximum age\"\r\n                     />\r\n                     <FormControlLabel\r\n                        control={\r\n                           <TextField onChange={handleMinAgeChange} value={minAge} type=\"number\" color=\"primary\" />\r\n                        }\r\n                        label=\"Minimum age when hired\"\r\n                     />\r\n                     <Tooltip title=\"Use preferences to generate a new set of employees\" placement=\"bottom-start\">\r\n                        <Button color=\"primary\" variant=\"contained\" onClick={() => callCalculate()}>\r\n                           Refresh\r\n                        </Button>\r\n                     </Tooltip>\r\n                  </FormGroup>\r\n               </Paper>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n               <Paper style={{ padding: '10px', margin: '10px' }}>\r\n                  <Typography>\r\n                     <pre>\r\n                        {'type TEmployee = {'}\r\n                        {cols\r\n                           .filter((col) => !col.hide)\r\n                           .map((col) => (\r\n                              <div>{`   ${col.field}: ${typeMap.get(col.field).type}`}</div>\r\n                           ))}\r\n                        {'}'}\r\n                     </pre>\r\n                  </Typography>\r\n               </Paper>\r\n            </Grid>\r\n         </Grid>\r\n\r\n         <Paper className={classes.menubox} component=\"span\">\r\n            <FormControl>\r\n               <InputLabel id=\"demo-simple-select-label\">Count</InputLabel>\r\n               <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={rowCount}\r\n                  onChange={handleRowCountChange}>\r\n                  <MenuItem value={100}>100</MenuItem>\r\n                  <MenuItem value={1000}>1,000</MenuItem>\r\n                  <MenuItem value={10000}>10,000</MenuItem>\r\n                  <MenuItem value={50000}>50,000</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n            <FormControl>\r\n               <InputLabel id=\"demo-simple-select-label\">Output as</InputLabel>\r\n               <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  value={outputAs}\r\n                  onChange={handleOutputAsChange}>\r\n                  <MenuItem value=\"DataGrid\">Data Grid</MenuItem>\r\n                  <MenuItem value=\"JSON\">JSON</MenuItem>\r\n                  <MenuItem value=\"csv\">Comma Separated</MenuItem>\r\n               </Select>\r\n            </FormControl>\r\n            <Button\r\n               endIcon={<CreateSharpIcon />}\r\n               size=\"small\"\r\n               classes={outputAs === 'DataGrid' ? { root: classes.hiddenbutton } : { root: classes.showbutton }}\r\n               onClick={copyToClip}>\r\n               Copy to clipboard\r\n            </Button>\r\n         </Paper>\r\n\r\n         {outputAs === 'DataGrid' ? (\r\n            <Paper elevation={0} style={{ height: '400px', marginBottom: '20px', paddingLeft: '20px' }}>\r\n               <DataGrid\r\n                  density=\"compact\"\r\n                  loading={loading}\r\n                  pageSize={500}\r\n                  disableColumnSelector={true}\r\n                  autoHeight={false}\r\n                  rows={rows}\r\n                  columns={cols}\r\n               />\r\n            </Paper>\r\n         ) : outputAs === 'JSON' ? (\r\n            <Paper\r\n               id=\"json\"\r\n               elevation={9}\r\n               style={{\r\n                  wordWrap: 'break-word',\r\n                  wordBreak: 'break-all',\r\n                  overflow: 'auto',\r\n                  maxWidth: '700px',\r\n                  maxHeight: '400px',\r\n               }}>\r\n               {jsonToShortJson()}\r\n            </Paper>\r\n         ) : (\r\n            <Paper\r\n               id=\"json\"\r\n               elevation={9}\r\n               style={{ maxWidth: '700px', maxHeight: '400px', whiteSpace: 'break-spaces', overflow: 'auto' }}>\r\n               <pre>{jsonToCsv()}</pre>\r\n            </Paper>\r\n         )}\r\n      </Paper>\r\n   )\r\n}\r\nexport default RandomNames\r\n\r\nfunction* g(rowCount: number): IterableIterator<string> {\r\n   const uniqueRandNumberArray: number[] = []\r\n\r\n   while (uniqueRandNumberArray.length < rowCount) {\r\n      const r = Math.floor(Math.random() * Math.floor(899999999)) + 100000000\r\n      if (uniqueRandNumberArray.indexOf(r) === -1) {\r\n         uniqueRandNumberArray.push(r)\r\n      }\r\n   }\r\n   for (let i = 0; i < rowCount; i += 1) {\r\n      const SS: string = uniqueRandNumberArray[i].toString()\r\n      yield `${SS.substr(0, 3)}-${SS.substr(3, 2)}-${SS.substr(5, 4)}`\r\n   }\r\n}\r\n\r\nconst getFirstnames = async (url: string): Promise<TFirstName[]> => {\r\n   const r: TFirstName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TFirstName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n\r\nconst getLastnames = async (url: string): Promise<TLastName[]> => {\r\n   const r: TLastName[] = await fetch(url, { method: 'GET' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n         const rows: TLastName[] = data\r\n\r\n         return rows\r\n      })\r\n      .catch((err) => {\r\n         // eslint-disable-next-line no-console\r\n         console.error(`no database >>> ${err}`)\r\n         throw err\r\n      })\r\n   return r\r\n}\r\n","import { Checkbox, FormControlLabel, Grid, Paper, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst varient = 'standard'\r\n\r\n// number input type is being used for integers only\r\n// checkbox is used for boolean datatype\r\nconst implementedInputTypes = ['decimal', 'float', 'number', 'dateTime-local', 'date', 'email', 'checkbox', 'text']\r\n\r\nfunction NumberFormatCustomFixed2(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return (\r\n      <NumberFormat\r\n         {...other}\r\n         getInputRef={inputRef}\r\n         onChange={onChange}\r\n         decimalScale={2}\r\n         fixedDecimalScale\r\n         thousandSeparator\r\n         isNumericString\r\n      />\r\n   )\r\n}\r\n\r\nfunction NumberFormatCustomFloat(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return <NumberFormat {...other} getInputRef={inputRef} onChange={onChange} isNumericString />\r\n}\r\n\r\ninterface IProps {\r\n   fullWidth: boolean\r\n   label: string\r\n   value: any\r\n   required: boolean\r\n   onChange: any\r\n   name: string\r\n   id: string\r\n   type: string\r\n   InputLabelProps: any\r\n}\r\n\r\nconst SwitchTextField = (props: IProps) => {\r\n   const { type, value, label } = props\r\n   if (!implementedInputTypes.includes(type)) {\r\n      return (\r\n         <Grid justify=\"center\">\r\n            <Paper variant=\"outlined\">type {type} is not implemented</Paper>\r\n         </Grid>\r\n      )\r\n   }\r\n\r\n   // inputComponent undefined is ok\r\n   let inputComponent\r\n   if (type === 'decimal') {\r\n      inputComponent = NumberFormatCustomFixed2\r\n   } else if (type === 'float') {\r\n      inputComponent = NumberFormatCustomFloat\r\n   }\r\n\r\n   if (type === 'checkbox') {\r\n      return (\r\n         <Paper elevation={3}>\r\n            <FormControlLabel\r\n               control={<Checkbox {...props} onClick={props.onChange} color=\"primary\" checked={value} />}\r\n               label={label}\r\n            />\r\n         </Paper>\r\n      )\r\n   }\r\n   return (\r\n      <Paper elevation={3} variant=\"elevation\">\r\n         <TextField\r\n            {...props}\r\n            variant={varient}\r\n            InputProps={{\r\n               inputComponent,\r\n            }}\r\n         />\r\n      </Paper>\r\n   )\r\n}\r\nexport default SwitchTextField\r\n","import env from './Env'\r\n\r\nconst getCsrfToken = async () => {\r\n   let _csrfToken = sessionStorage.getItem('csrf_token')\r\n   if (_csrfToken === undefined || _csrfToken === null) {\r\n      const response = await fetch(`${env().API_HOST}/csrf/`, {\r\n         credentials: 'include',\r\n      })\r\n      const data = await response.json()\r\n      _csrfToken = data.csrfToken\r\n   }\r\n\r\n   if (_csrfToken === null) {\r\n      _csrfToken = 'NO_TOKEN'\r\n   } else {\r\n      sessionStorage.setItem('csrf_token', _csrfToken)\r\n   }\r\n\r\n   return _csrfToken\r\n}\r\nexport default getCsrfToken\r\n","/* eslint-disable react/require-default-props */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { Button, Card, CardContent, createStyles, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { ColDef, Columns, DataGrid, RowsProp } from '@material-ui/data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SwitchTextField from '../Controls/SwitchTextField'\r\nimport env from '../Login/Env'\r\nimport getCsrfToken from '../Login/getCsrfToken'\r\n\r\ntype TField = {\r\n   name: string\r\n   modelType: string\r\n   inputType: string\r\n   inputShrink: boolean\r\n   colType: string\r\n   required: boolean\r\n   readOnly: boolean\r\n   label: string\r\n   width: number\r\n   value: any\r\n}\r\n\r\nconst baseUrl = '/api/'\r\n\r\nclass RestMeta {\r\n   url: string\r\n\r\n   hook: any\r\n\r\n   metaFields: TField[]\r\n\r\n   setUrl(url: string) {\r\n      this.url = url\r\n   }\r\n\r\n   setHook(hook: any) {\r\n      this.hook = hook\r\n   }\r\n\r\n   handleRowSelected = (e: any) => {\r\n      const newFields: TField[] = this.metaFields.map((field) => {\r\n         const updataField: TField = field\r\n\r\n         updataField.value = e.data[field.name] ? e.data[field.name] : ''\r\n\r\n         return updataField\r\n      })\r\n      if (this.hook) {\r\n         this.hook(newFields)\r\n      }\r\n   }\r\n\r\n   getRows = async (): Promise<RowsProp> => {\r\n      const r: RowsProp = await fetch(this.url, { method: 'GET' })\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            const rows: RowsProp = data\r\n\r\n            return rows\r\n         })\r\n         .catch((err) => {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`no database >>> ${err}`)\r\n            throw err\r\n         })\r\n      return r\r\n   }\r\n\r\n   getColumns = async (): Promise<Columns> => {\r\n      const metaFields: TField[] = await this.getMetaFields()\r\n      const _cols: Columns = metaFields.map((f) => {\r\n         const col: ColDef = {\r\n            field: f.name,\r\n            headerName: f.label,\r\n            type: f.colType,\r\n         }\r\n         return col\r\n      })\r\n      return _cols\r\n   }\r\n\r\n   getMetaFields = async (): Promise<TField[]> => {\r\n      const f: TField[] = await fetch(this.url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            const meta = metaData.actions.POST\r\n            const fields: TField[] = []\r\n            for (const prop in meta) {\r\n               const detail = meta[prop]\r\n               const fieldDef: TField = {\r\n                  name: prop,\r\n                  modelType: detail.type,\r\n                  inputType: detail.type,\r\n                  inputShrink: true,\r\n                  colType: 'string',\r\n                  required: detail.required,\r\n                  readOnly: detail.read_only,\r\n                  label: detail.label,\r\n                  width: 350,\r\n                  value: '',\r\n               }\r\n               switch (detail.type) {\r\n                  case 'integer':\r\n                     fieldDef.inputType = 'number'\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'decimal':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'float':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'boolean':\r\n                     fieldDef.inputType = 'checkbox'\r\n                     fieldDef.value = false\r\n                     break\r\n                  case 'datetime':\r\n                     fieldDef.inputType = 'dateTime-local'\r\n                     fieldDef.colType = 'dateTime'\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'date':\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'string':\r\n                     fieldDef.inputType = 'text'\r\n                     break\r\n                  case 'email':\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  case 'file upload':\r\n                     fieldDef.width = 300\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  default:\r\n                     break\r\n               }\r\n\r\n               fields.push(fieldDef)\r\n            }\r\n            return fields\r\n         })\r\n      this.metaFields = f\r\n      return f\r\n   }\r\n}\r\nconst meta = new RestMeta()\r\n\r\ninterface IRVProps {\r\n   url: string\r\n   cols?: Columns\r\n}\r\n//  TO DO: Add other optional parameters\r\n//  TO DO: set \"error\" parameter ie. <DataGrid> error </DataGrid> if error\r\n//  TO DO: note what's here does not work shows no row instead of error\r\nexport const RestViewGrid = (props: IRVProps): any => {\r\n   const emptyCols: Columns = []\r\n   const emptyRows: RowsProp = []\r\n   const [cols, setCols] = useState(emptyCols)\r\n   const [rows, setRows] = useState(emptyRows)\r\n   meta.setUrl(props.url)\r\n\r\n   useEffect(() => {\r\n      if (cols === emptyCols) {\r\n         if (props.cols) {\r\n            setCols(props.cols)\r\n         } else {\r\n            meta.getColumns().then((c) => {\r\n               setCols(c)\r\n            })\r\n         }\r\n         meta.getRows().then((r) => {\r\n            setRows(r)\r\n         })\r\n      }\r\n   }, [])\r\n\r\n   return (\r\n      <DataGrid\r\n         density=\"compact\"\r\n         autoHeight\r\n         pageSize={10}\r\n         rows={rows}\r\n         columns={cols}\r\n         onRowSelected={meta.handleRowSelected}\r\n      />\r\n   )\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nexport const RestForm = (props: IProps) => {\r\n   const useStyles = makeStyles(() =>\r\n      createStyles({\r\n         wordwrap: {\r\n            overflowWrap: 'anywhere',\r\n         },\r\n      })\r\n   )\r\n\r\n   const emptyMeta: TField[] = []\r\n   const emptyRep = { ok: false, statusText: '', url: '' }\r\n   const [metaFields, setMetaFields] = useState<TField[]>(emptyMeta)\r\n   const [newData, setNewData] = useState('')\r\n   const [resp, setResp] = useState(emptyRep)\r\n   const classes = useStyles()\r\n   meta.setUrl(props.url)\r\n   meta.setHook(setMetaFields)\r\n\r\n   useEffect(() => {\r\n      if (metaFields === emptyMeta) {\r\n         meta\r\n            .getMetaFields()\r\n            .then((c) => {\r\n               setMetaFields(c)\r\n            })\r\n            .catch(() => {})\r\n      }\r\n   })\r\n\r\n   const handleChange = (event: any) => {\r\n      // event.preventDefault()\r\n      // event.persist()\r\n      let { value } = event.target\r\n      const { type, id, checked } = event.target\r\n      const index = parseInt(id, 10)\r\n\r\n      setMetaFields((prev) => {\r\n         // return untouched all the items that don't match index\r\n         return prev.map((item, i) => {\r\n            if (i !== index) {\r\n               return item\r\n            }\r\n            // for the one item that does match the index\r\n            // do any special handling of event.target.value\r\n            if (type === 'checkbox') {\r\n               value = checked\r\n            }\r\n\r\n            // update the matching item and return result to setMetaFields\r\n            return {\r\n               ...item,\r\n               value,\r\n            }\r\n         })\r\n      })\r\n   }\r\n\r\n   const handleSubmit = async (event: any) => {\r\n      event.preventDefault()\r\n\r\n      const stripReadOnly = metaFields\r\n         .filter((field) => field.value && field.readOnly)\r\n         .map((field) => {\r\n            return {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n         })\r\n\r\n      let pk: number = 0\r\n      const isUpdate = stripReadOnly.length > 0\r\n\r\n      if (isUpdate) {\r\n         pk = stripReadOnly[0].value\r\n      }\r\n\r\n      let stripFormat = metaFields\r\n         .filter((field) => !field.readOnly)\r\n         .map((field) => {\r\n            const stripped = {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n            if (field.inputType === 'decimal' && field.value) {\r\n               stripped.value = stripped.value.replaceAll(',', '')\r\n               stripped.value = stripped.value.replaceAll('$', '')\r\n               stripped.value = stripped.value.replaceAll(' ', '')\r\n               stripped.value = parseFloat(stripped.value)\r\n            }\r\n            if (field.inputType === 'number' && field.value) {\r\n               stripped.value = parseInt(stripped.value, 10)\r\n            }\r\n            if (stripped.value === '') {\r\n               stripped.value = null\r\n            }\r\n            return stripped\r\n         })\r\n\r\n      stripFormat = stripFormat.concat(stripReadOnly)\r\n\r\n      const isValid = validate()\r\n      if (isValid) {\r\n         const data = stripFormat.reduce((acc, cur) => ({ ...acc, [cur.name]: cur.value }), {})\r\n         setNewData(JSON.stringify(data))\r\n\r\n         let url = `${env().API_HOST + baseUrl}`\r\n         let method = 'POST'\r\n\r\n         if (isUpdate) {\r\n            url = `${env().API_HOST + baseUrl}update/${pk}`\r\n            method = 'PUT'\r\n         }\r\n\r\n         const requestOptions = {\r\n            method,\r\n            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n            body: JSON.stringify(data),\r\n         }\r\n\r\n         const response = await fetch(url, requestOptions)\r\n\r\n         setResp(response)\r\n      }\r\n   }\r\n   //  TO DO: implement form level validation\r\n   const validate = () => {\r\n      return true\r\n   }\r\n\r\n   return (\r\n      <Paper>\r\n         <form onSubmit={handleSubmit}>\r\n            {metaFields.map((item, index) => (\r\n               <div key={item.name}>\r\n                  {item.readOnly ? (\r\n                     <Paper variant=\"outlined\">\r\n                        <span>{`${item.name} : ${item.value}`}</span>\r\n                     </Paper>\r\n                  ) : (\r\n                     <SwitchTextField\r\n                        label={item.label}\r\n                        type={item.inputType}\r\n                        fullWidth={true}\r\n                        value={item.value}\r\n                        required={item.required}\r\n                        onChange={handleChange}\r\n                        id={index.toString()}\r\n                        name={item.name}\r\n                        InputLabelProps={{\r\n                           shrink: item.inputShrink,\r\n                        }}\r\n                     />\r\n                  )}\r\n               </div>\r\n            ))}\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n               submit\r\n            </Button>\r\n\r\n            <Card>\r\n               <CardContent>\r\n                  <Typography color=\"textPrimary\" gutterBottom>\r\n                     Data sent:\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" component=\"p\" gutterBottom className={classes.wordwrap}>\r\n                     {newData}\r\n                  </Typography>\r\n                  <Typography color=\"textPrimary\" gutterBottom>\r\n                     Response:\r\n                  </Typography>\r\n                  <Typography>{`Status Text: ${resp.statusText}`}</Typography>\r\n                  <Typography>{`URL: ${resp.url}`}</Typography>\r\n               </CardContent>\r\n            </Card>\r\n         </form>\r\n      </Paper>\r\n   )\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport { createStyles, Grid, makeStyles, Paper, Theme } from '@material-ui/core'\r\nimport { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport env from '../Login/Env'\r\nimport { RestForm, RestViewGrid } from '../RestFormGrid/RestFormGrid'\r\n\r\nconst cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\nconst RestCrud = () => {\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         root: {\r\n            padding: '20px',\r\n         },\r\n         form: {\r\n            marginBottom: theme.spacing(2),\r\n            marginRight: theme.spacing(2),\r\n            minWidth: '215px',\r\n         },\r\n         data: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n\r\n            color: theme.palette.text.secondary,\r\n         },\r\n         dataPaper: {\r\n            marginBottom: theme.spacing(2),\r\n            minHeight: '400px',\r\n            background: theme.palette.text.hint,\r\n         },\r\n      })\r\n   )\r\n   const classes = useStyles()\r\n   return (\r\n      <div className={classes.root}>\r\n         <Grid container spacing={3}>\r\n            <Grid xs={11} sm={4} md={2} className={classes.form}>\r\n               <RestForm url={`${env().API_HOST}/api/`} />\r\n            </Grid>\r\n            <Grid xs={12} sm={6} md={8} lg={9} className={classes.data}>\r\n               <Paper className={classes.dataPaper}>\r\n                  <RestViewGrid url={`${env().API_HOST}/api/`} />\r\n               </Paper>\r\n            </Grid>\r\n         </Grid>\r\n      </div>\r\n   )\r\n}\r\nexport default RestCrud\r\n","import { Paper } from '@material-ui/core'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport Hidden from '@material-ui/core/Hidden'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport { createStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4'\r\nimport BrightnessHighIcon from '@material-ui/icons/BrightnessHigh'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport React from 'react'\r\nimport { createMyTheme, makeMyStyles } from '../../Themes/createMyTheme'\r\nimport env from '../Login/Env'\r\nimport RandomValues from '../RandomNames/RandomNames'\r\nimport RestCrud from '../RestCrud/RestCrud'\r\n\r\nconst drawerWidth = 150\r\n\r\nexport default function ResponsiveDrawer() {\r\n   const [brigtness, setBrightness] = React.useState('dark')\r\n   const appliedTheme = createMyTheme(brigtness)\r\n   const myStyles = makeMyStyles(appliedTheme, drawerWidth)\r\n   const useStyles = makeStyles(() => createStyles(myStyles))\r\n   const classes = useStyles()\r\n   const [mobileOpen, setMobileOpen] = React.useState(false)\r\n   const [showing, setShowing] = React.useState('About Us')\r\n\r\n   document.body.style.backgroundColor = appliedTheme.palette.background.paper\r\n\r\n   const handleDrawerToggle = () => {\r\n      setMobileOpen(!mobileOpen)\r\n   }\r\n\r\n   const handleThemeToggle = (event: any, newValue: string) => {\r\n      setBrightness(newValue)\r\n   }\r\n\r\n   const handleListItemClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, index: string) => {\r\n      setShowing(index)\r\n      setMobileOpen(false)\r\n   }\r\n\r\n   const drawer = (\r\n      <div>\r\n         <Divider />\r\n         <List>\r\n            {['About Us', 'RestGrid', 'Random'].map((text) => (\r\n               <ListItem onClick={(event) => handleListItemClick(event, text)} button key={text}>\r\n                  <ListItemText primary={text} />\r\n               </ListItem>\r\n            ))}\r\n         </List>\r\n      </div>\r\n   )\r\n\r\n   return (\r\n      <ThemeProvider theme={appliedTheme}>\r\n         <Paper className={classes.root}>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n               <Toolbar>\r\n                  <IconButton\r\n                     color=\"inherit\"\r\n                     aria-label=\"open drawer\"\r\n                     edge=\"start\"\r\n                     onClick={handleDrawerToggle}\r\n                     className={classes.menuButton}>\r\n                     <MenuIcon />\r\n                  </IconButton>\r\n                  {brigtness === 'light' ? (\r\n                     <IconButton\r\n                        className={classes.brightness}\r\n                        color=\"inherit\"\r\n                        aria-label=\"Dark Theme\"\r\n                        edge=\"start\"\r\n                        onClick={(event) => handleThemeToggle(event, 'dark')}>\r\n                        <Brightness4Icon />\r\n                     </IconButton>\r\n                  ) : null}\r\n                  {brigtness === 'dark' ? (\r\n                     <IconButton\r\n                        className={classes.brightness}\r\n                        color=\"inherit\"\r\n                        aria-label=\"Light Theme\"\r\n                        edge=\"start\"\r\n                        onClick={(event) => handleThemeToggle(event, 'light')}>\r\n                        <BrightnessHighIcon />\r\n                     </IconButton>\r\n                  ) : null}\r\n                  <Typography variant=\"h6\" noWrap>\r\n                     Rest-React\r\n                  </Typography>\r\n               </Toolbar>\r\n            </AppBar>\r\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n               {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n               <Hidden mdUp implementation=\"css\">\r\n                  <Drawer\r\n                     variant=\"temporary\"\r\n                     anchor={appliedTheme.direction === 'rtl' ? 'right' : 'left'}\r\n                     open={mobileOpen}\r\n                     onClose={handleDrawerToggle}\r\n                     classes={{\r\n                        paper: classes.drawerPaper,\r\n                     }}\r\n                     ModalProps={{\r\n                        keepMounted: true, // Better open performance on mobile.\r\n                     }}>\r\n                     {drawer}\r\n                  </Drawer>\r\n               </Hidden>\r\n               <Hidden smDown implementation=\"css\">\r\n                  <Drawer\r\n                     classes={{\r\n                        paper: classes.drawerPaper,\r\n                     }}\r\n                     variant=\"permanent\"\r\n                     open>\r\n                     {drawer}\r\n                  </Drawer>\r\n               </Hidden>\r\n            </nav>\r\n         </Paper>\r\n         <div className={classes.appBar}>\r\n            <div className={classes.toolbar} />\r\n\r\n            {showing === 'About Us' ? (\r\n               <Paper>\r\n                  <Typography component=\"h4\">About us</Typography>\r\n               </Paper>\r\n            ) : null}\r\n            {showing === 'RestGrid' ? <RestCrud /> : null}\r\n            {showing === 'Random' ? <RandomValues url={`${env().API_HOST}/api/`} /> : null}\r\n         </div>\r\n         <Divider />\r\n         <div className={classes.appBar2}>\r\n            <Typography align=\"center\">Stuff</Typography>\r\n         </div>\r\n      </ThemeProvider>\r\n   )\r\n}\r\n","/* eslint-disable no-shadow */\r\nimport { teal } from '@material-ui/core/colors'\r\nimport { createMuiTheme, createStyles, Theme, ThemeOptions } from '@material-ui/core/styles'\r\n// eslint-disable-next-line no-unused-vars\r\nimport createPalette from '@material-ui/core/styles/createPalette'\r\n// eslint-disable-next-line no-unused-vars\r\n// import * as createPalette from '@material-ui/core/styles/createPalette'\r\n\r\ndeclare module '@material-ui/core/styles/createPalette' {\r\n   interface Palette {\r\n      myBackgound?: Palette['primary']\r\n      myDataGrid?: Palette['secondary']\r\n   }\r\n   export interface PaletteOptions {\r\n      myBackgound?: PaletteOptions['primary']\r\n      myDataGrid?: PaletteOptions['secondary']\r\n   }\r\n}\r\n\r\nexport const createMyTheme = (brigtness: string) => {\r\n   const darkThemeCfg: ThemeOptions = {\r\n      palette: {\r\n         type: 'dark',\r\n         background: {\r\n            paper: '#424242',\r\n            default: '#212121',\r\n         },\r\n         myBackgound: {\r\n            dark: '#424242',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n         myDataGrid: {\r\n            dark: '#616161',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n      },\r\n   }\r\n\r\n   const lightThemeCfg: ThemeOptions = {\r\n      palette: {\r\n         type: 'light',\r\n         primary: teal,\r\n         background: {\r\n            default: '#b2dfdb',\r\n            paper: '#e0f2f1',\r\n         },\r\n         myBackgound: {\r\n            dark: '#424242',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n         myDataGrid: {\r\n            dark: '#616161',\r\n            main: '#00c853',\r\n            light: '#B0BEC5',\r\n            contrastText: '#fff',\r\n         },\r\n      },\r\n   }\r\n\r\n   const options = brigtness === 'light' ? lightThemeCfg : darkThemeCfg\r\n   return createMuiTheme({\r\n      ...options,\r\n   })\r\n}\r\n\r\nexport const makeMyStyles = (theme: Theme, drawerWidth: number) => {\r\n   return createStyles({\r\n      root: {\r\n         display: 'flex',\r\n      },\r\n      drawer: {\r\n         [theme.breakpoints.up('md')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n         },\r\n      },\r\n      appBar: {\r\n         [theme.breakpoints.up('md')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n         },\r\n      },\r\n\r\n      appBar2: {\r\n         position: 'fixed',\r\n         bottom: '0',\r\n         height: '30px',\r\n         paddingLeft: theme.spacing(2),\r\n         background: '#36363a',\r\n         width: '100%',\r\n         [theme.breakpoints.up('md')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n         },\r\n      },\r\n      menuButton: {\r\n         marginRight: theme.spacing(2),\r\n         [theme.breakpoints.up('md')]: {\r\n            display: 'none',\r\n         },\r\n      },\r\n      brightness: {\r\n         marginRight: theme.spacing(2),\r\n         position: 'absolute',\r\n         right: 0,\r\n      },\r\n      // necessary for content to be below app bar\r\n      toolbar: theme.mixins.toolbar,\r\n\r\n      drawerPaper: {\r\n         width: drawerWidth,\r\n         background: theme.palette.background.default,\r\n      },\r\n      main: {\r\n         background: '#424242',\r\n      },\r\n      content: {\r\n         flexGrow: 1,\r\n         padding: theme.spacing(3),\r\n      },\r\n   })\r\n}\r\n","import { Paper } from '@material-ui/core'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App2'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <Paper>\r\n         <App />\r\n      </Paper>\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}