{"version":3,"sources":["Components/Login/Env.tsx","Components/Login/getCsrfToken.tsx","Components/Login/Login.tsx","Components/Controls/SwitchTextField.tsx","Components/App/RestFormGrid.tsx","Components/RestCrud.tsx","Components/Themes/defaultThemeProvider.tsx","Components/App/useToken.tsx","Components/App/App.tsx","index.tsx"],"names":["env","d","API_HOST","getCsrfToken","a","undefined","_csrfToken","sessionStorage","getItem","fetch","credentials","response","json","data","csrfToken","setItem","loginUser","method","userpass","JSON","stringify","headers","body","key","Login","setToken","useState","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","token","className","onSubmit","value","type","onChange","target","process","defaultValue","REACT_APP_NOT_SECRET_CODE","implementedInputTypes","NumberFormatCustomFixed2","props","inputRef","other","getInputRef","decimalScale","fixedDecimalScale","thousandSeparator","isNumericString","NumberFormatCustomFloat","SwitchTextField","inputComponent","label","includes","Paper","elevation","FormControlLabel","control","Checkbox","onClick","color","checked","variant","TextField","InputProps","Grid","justify","meta","url","hook","metaFields","handleRowSelected","newFields","map","field","updataField","name","console","log","getRows","then","catch","err","error","r","getColumns","getMetaFields","_cols","f","headerName","colType","metaData","actions","POST","fields","prop","detail","fieldDef","modelType","inputType","inputShrink","required","readOnly","read_only","width","push","this","RestViewGrid","emptyCols","cols","setCols","rows","setRows","setUrl","useEffect","c","columns","onRowSelected","RestForm","useStyles","makeStyles","createStyles","wordwrap","overflowWrap","emptyMeta","setMetaFields","newData","setNewData","ok","statusText","resp","setResp","classes","setHook","handleChange","event","id","index","parseInt","prev","item","i","stripReadOnly","filter","pk","isUpdate","length","stripFormat","stripped","replaceAll","parseFloat","concat","validate","reduce","acc","cur","requestOptions","direction","container","spacing","fullWidth","toString","InputLabelProps","shrink","Button","Card","CardContent","Typography","gutterBottom","component","xs","RestCrud","theme","header","border","borderStyle","borderTopLeftRadius","borderTopRightRadius","background","flexGrow","breakpoints","down","footer","borderBottomLeftRadius","borderBottomRightRadius","style","minWidth","flexShrink","minHeight","createMuiTheme","palette","primary","main","secondary","DefaultThemeProvider","children","useToken","tokenString","parse","getToken","userToken","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35a301d7.chunk.js","sourcesContent":["const env = () => {\r\n   const d = { API_HOST: 'http://dbhausen.pythonanywhere.com' }\r\n   if (process.env.NODE_ENV === 'development') {\r\n      d.API_HOST = 'http://localhost:8000'\r\n   } else if (process.env.NODE_ENV === 'production') {\r\n      d.API_HOST = 'http://dbhausen.pythonanywhere.com'\r\n   }\r\n   return d\r\n}\r\nexport default env\r\n","import env from './Env'\r\n\r\nconst getCsrfToken = async () => {\r\n   let _csrfToken = sessionStorage.getItem('csrf_token')\r\n   if (_csrfToken === undefined || _csrfToken === null) {\r\n      const response = await fetch(`${env().API_HOST}/csrf/`, {\r\n         credentials: 'include',\r\n      })\r\n      const data = await response.json()\r\n      _csrfToken = data.csrfToken\r\n   }\r\n\r\n   if (_csrfToken === null) {\r\n      _csrfToken = 'NO_TOKEN'\r\n   } else {\r\n      sessionStorage.setItem('csrf_token', _csrfToken)\r\n   }\r\n\r\n   return _csrfToken\r\n}\r\nexport default getCsrfToken\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React, { useState } from 'react'\r\nimport env from './Env'\r\nimport getCsrfToken from './getCsrfToken'\r\nimport './Login.css'\r\n\r\ninterface ICredentials {\r\n   email: string\r\n   password: string\r\n}\r\n\r\ntype ThttpMethod = 'POST' | 'GET' | 'OPTIONS'\r\n\r\nconst loginUser = async (method: ThttpMethod, userpass: ICredentials) => {\r\n   const response = await fetch(`${env().API_HOST}/api/v1/users/auth/login/`, {\r\n      method,\r\n      headers: method === 'POST' ? { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() } : {},\r\n      credentials: 'include',\r\n      body: JSON.stringify(userpass),\r\n   })\r\n   const data = await response.json()\r\n   // needed to do some validation here to see if login was success\r\n   // handle errors\r\n   return data.key\r\n}\r\n\r\nconst Login = ({ setToken }: any) => {\r\n   const [email, setEmail] = useState('d@dd.com')\r\n   const [password, setPassword] = useState('postman!!01')\r\n\r\n   const handleSubmit = async (e: { preventDefault: () => void }) => {\r\n      e.preventDefault()\r\n      const token = await loginUser('POST', { email, password })\r\n      setToken(token)\r\n   }\r\n\r\n   return (\r\n      <div className=\"login-wrapper\">\r\n         <h1>Please Log In</h1>\r\n         <form onSubmit={handleSubmit}>\r\n            <label>\r\n               <p>Username</p>\r\n               <input value={email} type=\"text\" onChange={(e) => setEmail(e.target.value)} />\r\n            </label>\r\n            <label>\r\n               <p>Password</p>\r\n               <input value={password} type=\"password\" onChange={(e) => setPassword(e.target.value)} />\r\n            </label>\r\n            <div>\r\n               <button type=\"submit\">Submit</button>\r\n            </div>\r\n         </form>\r\n         <div>\r\n            <small>\r\n               You are running this application in <b>{process.env.NODE_ENV}</b> mode.\r\n            </small>\r\n            <form>\r\n               <input type=\"hidden\" defaultValue={process.env.REACT_APP_NOT_SECRET_CODE} />\r\n            </form>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\nexport default Login\r\n","import { Checkbox, FormControlLabel, Grid, Paper, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nconst varient = 'standard'\r\n\r\n// number input type is being used for integers only\r\n// checkbox is used for boolean datatype\r\nconst implementedInputTypes = ['decimal', 'float', 'number', 'dateTime-local', 'date', 'email', 'checkbox', 'text']\r\n\r\nfunction NumberFormatCustomFixed2(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return (\r\n      <NumberFormat\r\n         {...other}\r\n         getInputRef={inputRef}\r\n         onChange={onChange}\r\n         decimalScale={2}\r\n         fixedDecimalScale\r\n         thousandSeparator\r\n         isNumericString\r\n      />\r\n   )\r\n}\r\n\r\nfunction NumberFormatCustomFloat(props: any) {\r\n   const { inputRef, onChange, ...other } = props\r\n\r\n   return <NumberFormat {...other} getInputRef={inputRef} onChange={onChange} isNumericString />\r\n}\r\n\r\ninterface IProps {\r\n   fullWidth: boolean\r\n   label: string\r\n   value: any\r\n   required: boolean\r\n   onChange: any\r\n   name: string\r\n   id: string\r\n   type: string\r\n   InputLabelProps: any\r\n}\r\n\r\nconst SwitchTextField = (props: IProps) => {\r\n   const { type, value, label } = props\r\n   if (!implementedInputTypes.includes(type)) {\r\n      return (\r\n         <Grid justify=\"center\">\r\n            <Paper variant=\"outlined\">type {type} is not implemented</Paper>\r\n         </Grid>\r\n      )\r\n   }\r\n\r\n   // inputComponent undefined is ok\r\n   let inputComponent\r\n   if (type === 'decimal') {\r\n      inputComponent = NumberFormatCustomFixed2\r\n   } else if (type === 'float') {\r\n      inputComponent = NumberFormatCustomFloat\r\n   }\r\n\r\n   if (type === 'checkbox') {\r\n      return (\r\n         <Paper elevation={3}>\r\n            <FormControlLabel\r\n               control={<Checkbox {...props} onClick={props.onChange} color=\"primary\" checked={value} />}\r\n               label={label}\r\n            />\r\n         </Paper>\r\n      )\r\n   }\r\n   return (\r\n      <Paper elevation={3} variant=\"elevation\">\r\n         <TextField\r\n            {...props}\r\n            variant={varient}\r\n            InputProps={{\r\n               inputComponent,\r\n            }}\r\n         />\r\n      </Paper>\r\n   )\r\n}\r\nexport default SwitchTextField\r\n","/* eslint-disable no-console */\r\n/* eslint-disable react/require-default-props */\r\n/* eslint-disable guard-for-in */\r\n/* eslint-disable no-restricted-syntax */\r\nimport { Button, Card, CardContent, createStyles, Grid, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { ColDef, Columns, DataGrid, RowsProp } from '@material-ui/data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SwitchTextField from '../Controls/SwitchTextField'\r\nimport env from '../Login/Env'\r\nimport getCsrfToken from '../Login/getCsrfToken'\r\n\r\ntype TField = {\r\n   name: string\r\n   modelType: string\r\n   inputType: string\r\n   inputShrink: boolean\r\n   colType: string\r\n   required: boolean\r\n   readOnly: boolean\r\n   label: string\r\n   width: number\r\n   value: any\r\n}\r\n\r\nclass RestMeta {\r\n   url: string\r\n\r\n   hook: any\r\n\r\n   metaFields: TField[]\r\n\r\n   setUrl(url: string) {\r\n      this.url = url\r\n   }\r\n\r\n   setHook(hook: any) {\r\n      this.hook = hook\r\n   }\r\n\r\n   handleRowSelected = (e: any) => {\r\n      const newFields: TField[] = this.metaFields.map((field) => {\r\n         const updataField: TField = field\r\n         updataField.value = e.data[field.name]\r\n         return updataField\r\n      })\r\n      this.hook(newFields)\r\n      console.log(e)\r\n   }\r\n\r\n   getRows = async (): Promise<RowsProp> => {\r\n      const r: RowsProp = await fetch(this.url, { method: 'GET' })\r\n         .then((response) => response.json())\r\n         .then((data) => {\r\n            const rows: RowsProp = data\r\n\r\n            return rows\r\n         })\r\n         .catch((err) => {\r\n            // eslint-disable-next-line no-console\r\n            console.error(`no database >>> ${err}`)\r\n            throw err\r\n         })\r\n      return r\r\n   }\r\n\r\n   getColumns = async (): Promise<Columns> => {\r\n      const metaFields: TField[] = await this.getMetaFields()\r\n      const _cols: Columns = metaFields.map((f) => {\r\n         const col: ColDef = {\r\n            field: f.name,\r\n            headerName: f.label,\r\n            type: f.colType,\r\n         }\r\n         return col\r\n      })\r\n      return _cols\r\n   }\r\n\r\n   getMetaFields = async (): Promise<TField[]> => {\r\n      const f: TField[] = await fetch(this.url, { method: 'OPTIONS' })\r\n         .then((response) => response.json())\r\n         .then((metaData) => {\r\n            const meta = metaData.actions.POST\r\n            const fields: TField[] = []\r\n            for (const prop in meta) {\r\n               const detail = meta[prop]\r\n               const fieldDef: TField = {\r\n                  name: prop,\r\n                  modelType: detail.type,\r\n                  inputType: detail.type,\r\n                  inputShrink: true,\r\n                  colType: 'string',\r\n                  required: detail.required,\r\n                  readOnly: detail.read_only,\r\n                  label: detail.label,\r\n                  width: 150,\r\n                  value: '',\r\n               }\r\n               switch (detail.type) {\r\n                  case 'integer':\r\n                     fieldDef.inputType = 'number'\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'decimal':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'float':\r\n                     fieldDef.colType = 'number'\r\n                     break\r\n                  case 'boolean':\r\n                     fieldDef.inputType = 'checkbox'\r\n                     fieldDef.value = false\r\n                     break\r\n                  case 'datetime':\r\n                     fieldDef.inputType = 'dateTime-local'\r\n                     fieldDef.colType = 'dateTime'\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'date':\r\n                     fieldDef.width = 300\r\n                     break\r\n                  case 'string':\r\n                     fieldDef.inputType = 'text'\r\n                     break\r\n                  case 'email':\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  case 'file upload':\r\n                     fieldDef.width = 300\r\n                     fieldDef.colType = 'string'\r\n                     break\r\n                  default:\r\n                     break\r\n               }\r\n\r\n               fields.push(fieldDef)\r\n            }\r\n            return fields\r\n         })\r\n      this.metaFields = f\r\n      return f\r\n   }\r\n}\r\nconst meta = new RestMeta()\r\n\r\ninterface IRVProps {\r\n   url: string\r\n   cols?: Columns\r\n}\r\n//  TO DO: Add other optional parameters\r\n//  TO DO: set \"error\" parameter ie. <DataGrid> error </DataGrid> if error\r\n//  TO DO: note what's here does not work shows no row instead of error\r\nexport const RestViewGrid = (props: IRVProps): any => {\r\n   const emptyCols: Columns = []\r\n   const emptyRows: RowsProp = []\r\n   const [cols, setCols] = useState(emptyCols)\r\n   const [rows, setRows] = useState(emptyRows)\r\n   meta.setUrl(props.url)\r\n\r\n   useEffect(() => {\r\n      if (cols === emptyCols) {\r\n         if (props.cols) {\r\n            setCols(props.cols)\r\n         } else {\r\n            meta\r\n               .getColumns()\r\n               .then((c) => {\r\n                  setCols(c)\r\n               })\r\n               .catch((err) => {\r\n                  console.error(err)\r\n               })\r\n         }\r\n         meta\r\n            .getRows()\r\n            .then((r) => {\r\n               setRows(r)\r\n            })\r\n            .catch((err) => {\r\n               console.error(err)\r\n            })\r\n      }\r\n   }, [])\r\n\r\n   return (\r\n      <DataGrid\r\n         //  autoHeight={false}\r\n         rows={rows}\r\n         columns={cols}\r\n         onRowSelected={meta.handleRowSelected}\r\n      />\r\n   )\r\n}\r\n\r\ninterface IProps {\r\n   url: string\r\n}\r\n\r\nexport const RestForm = (props: IProps) => {\r\n   const useStyles = makeStyles(() =>\r\n      createStyles({\r\n         wordwrap: {\r\n            overflowWrap: 'anywhere',\r\n         },\r\n      })\r\n   )\r\n\r\n   const emptyMeta: TField[] = []\r\n   const emptyRep = { ok: false, statusText: '', url: '' }\r\n   const [metaFields, setMetaFields] = useState<TField[]>(emptyMeta)\r\n   const [newData, setNewData] = useState('')\r\n   const [resp, setResp] = useState(emptyRep)\r\n   const classes = useStyles()\r\n   meta.setUrl(props.url)\r\n   meta.setHook(setMetaFields)\r\n\r\n   useEffect(() => {\r\n      if (metaFields === emptyMeta) {\r\n         meta\r\n            .getMetaFields()\r\n            .then((c) => {\r\n               setMetaFields(c)\r\n            })\r\n            .catch(() => {})\r\n      }\r\n   })\r\n\r\n   const handleChange = (event: any) => {\r\n      // event.preventDefault()\r\n      // event.persist()\r\n      let { value } = event.target\r\n      const { type, id, checked } = event.target\r\n      const index = parseInt(id, 10)\r\n      // eslint-disable-next-line no-console\r\n      // console.log(type)\r\n\r\n      setMetaFields((prev) => {\r\n         // return untouched all the items that don't match index\r\n         return prev.map((item, i) => {\r\n            if (i !== index) {\r\n               return item\r\n            }\r\n            // for the one item that does match the index\r\n            // do any special handling of event.target.value\r\n            if (type === 'checkbox') {\r\n               value = checked\r\n            }\r\n\r\n            // update the matching item and return result to setMetaFields\r\n            return {\r\n               ...item,\r\n               value,\r\n            }\r\n         })\r\n      })\r\n   }\r\n\r\n   const handleSubmit = async (event: any) => {\r\n      event.preventDefault()\r\n\r\n      const stripReadOnly = metaFields\r\n         .filter((field) => field.value && field.readOnly)\r\n         .map((field) => {\r\n            return {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n         })\r\n\r\n      let pk: number = 0\r\n      const isUpdate = stripReadOnly.length > 0\r\n\r\n      if (isUpdate) {\r\n         pk = stripReadOnly[0].value\r\n      }\r\n\r\n      let stripFormat = metaFields\r\n         .filter((field) => !field.readOnly)\r\n         .map((field) => {\r\n            const stripped = {\r\n               name: field.name,\r\n               value: field.value,\r\n            }\r\n            if (field.inputType === 'decimal' && field.value) {\r\n               stripped.value = stripped.value.replaceAll(',', '')\r\n               stripped.value = stripped.value.replaceAll('$', '')\r\n               stripped.value = stripped.value.replaceAll(' ', '')\r\n               stripped.value = parseFloat(stripped.value)\r\n            }\r\n            if (field.inputType === 'number' && field.value) {\r\n               stripped.value = parseInt(stripped.value, 10)\r\n            }\r\n            if (stripped.value === '') {\r\n               stripped.value = null\r\n            }\r\n            return stripped\r\n         })\r\n\r\n      stripFormat = stripFormat.concat(stripReadOnly)\r\n\r\n      const isValid = validate()\r\n      if (isValid) {\r\n         const data = stripFormat.reduce((acc, cur) => ({ ...acc, [cur.name]: cur.value }), {})\r\n         setNewData(JSON.stringify(data))\r\n\r\n         if (isUpdate) {\r\n            const requestOptions = {\r\n               method: 'PUT',\r\n               headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n               body: JSON.stringify(data),\r\n               id: 2,\r\n            }\r\n\r\n            const response = await fetch(`${env().API_HOST}/api/update/${pk}`, requestOptions)\r\n\r\n            setResp({\r\n               ok: response.ok,\r\n               statusText: response.statusText,\r\n               url: response.url,\r\n            })\r\n         } else {\r\n            const requestOptions = {\r\n               method: 'POST',\r\n               headers: { 'Content-Type': 'application/json', 'X-CSRFToken': await getCsrfToken() },\r\n               body: JSON.stringify(data),\r\n            }\r\n\r\n            const response = await fetch(`${env().API_HOST}/api/`, requestOptions)\r\n\r\n            setResp({\r\n               ok: response.ok,\r\n               statusText: response.statusText,\r\n               url: response.url,\r\n            })\r\n         }\r\n      }\r\n   }\r\n   //  TO DO: implement form level validation\r\n   const validate = () => {\r\n      return true\r\n   }\r\n\r\n   return (\r\n      <Grid item direction=\"column\" container spacing={0}>\r\n         <form onSubmit={handleSubmit}>\r\n            {metaFields.map((item, index) => (\r\n               <div key={item.name}>\r\n                  {item.readOnly ? (\r\n                     <Grid item>\r\n                        <Paper variant=\"outlined\">\r\n                           <span>{`${item.name} : ${item.value}`}</span>\r\n                        </Paper>\r\n                     </Grid>\r\n                  ) : (\r\n                     <Grid item>\r\n                        <SwitchTextField\r\n                           label={item.label}\r\n                           type={item.inputType}\r\n                           fullWidth={true}\r\n                           value={item.value}\r\n                           required={item.required}\r\n                           onChange={handleChange}\r\n                           id={index.toString()}\r\n                           name={item.name}\r\n                           InputLabelProps={{\r\n                              shrink: item.inputShrink,\r\n                           }}\r\n                        />\r\n                     </Grid>\r\n                  )}\r\n               </div>\r\n            ))}\r\n            <Grid item>\r\n               <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                  submit\r\n               </Button>\r\n            </Grid>\r\n\r\n            <Grid item>\r\n               <Card>\r\n                  <CardContent>\r\n                     <Typography color=\"textPrimary\" gutterBottom>\r\n                        Data sent:\r\n                     </Typography>\r\n                     <Typography variant=\"body2\" component=\"p\" className={classes.wordwrap}>\r\n                        {newData}\r\n                     </Typography>\r\n                     <Typography color=\"textPrimary\" gutterBottom>\r\n                        Response:\r\n                     </Typography>\r\n                     <Typography variant=\"body2\" component=\"div\">\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Ok:\r\n                           </Grid>\r\n                           <Grid>{resp.ok.toString()}</Grid>\r\n                        </Grid>\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Status Text:\r\n                           </Grid>\r\n                           <Grid>{resp.statusText}</Grid>\r\n                        </Grid>\r\n                        <Grid container direction=\"row\">\r\n                           <Grid item xs={2}>\r\n                              Url:\r\n                           </Grid>\r\n                           <Grid>{resp.url}</Grid>\r\n                        </Grid>\r\n                     </Typography>\r\n                  </CardContent>\r\n               </Card>\r\n            </Grid>\r\n         </form>\r\n      </Grid>\r\n   )\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nimport { createStyles, Grid, makeStyles, Theme } from '@material-ui/core'\r\nimport { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport { RestForm, RestViewGrid } from './App/RestFormGrid'\r\nimport env from './Login/Env'\r\n\r\nconst cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\nconst RestCrud = () => {\r\n   const useStyles = makeStyles((theme: Theme) =>\r\n      createStyles({\r\n         header: {\r\n            border: '1px',\r\n            borderStyle: 'solid',\r\n            borderTopLeftRadius: '7px',\r\n            borderTopRightRadius: '7px',\r\n            background: '#90A4AE',\r\n         },\r\n         body: {\r\n            flexGrow: 1,\r\n            background: '#90A4AE',\r\n            [theme.breakpoints.down('xs')]: {\r\n               background: 'red',\r\n            },\r\n         },\r\n         footer: {\r\n            border: '1px',\r\n            borderStyle: 'solid',\r\n            borderBottomLeftRadius: '7px',\r\n            borderBottomRightRadius: '7px',\r\n            background: '#90A4AE',\r\n         },\r\n      })\r\n   )\r\n   const classes = useStyles()\r\n   return (\r\n      <Grid container direction=\"column\" spacing={1}>\r\n         <Grid item xs={12} className={classes.header}>\r\n            Header\r\n         </Grid>\r\n\r\n         <Grid item xs={12} container direction=\"row\" spacing={0} className={classes.body}>\r\n            <Grid item xs={3} style={{ minWidth: '250px' }}>\r\n               <RestForm url={`${env().API_HOST}/api/`} />\r\n            </Grid>\r\n            <Grid item xs={9} style={{ flexShrink: 1, minHeight: '400px' }}>\r\n               <RestViewGrid url={`${env().API_HOST}/api/`} cols={cols} />\r\n            </Grid>\r\n         </Grid>\r\n\r\n         <Grid item xs={12} className={classes.footer}>\r\n            footer\r\n         </Grid>\r\n      </Grid>\r\n   )\r\n}\r\nexport default RestCrud\r\n","import { createMuiTheme, MuiThemeProvider } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst theme = createMuiTheme({\r\n   palette: {\r\n      type: 'dark',\r\n      primary: {\r\n         main: '#304ffe',\r\n      },\r\n      secondary: {\r\n         main: '#009688',\r\n      },\r\n   },\r\n})\r\n\r\nconst DefaultThemeProvider = (props: any) => {\r\n   return <MuiThemeProvider theme={theme}>{props.children}</MuiThemeProvider>\r\n}\r\n\r\nexport default DefaultThemeProvider\r\n","import { useState } from 'react'\r\n\r\n// use 'localStorage' to persist between sessions\r\nconst useToken = () => {\r\n   const getToken = () => {\r\n      const tokenString = sessionStorage.getItem('token')\r\n      if (tokenString === null) {\r\n         return undefined\r\n      }\r\n      return JSON.parse(tokenString)\r\n   }\r\n   const [token, setToken] = useState(getToken())\r\n\r\n   const saveToken = (userToken: { token: string }) => {\r\n      sessionStorage.setItem('token', JSON.stringify(userToken))\r\n      setToken(userToken)\r\n   }\r\n   return {\r\n      setToken: saveToken,\r\n      token,\r\n   }\r\n}\r\nexport default useToken\r\n","import { Columns } from '@material-ui/data-grid'\r\nimport React from 'react'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport env from '../Login/Env'\r\nimport Login from '../Login/Login'\r\nimport RestCrud from '../RestCrud'\r\nimport DefaultThemeProvider from '../Themes/defaultThemeProvider'\r\nimport './App.css'\r\nimport { RestViewGrid } from './RestFormGrid'\r\nimport useToken from './useToken'\r\n\r\nfunction App() {\r\n   const { token, setToken } = useToken()\r\n\r\n   if (!token) {\r\n      return <Login setToken={setToken} />\r\n   }\r\n   const cols: Columns = [{ field: 'myemail', width: 250, headerName: 'Email Address' }, { field: 'id' }]\r\n\r\n   return (\r\n      <DefaultThemeProvider>\r\n         <div className=\"wrapper\">\r\n            <h1>Application</h1>\r\n            <BrowserRouter>\r\n               <Switch>\r\n                  <Route path=\"/rest_grid\">\r\n                     <div>\r\n                        <div>\r\n                           <RestViewGrid url={`${env().API_HOST}/api/`} cols={cols} />\r\n                        </div>\r\n                        <div>\r\n                           <RestViewGrid url={`${env().API_HOST}/api/`} />\r\n                        </div>\r\n                     </div>\r\n                  </Route>\r\n                  <Route path=\"/rest_form\">\r\n                     <RestCrud />\r\n                  </Route>\r\n               </Switch>\r\n            </BrowserRouter>\r\n         </div>\r\n      </DefaultThemeProvider>\r\n   )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './Components/App/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}